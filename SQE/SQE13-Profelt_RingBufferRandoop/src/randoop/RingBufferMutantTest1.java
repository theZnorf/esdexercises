package randoop;

import junit.framework.*;

public class RingBufferMutantTest1 extends TestCase {

  public static boolean debug = false;

  public void test1() throws Throwable {

    if (debug) System.out.printf("%nRingBufferMutantTest1.test1");


    at.fhhagenberg.sqe.exercise13.RingBufferMutant var1 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var1.enqueue((java.lang.Object)'#');
    java.util.Iterator var4 = var1.iterator();
    java.util.Iterator var5 = var1.iterator();
    var1.enqueue((java.lang.Object)false);
    int var8 = var1.size();
    boolean var9 = var1.isEmpty();
    int var10 = var1.size();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var12 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var12.enqueue((java.lang.Object)'#');
    java.util.Iterator var15 = var12.iterator();
    java.util.Iterator var16 = var12.iterator();
    var12.enqueue((java.lang.Object)false);
    java.lang.Object var19 = var12.dequeue();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var21 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var22 = var21.isEmpty();
    boolean var23 = var21.isEmpty();
    java.util.Iterator var24 = var21.iterator();
    boolean var25 = var21.isEmpty();
    var21.enqueue((java.lang.Object)'#');
    boolean var28 = var21.isEmpty();
    int var29 = var21.size();
    java.util.Iterator var30 = var21.iterator();
    var12.enqueue((java.lang.Object)var21);
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var33 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var33.enqueue((java.lang.Object)'#');
    java.util.Iterator var36 = var33.iterator();
    java.util.Iterator var37 = var33.iterator();
    java.util.Iterator var38 = var33.iterator();
    boolean var39 = var33.isEmpty();
    int var40 = var33.size();
    var12.enqueue((java.lang.Object)var40);
    var1.enqueue((java.lang.Object)var40);
    int var43 = var1.size();
    int var44 = var1.size();
    boolean var45 = var1.isEmpty();
    int var46 = var1.size();
    java.util.Iterator var47 = var1.iterator();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + '#'+ "'", var19.equals('#'));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);

  }

  public void test2() throws Throwable {

    if (debug) System.out.printf("%nRingBufferMutantTest1.test2");


    at.fhhagenberg.sqe.exercise13.RingBufferMutant var1 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var1.enqueue((java.lang.Object)'#');
    int var4 = var1.size();
    int var5 = var1.size();
    java.util.Iterator var6 = var1.iterator();
    java.util.Iterator var7 = var1.iterator();
    java.lang.Object var8 = var1.dequeue();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var10 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var11 = var10.isEmpty();
    boolean var12 = var10.isEmpty();
    java.util.Iterator var13 = var10.iterator();
    boolean var14 = var10.isEmpty();
    var10.enqueue((java.lang.Object)'#');
    boolean var17 = var10.isEmpty();
    int var18 = var10.size();
    java.util.Iterator var19 = var10.iterator();
    boolean var20 = var10.isEmpty();
    java.util.Iterator var21 = var10.iterator();
    boolean var22 = var10.isEmpty();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var24 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var24.enqueue((java.lang.Object)'#');
    java.util.Iterator var27 = var24.iterator();
    java.util.Iterator var28 = var24.iterator();
    var24.enqueue((java.lang.Object)false);
    java.lang.Object var31 = var24.dequeue();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var33 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var34 = var33.isEmpty();
    boolean var35 = var33.isEmpty();
    java.util.Iterator var36 = var33.iterator();
    boolean var37 = var33.isEmpty();
    var33.enqueue((java.lang.Object)'#');
    boolean var40 = var33.isEmpty();
    int var41 = var33.size();
    java.util.Iterator var42 = var33.iterator();
    var24.enqueue((java.lang.Object)var33);
    java.util.Iterator var44 = var24.iterator();
    var10.enqueue((java.lang.Object)var24);
    var1.enqueue((java.lang.Object)var10);
    java.lang.Object var47 = var10.dequeue();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + '#'+ "'", var8.equals('#'));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var31 + "' != '" + '#'+ "'", var31.equals('#'));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var47 + "' != '" + '#'+ "'", var47.equals('#'));

  }

  public void test3() throws Throwable {

    if (debug) System.out.printf("%nRingBufferMutantTest1.test3");


    at.fhhagenberg.sqe.exercise13.RingBufferMutant var1 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(1);
    java.util.Iterator var2 = var1.iterator();
    java.util.Iterator var3 = var1.iterator();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var5 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var5.enqueue((java.lang.Object)1.0d);
    java.util.Iterator var8 = var5.iterator();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var10 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(1);
    boolean var11 = var10.isEmpty();
    boolean var12 = var10.isEmpty();
    java.util.Iterator var13 = var10.iterator();
    var5.enqueue((java.lang.Object)var10);
    java.util.Iterator var15 = var10.iterator();
    var1.enqueue((java.lang.Object)var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);

  }

  public void test4() throws Throwable {

    if (debug) System.out.printf("%nRingBufferMutantTest1.test4");


    at.fhhagenberg.sqe.exercise13.RingBufferMutant var1 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var2 = var1.isEmpty();
    boolean var3 = var1.isEmpty();
    boolean var4 = var1.isEmpty();
    int var5 = var1.size();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var7 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(1);
    var1.enqueue((java.lang.Object)var7);
    java.lang.Object var9 = var1.dequeue();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var11 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var12 = var11.isEmpty();
    boolean var13 = var11.isEmpty();
    boolean var14 = var11.isEmpty();
    int var15 = var11.size();
    java.util.Iterator var16 = var11.iterator();
    var1.enqueue((java.lang.Object)var16);
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var19 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var19.enqueue((java.lang.Object)'#');
    var19.enqueue((java.lang.Object)' ');
    var19.enqueue((java.lang.Object)10.0f);
    var1.enqueue((java.lang.Object)var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);

  }

  public void test5() throws Throwable {

    if (debug) System.out.printf("%nRingBufferMutantTest1.test5");


    at.fhhagenberg.sqe.exercise13.RingBufferMutant var1 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var2 = var1.isEmpty();
    boolean var3 = var1.isEmpty();
    boolean var4 = var1.isEmpty();
    int var5 = var1.size();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var7 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(1);
    var1.enqueue((java.lang.Object)var7);
    java.lang.Object var9 = var1.dequeue();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var11 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var12 = var11.isEmpty();
    boolean var13 = var11.isEmpty();
    boolean var14 = var11.isEmpty();
    int var15 = var11.size();
    java.util.Iterator var16 = var11.iterator();
    var1.enqueue((java.lang.Object)var16);
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var19 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var19.enqueue((java.lang.Object)'#');
    java.util.Iterator var22 = var19.iterator();
    java.util.Iterator var23 = var19.iterator();
    var19.enqueue((java.lang.Object)false);
    int var26 = var19.size();
    boolean var27 = var19.isEmpty();
    boolean var28 = var19.isEmpty();
    boolean var29 = var19.isEmpty();
    int var30 = var19.size();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var32 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(100);
    int var33 = var32.size();
    java.util.Iterator var34 = var32.iterator();
    var19.enqueue((java.lang.Object)var32);
    int var36 = var32.size();
    var1.enqueue((java.lang.Object)var32);
    java.util.Iterator var38 = var32.iterator();
    int var39 = var32.size();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var41 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var41.enqueue((java.lang.Object)'#');
    java.util.Iterator var44 = var41.iterator();
    java.util.Iterator var45 = var41.iterator();
    var41.enqueue((java.lang.Object)false);
    int var48 = var41.size();
    boolean var49 = var41.isEmpty();
    boolean var50 = var41.isEmpty();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var52 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var52.enqueue((java.lang.Object)'#');
    int var55 = var52.size();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var57 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var58 = var57.isEmpty();
    boolean var59 = var57.isEmpty();
    java.util.Iterator var60 = var57.iterator();
    boolean var61 = var57.isEmpty();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var63 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var63.enqueue((java.lang.Object)'#');
    java.util.Iterator var66 = var63.iterator();
    java.util.Iterator var67 = var63.iterator();
    var63.enqueue((java.lang.Object)false);
    int var70 = var63.size();
    var57.enqueue((java.lang.Object)var63);
    var52.enqueue((java.lang.Object)var63);
    java.util.Iterator var73 = var63.iterator();
    var41.enqueue((java.lang.Object)var63);
    var63.enqueue((java.lang.Object)false);
    java.util.Iterator var77 = var63.iterator();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var79 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var79.enqueue((java.lang.Object)'#');
    java.util.Iterator var82 = var79.iterator();
    java.util.Iterator var83 = var79.iterator();
    var79.enqueue((java.lang.Object)false);
    java.lang.Object var86 = var79.dequeue();
    java.util.Iterator var87 = var79.iterator();
    var63.enqueue((java.lang.Object)var87);
    var32.enqueue((java.lang.Object)var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var86 + "' != '" + '#'+ "'", var86.equals('#'));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var87);

  }

  public void test6() throws Throwable {

    if (debug) System.out.printf("%nRingBufferMutantTest1.test6");


    at.fhhagenberg.sqe.exercise13.RingBufferMutant var1 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(1);
    java.util.Iterator var2 = var1.iterator();
    java.util.Iterator var3 = var1.iterator();
    int var4 = var1.size();
    int var5 = var1.size();
    boolean var6 = var1.isEmpty();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var8 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var9 = var8.isEmpty();
    boolean var10 = var8.isEmpty();
    java.util.Iterator var11 = var8.iterator();
    boolean var12 = var8.isEmpty();
    int var13 = var8.size();
    int var14 = var8.size();
    java.util.Iterator var15 = var8.iterator();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var17 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var17.enqueue((java.lang.Object)'#');
    java.util.Iterator var20 = var17.iterator();
    java.util.Iterator var21 = var17.iterator();
    java.util.Iterator var22 = var17.iterator();
    var8.enqueue((java.lang.Object)var17);
    int var24 = var8.size();
    var1.enqueue((java.lang.Object)var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 1);

  }

  public void test7() throws Throwable {

    if (debug) System.out.printf("%nRingBufferMutantTest1.test7");


    at.fhhagenberg.sqe.exercise13.RingBufferMutant var1 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var1.enqueue((java.lang.Object)'#');
    int var4 = var1.size();
    int var5 = var1.size();
    java.util.Iterator var6 = var1.iterator();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var8 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var9 = var8.isEmpty();
    boolean var10 = var8.isEmpty();
    java.util.Iterator var11 = var8.iterator();
    boolean var12 = var8.isEmpty();
    var8.enqueue((java.lang.Object)1.0d);
    java.util.Iterator var15 = var8.iterator();
    var1.enqueue((java.lang.Object)var15);
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var18 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var19 = var18.isEmpty();
    boolean var20 = var18.isEmpty();
    int var21 = var18.size();
    java.util.Iterator var22 = var18.iterator();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var24 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var24.enqueue((java.lang.Object)'#');
    int var27 = var24.size();
    var24.enqueue((java.lang.Object)true);
    java.util.Iterator var30 = var24.iterator();
    var18.enqueue((java.lang.Object)var30);
    java.lang.Object var32 = var18.dequeue();
    var18.enqueue((java.lang.Object)10.0f);
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var36 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var36.enqueue((java.lang.Object)'#');
    int var39 = var36.size();
    java.lang.Object var40 = var36.dequeue();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var42 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var42.enqueue((java.lang.Object)'#');
    var42.enqueue((java.lang.Object)' ');
    int var47 = var42.size();
    int var48 = var42.size();
    java.util.Iterator var49 = var42.iterator();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var51 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(0);
    java.util.Iterator var52 = var51.iterator();
    var42.enqueue((java.lang.Object)var52);
    var36.enqueue((java.lang.Object)var42);
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var56 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var57 = var56.isEmpty();
    boolean var58 = var56.isEmpty();
    java.util.Iterator var59 = var56.iterator();
    boolean var60 = var56.isEmpty();
    int var61 = var56.size();
    java.util.Iterator var62 = var56.iterator();
    int var63 = var56.size();
    int var64 = var56.size();
    java.util.Iterator var65 = var56.iterator();
    var36.enqueue((java.lang.Object)var65);
    var18.enqueue((java.lang.Object)var65);
    var1.enqueue((java.lang.Object)var18);
    java.lang.Object var69 = var1.dequeue();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var40 + "' != '" + '#'+ "'", var40.equals('#'));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var69 + "' != '" + '#'+ "'", var69.equals('#'));

  }

  public void test8() throws Throwable {

    if (debug) System.out.printf("%nRingBufferMutantTest1.test8");


    at.fhhagenberg.sqe.exercise13.RingBufferMutant var1 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var1.enqueue((java.lang.Object)'#');
    int var4 = var1.size();
    var1.enqueue((java.lang.Object)true);
    java.util.Iterator var7 = var1.iterator();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var9 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(100);
    var1.enqueue((java.lang.Object)100);
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var12 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var13 = var12.isEmpty();
    boolean var14 = var12.isEmpty();
    java.util.Iterator var15 = var12.iterator();
    boolean var16 = var12.isEmpty();
    int var17 = var12.size();
    int var18 = var12.size();
    java.util.Iterator var19 = var12.iterator();
    var1.enqueue((java.lang.Object)var12);
    java.lang.Object var21 = var1.dequeue();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var21 + "' != '" + '#'+ "'", var21.equals('#'));

  }

  public void test9() throws Throwable {

    if (debug) System.out.printf("%nRingBufferMutantTest1.test9");


    at.fhhagenberg.sqe.exercise13.RingBufferMutant var1 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var1.enqueue((java.lang.Object)'#');
    var1.enqueue((java.lang.Object)' ');
    int var6 = var1.size();
    int var7 = var1.size();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var9 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var10 = var9.isEmpty();
    boolean var11 = var9.isEmpty();
    java.util.Iterator var12 = var9.iterator();
    boolean var13 = var9.isEmpty();
    var9.enqueue((java.lang.Object)'#');
    boolean var16 = var9.isEmpty();
    var1.enqueue((java.lang.Object)var16);
    int var18 = var1.size();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var20 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var20.enqueue((java.lang.Object)'#');
    java.util.Iterator var23 = var20.iterator();
    java.util.Iterator var24 = var20.iterator();
    var20.enqueue((java.lang.Object)false);
    int var27 = var20.size();
    boolean var28 = var20.isEmpty();
    boolean var29 = var20.isEmpty();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var31 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var31.enqueue((java.lang.Object)'#');
    int var34 = var31.size();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var36 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var37 = var36.isEmpty();
    boolean var38 = var36.isEmpty();
    java.util.Iterator var39 = var36.iterator();
    boolean var40 = var36.isEmpty();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var42 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var42.enqueue((java.lang.Object)'#');
    java.util.Iterator var45 = var42.iterator();
    java.util.Iterator var46 = var42.iterator();
    var42.enqueue((java.lang.Object)false);
    int var49 = var42.size();
    var36.enqueue((java.lang.Object)var42);
    var31.enqueue((java.lang.Object)var42);
    java.util.Iterator var52 = var42.iterator();
    var20.enqueue((java.lang.Object)var42);
    var42.enqueue((java.lang.Object)false);
    java.util.Iterator var56 = var42.iterator();
    var1.enqueue((java.lang.Object)var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);

  }

  public void test10() throws Throwable {

    if (debug) System.out.printf("%nRingBufferMutantTest1.test10");


    at.fhhagenberg.sqe.exercise13.RingBufferMutant var1 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var1.enqueue((java.lang.Object)'#');
    java.util.Iterator var4 = var1.iterator();
    var1.enqueue((java.lang.Object)100.0d);
    boolean var7 = var1.isEmpty();
    int var8 = var1.size();
    java.lang.Object var9 = var1.dequeue();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var11 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var12 = var11.isEmpty();
    boolean var13 = var11.isEmpty();
    java.util.Iterator var14 = var11.iterator();
    boolean var15 = var11.isEmpty();
    var11.enqueue((java.lang.Object)'#');
    boolean var18 = var11.isEmpty();
    java.util.Iterator var19 = var11.iterator();
    var1.enqueue((java.lang.Object)var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + '#'+ "'", var9.equals('#'));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);

  }

  public void test11() throws Throwable {

    if (debug) System.out.printf("%nRingBufferMutantTest1.test11");


    at.fhhagenberg.sqe.exercise13.RingBufferMutant var1 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var2 = var1.isEmpty();
    boolean var3 = var1.isEmpty();
    java.util.Iterator var4 = var1.iterator();
    boolean var5 = var1.isEmpty();
    int var6 = var1.size();
    int var7 = var1.size();
    java.util.Iterator var8 = var1.iterator();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var10 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var10.enqueue((java.lang.Object)'#');
    java.util.Iterator var13 = var10.iterator();
    java.util.Iterator var14 = var10.iterator();
    java.util.Iterator var15 = var10.iterator();
    var1.enqueue((java.lang.Object)var10);
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var18 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var18.enqueue((java.lang.Object)'#');
    java.util.Iterator var21 = var18.iterator();
    java.util.Iterator var22 = var18.iterator();
    var18.enqueue((java.lang.Object)false);
    int var25 = var18.size();
    boolean var26 = var18.isEmpty();
    boolean var27 = var18.isEmpty();
    boolean var28 = var18.isEmpty();
    int var29 = var18.size();
    boolean var30 = var18.isEmpty();
    var1.enqueue((java.lang.Object)var30);
    int var32 = var1.size();
    java.util.Iterator var33 = var1.iterator();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);

  }

  public void test12() throws Throwable {

    if (debug) System.out.printf("%nRingBufferMutantTest1.test12");


    at.fhhagenberg.sqe.exercise13.RingBufferMutant var1 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var2 = var1.isEmpty();
    boolean var3 = var1.isEmpty();
    java.util.Iterator var4 = var1.iterator();
    boolean var5 = var1.isEmpty();
    int var6 = var1.size();
    int var7 = var1.size();
    java.util.Iterator var8 = var1.iterator();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var10 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var10.enqueue((java.lang.Object)'#');
    java.util.Iterator var13 = var10.iterator();
    java.util.Iterator var14 = var10.iterator();
    java.util.Iterator var15 = var10.iterator();
    var1.enqueue((java.lang.Object)var10);
    int var17 = var10.size();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var19 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var19.enqueue((java.lang.Object)1.0d);
    java.util.Iterator var22 = var19.iterator();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var24 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(1);
    boolean var25 = var24.isEmpty();
    boolean var26 = var24.isEmpty();
    java.util.Iterator var27 = var24.iterator();
    var19.enqueue((java.lang.Object)var24);
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var30 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var30.enqueue((java.lang.Object)'#');
    java.util.Iterator var33 = var30.iterator();
    java.util.Iterator var34 = var30.iterator();
    var30.enqueue((java.lang.Object)false);
    int var37 = var30.size();
    boolean var38 = var30.isEmpty();
    boolean var39 = var30.isEmpty();
    boolean var40 = var30.isEmpty();
    java.lang.Object var41 = var30.dequeue();
    java.util.Iterator var42 = var30.iterator();
    var19.enqueue((java.lang.Object)var30);
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var45 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var46 = var45.isEmpty();
    boolean var47 = var45.isEmpty();
    int var48 = var45.size();
    java.util.Iterator var49 = var45.iterator();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var51 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var51.enqueue((java.lang.Object)'#');
    int var54 = var51.size();
    var51.enqueue((java.lang.Object)true);
    java.util.Iterator var57 = var51.iterator();
    var45.enqueue((java.lang.Object)var57);
    java.lang.Object var59 = var45.dequeue();
    java.util.Iterator var60 = var45.iterator();
    var19.enqueue((java.lang.Object)var45);
    var10.enqueue((java.lang.Object)var45);
    boolean var63 = var10.isEmpty();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var41 + "' != '" + '#'+ "'", var41.equals('#'));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == false);

  }

  public void test13() throws Throwable {

    if (debug) System.out.printf("%nRingBufferMutantTest1.test13");


    at.fhhagenberg.sqe.exercise13.RingBufferMutant var1 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var2 = var1.isEmpty();
    boolean var3 = var1.isEmpty();
    java.util.Iterator var4 = var1.iterator();
    boolean var5 = var1.isEmpty();
    var1.enqueue((java.lang.Object)'#');
    boolean var8 = var1.isEmpty();
    int var9 = var1.size();
    java.util.Iterator var10 = var1.iterator();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var12 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var12.enqueue((java.lang.Object)'#');
    java.util.Iterator var15 = var12.iterator();
    var12.enqueue((java.lang.Object)100.0d);
    boolean var18 = var12.isEmpty();
    java.lang.Object var19 = var12.dequeue();
    var1.enqueue(var19);
    java.util.Iterator var21 = var1.iterator();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var23 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(1);
    boolean var24 = var23.isEmpty();
    boolean var25 = var23.isEmpty();
    boolean var26 = var23.isEmpty();
    java.util.Iterator var27 = var23.iterator();
    var1.enqueue((java.lang.Object)var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + '#'+ "'", var19.equals('#'));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);

  }

  public void test14() throws Throwable {

    if (debug) System.out.printf("%nRingBufferMutantTest1.test14");


    at.fhhagenberg.sqe.exercise13.RingBufferMutant var1 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var2 = var1.isEmpty();
    boolean var3 = var1.isEmpty();
    java.util.Iterator var4 = var1.iterator();
    boolean var5 = var1.isEmpty();
    int var6 = var1.size();
    int var7 = var1.size();
    java.util.Iterator var8 = var1.iterator();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var10 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var10.enqueue((java.lang.Object)'#');
    java.util.Iterator var13 = var10.iterator();
    java.util.Iterator var14 = var10.iterator();
    java.util.Iterator var15 = var10.iterator();
    var1.enqueue((java.lang.Object)var10);
    int var17 = var10.size();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var19 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var19.enqueue((java.lang.Object)1.0d);
    java.util.Iterator var22 = var19.iterator();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var24 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(1);
    boolean var25 = var24.isEmpty();
    boolean var26 = var24.isEmpty();
    java.util.Iterator var27 = var24.iterator();
    var19.enqueue((java.lang.Object)var24);
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var30 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var30.enqueue((java.lang.Object)'#');
    java.util.Iterator var33 = var30.iterator();
    java.util.Iterator var34 = var30.iterator();
    var30.enqueue((java.lang.Object)false);
    int var37 = var30.size();
    boolean var38 = var30.isEmpty();
    boolean var39 = var30.isEmpty();
    boolean var40 = var30.isEmpty();
    java.lang.Object var41 = var30.dequeue();
    java.util.Iterator var42 = var30.iterator();
    var19.enqueue((java.lang.Object)var30);
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var45 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var46 = var45.isEmpty();
    boolean var47 = var45.isEmpty();
    int var48 = var45.size();
    java.util.Iterator var49 = var45.iterator();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var51 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var51.enqueue((java.lang.Object)'#');
    int var54 = var51.size();
    var51.enqueue((java.lang.Object)true);
    java.util.Iterator var57 = var51.iterator();
    var45.enqueue((java.lang.Object)var57);
    java.lang.Object var59 = var45.dequeue();
    java.util.Iterator var60 = var45.iterator();
    var19.enqueue((java.lang.Object)var45);
    var10.enqueue((java.lang.Object)var45);
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var64 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var65 = var64.isEmpty();
    boolean var66 = var64.isEmpty();
    java.util.Iterator var67 = var64.iterator();
    boolean var68 = var64.isEmpty();
    var64.enqueue((java.lang.Object)'#');
    boolean var71 = var64.isEmpty();
    boolean var72 = var64.isEmpty();
    java.util.Iterator var73 = var64.iterator();
    var10.enqueue((java.lang.Object)var73);
    java.util.Iterator var75 = var10.iterator();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var41 + "' != '" + '#'+ "'", var41.equals('#'));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);

  }

  public void test15() throws Throwable {

    if (debug) System.out.printf("%nRingBufferMutantTest1.test15");


    at.fhhagenberg.sqe.exercise13.RingBufferMutant var1 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var2 = var1.isEmpty();
    boolean var3 = var1.isEmpty();
    java.util.Iterator var4 = var1.iterator();
    boolean var5 = var1.isEmpty();
    int var6 = var1.size();
    int var7 = var1.size();
    java.util.Iterator var8 = var1.iterator();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var10 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var10.enqueue((java.lang.Object)'#');
    java.util.Iterator var13 = var10.iterator();
    java.util.Iterator var14 = var10.iterator();
    java.util.Iterator var15 = var10.iterator();
    var1.enqueue((java.lang.Object)var10);
    int var17 = var10.size();
    boolean var18 = var10.isEmpty();
    java.util.Iterator var19 = var10.iterator();
    java.util.Iterator var20 = var10.iterator();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);

  }

  public void test16() throws Throwable {

    if (debug) System.out.printf("%nRingBufferMutantTest1.test16");


    at.fhhagenberg.sqe.exercise13.RingBufferMutant var1 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var1.enqueue((java.lang.Object)'#');
    java.util.Iterator var4 = var1.iterator();
    java.util.Iterator var5 = var1.iterator();
    var1.enqueue((java.lang.Object)false);
    int var8 = var1.size();
    boolean var9 = var1.isEmpty();
    boolean var10 = var1.isEmpty();
    var1.enqueue((java.lang.Object)(short)0);
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var14 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var14.enqueue((java.lang.Object)'#');
    java.util.Iterator var17 = var14.iterator();
    java.util.Iterator var18 = var14.iterator();
    java.util.Iterator var19 = var14.iterator();
    boolean var20 = var14.isEmpty();
    java.util.Iterator var21 = var14.iterator();
    boolean var22 = var14.isEmpty();
    var1.enqueue((java.lang.Object)var22);
    java.lang.Object var24 = var1.dequeue();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var26 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var27 = var26.isEmpty();
    boolean var28 = var26.isEmpty();
    java.util.Iterator var29 = var26.iterator();
    boolean var30 = var26.isEmpty();
    int var31 = var26.size();
    int var32 = var26.size();
    java.util.Iterator var33 = var26.iterator();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var35 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var35.enqueue((java.lang.Object)'#');
    java.util.Iterator var38 = var35.iterator();
    java.util.Iterator var39 = var35.iterator();
    java.util.Iterator var40 = var35.iterator();
    var26.enqueue((java.lang.Object)var35);
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var43 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var43.enqueue((java.lang.Object)'#');
    java.util.Iterator var46 = var43.iterator();
    java.util.Iterator var47 = var43.iterator();
    var43.enqueue((java.lang.Object)false);
    int var50 = var43.size();
    boolean var51 = var43.isEmpty();
    boolean var52 = var43.isEmpty();
    boolean var53 = var43.isEmpty();
    int var54 = var43.size();
    boolean var55 = var43.isEmpty();
    var26.enqueue((java.lang.Object)var55);
    int var57 = var26.size();
    var1.enqueue((java.lang.Object)var26);
    java.util.Iterator var59 = var1.iterator();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var24 + "' != '" + '#'+ "'", var24.equals('#'));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);

  }

  public void test17() throws Throwable {

    if (debug) System.out.printf("%nRingBufferMutantTest1.test17");


    at.fhhagenberg.sqe.exercise13.RingBufferMutant var1 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var1.enqueue((java.lang.Object)1.0d);
    java.util.Iterator var4 = var1.iterator();
    boolean var5 = var1.isEmpty();
    boolean var6 = var1.isEmpty();
    java.util.Iterator var7 = var1.iterator();
    java.lang.Object var8 = var1.dequeue();
    java.util.Iterator var9 = var1.iterator();
    java.util.Iterator var10 = var1.iterator();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + 1.0d+ "'", var8.equals(1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);

  }

  public void test18() throws Throwable {

    if (debug) System.out.printf("%nRingBufferMutantTest1.test18");


    at.fhhagenberg.sqe.exercise13.RingBufferMutant var1 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var2 = var1.isEmpty();
    boolean var3 = var1.isEmpty();
    java.util.Iterator var4 = var1.iterator();
    boolean var5 = var1.isEmpty();
    var1.enqueue((java.lang.Object)1.0d);
    java.util.Iterator var8 = var1.iterator();
    boolean var9 = var1.isEmpty();
    int var10 = var1.size();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var12 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var12.enqueue((java.lang.Object)'#');
    var12.enqueue((java.lang.Object)' ');
    int var17 = var12.size();
    java.util.Iterator var18 = var12.iterator();
    boolean var19 = var12.isEmpty();
    java.util.Iterator var20 = var12.iterator();
    int var21 = var12.size();
    boolean var22 = var12.isEmpty();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var24 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var24.enqueue((java.lang.Object)'#');
    java.util.Iterator var27 = var24.iterator();
    java.util.Iterator var28 = var24.iterator();
    var24.enqueue((java.lang.Object)false);
    int var31 = var24.size();
    boolean var32 = var24.isEmpty();
    java.lang.Object var33 = var24.dequeue();
    java.util.Iterator var34 = var24.iterator();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var36 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var36.enqueue((java.lang.Object)'#');
    java.util.Iterator var39 = var36.iterator();
    java.util.Iterator var40 = var36.iterator();
    java.util.Iterator var41 = var36.iterator();
    var24.enqueue((java.lang.Object)var36);
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var44 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(0);
    int var45 = var44.size();
    boolean var46 = var44.isEmpty();
    boolean var47 = var44.isEmpty();
    boolean var48 = var44.isEmpty();
    var36.enqueue((java.lang.Object)var44);
    java.util.Iterator var50 = var36.iterator();
    boolean var51 = var36.isEmpty();
    var12.enqueue((java.lang.Object)var36);
    var1.enqueue((java.lang.Object)var12);
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var55 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var55.enqueue((java.lang.Object)'#');
    java.util.Iterator var58 = var55.iterator();
    java.util.Iterator var59 = var55.iterator();
    var55.enqueue((java.lang.Object)false);
    java.lang.Object var62 = var55.dequeue();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var64 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var65 = var64.isEmpty();
    boolean var66 = var64.isEmpty();
    java.util.Iterator var67 = var64.iterator();
    boolean var68 = var64.isEmpty();
    var64.enqueue((java.lang.Object)'#');
    boolean var71 = var64.isEmpty();
    int var72 = var64.size();
    java.util.Iterator var73 = var64.iterator();
    var55.enqueue((java.lang.Object)var64);
    int var75 = var64.size();
    int var76 = var64.size();
    java.util.Iterator var77 = var64.iterator();
    var1.enqueue((java.lang.Object)var77);
    boolean var79 = var1.isEmpty();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var33 + "' != '" + '#'+ "'", var33.equals('#'));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var62 + "' != '" + '#'+ "'", var62.equals('#'));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var76 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var79 == false);

  }

  public void test19() throws Throwable {

    if (debug) System.out.printf("%nRingBufferMutantTest1.test19");


    at.fhhagenberg.sqe.exercise13.RingBufferMutant var1 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var1.enqueue((java.lang.Object)'#');
    int var4 = var1.size();
    int var5 = var1.size();
    java.util.Iterator var6 = var1.iterator();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var8 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var9 = var8.isEmpty();
    boolean var10 = var8.isEmpty();
    java.util.Iterator var11 = var8.iterator();
    boolean var12 = var8.isEmpty();
    var8.enqueue((java.lang.Object)1.0d);
    java.util.Iterator var15 = var8.iterator();
    var1.enqueue((java.lang.Object)var15);
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var18 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var19 = var18.isEmpty();
    boolean var20 = var18.isEmpty();
    int var21 = var18.size();
    java.util.Iterator var22 = var18.iterator();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var24 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var24.enqueue((java.lang.Object)'#');
    int var27 = var24.size();
    var24.enqueue((java.lang.Object)true);
    java.util.Iterator var30 = var24.iterator();
    var18.enqueue((java.lang.Object)var30);
    java.lang.Object var32 = var18.dequeue();
    var18.enqueue((java.lang.Object)10.0f);
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var36 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var36.enqueue((java.lang.Object)'#');
    int var39 = var36.size();
    java.lang.Object var40 = var36.dequeue();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var42 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var42.enqueue((java.lang.Object)'#');
    var42.enqueue((java.lang.Object)' ');
    int var47 = var42.size();
    int var48 = var42.size();
    java.util.Iterator var49 = var42.iterator();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var51 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(0);
    java.util.Iterator var52 = var51.iterator();
    var42.enqueue((java.lang.Object)var52);
    var36.enqueue((java.lang.Object)var42);
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var56 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var57 = var56.isEmpty();
    boolean var58 = var56.isEmpty();
    java.util.Iterator var59 = var56.iterator();
    boolean var60 = var56.isEmpty();
    int var61 = var56.size();
    java.util.Iterator var62 = var56.iterator();
    int var63 = var56.size();
    int var64 = var56.size();
    java.util.Iterator var65 = var56.iterator();
    var36.enqueue((java.lang.Object)var65);
    var18.enqueue((java.lang.Object)var65);
    var1.enqueue((java.lang.Object)var18);
    boolean var69 = var1.isEmpty();
    int var70 = var1.size();
    int var71 = var1.size();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var40 + "' != '" + '#'+ "'", var40.equals('#'));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == 3);

  }

  public void test20() throws Throwable {

    if (debug) System.out.printf("%nRingBufferMutantTest1.test20");


    at.fhhagenberg.sqe.exercise13.RingBufferMutant var1 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var2 = var1.isEmpty();
    boolean var3 = var1.isEmpty();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var5 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var5.enqueue((java.lang.Object)'#');
    java.util.Iterator var8 = var5.iterator();
    java.util.Iterator var9 = var5.iterator();
    var5.enqueue((java.lang.Object)false);
    int var12 = var5.size();
    boolean var13 = var5.isEmpty();
    java.lang.Object var14 = var5.dequeue();
    java.util.Iterator var15 = var5.iterator();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var17 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var17.enqueue((java.lang.Object)'#');
    java.util.Iterator var20 = var17.iterator();
    java.util.Iterator var21 = var17.iterator();
    java.util.Iterator var22 = var17.iterator();
    var5.enqueue((java.lang.Object)var17);
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var25 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(0);
    int var26 = var25.size();
    boolean var27 = var25.isEmpty();
    boolean var28 = var25.isEmpty();
    boolean var29 = var25.isEmpty();
    var17.enqueue((java.lang.Object)var25);
    var1.enqueue((java.lang.Object)var25);
    boolean var32 = var1.isEmpty();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + '#'+ "'", var14.equals('#'));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);

  }

  public void test21() throws Throwable {

    if (debug) System.out.printf("%nRingBufferMutantTest1.test21");


    at.fhhagenberg.sqe.exercise13.RingBufferMutant var1 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var1.enqueue((java.lang.Object)'#');
    java.util.Iterator var4 = var1.iterator();
    java.util.Iterator var5 = var1.iterator();
    int var6 = var1.size();
    boolean var7 = var1.isEmpty();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var9 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var9.enqueue((java.lang.Object)'#');
    java.util.Iterator var12 = var9.iterator();
    java.util.Iterator var13 = var9.iterator();
    var9.enqueue((java.lang.Object)false);
    int var16 = var9.size();
    boolean var17 = var9.isEmpty();
    java.util.Iterator var18 = var9.iterator();
    var1.enqueue((java.lang.Object)var18);
    boolean var20 = var1.isEmpty();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);

  }

  public void test22() throws Throwable {

    if (debug) System.out.printf("%nRingBufferMutantTest1.test22");


    at.fhhagenberg.sqe.exercise13.RingBufferMutant var1 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var2 = var1.isEmpty();
    boolean var3 = var1.isEmpty();
    java.util.Iterator var4 = var1.iterator();
    boolean var5 = var1.isEmpty();
    var1.enqueue((java.lang.Object)'#');
    boolean var8 = var1.isEmpty();
    int var9 = var1.size();
    java.util.Iterator var10 = var1.iterator();
    boolean var11 = var1.isEmpty();
    boolean var12 = var1.isEmpty();
    java.util.Iterator var13 = var1.iterator();
    java.util.Iterator var14 = var1.iterator();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);

  }

  public void test23() throws Throwable {

    if (debug) System.out.printf("%nRingBufferMutantTest1.test23");


    at.fhhagenberg.sqe.exercise13.RingBufferMutant var1 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var2 = var1.isEmpty();
    boolean var3 = var1.isEmpty();
    java.util.Iterator var4 = var1.iterator();
    boolean var5 = var1.isEmpty();
    int var6 = var1.size();
    java.util.Iterator var7 = var1.iterator();
    int var8 = var1.size();
    boolean var9 = var1.isEmpty();
    int var10 = var1.size();
    java.util.Iterator var11 = var1.iterator();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);

  }

  public void test24() throws Throwable {

    if (debug) System.out.printf("%nRingBufferMutantTest1.test24");


    at.fhhagenberg.sqe.exercise13.RingBufferMutant var1 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var1.enqueue((java.lang.Object)'#');
    java.util.Iterator var4 = var1.iterator();
    java.util.Iterator var5 = var1.iterator();
    var1.enqueue((java.lang.Object)false);
    int var8 = var1.size();
    boolean var9 = var1.isEmpty();
    int var10 = var1.size();
    java.lang.Object var11 = new java.lang.Object();
    var1.enqueue(var11);
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var14 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var14.enqueue((java.lang.Object)'#');
    int var17 = var14.size();
    int var18 = var14.size();
    java.util.Iterator var19 = var14.iterator();
    java.util.Iterator var20 = var14.iterator();
    var1.enqueue((java.lang.Object)var20);
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var23 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(1);
    java.util.Iterator var24 = var23.iterator();
    boolean var25 = var23.isEmpty();
    boolean var26 = var23.isEmpty();
    var1.enqueue((java.lang.Object)var26);
    boolean var28 = var1.isEmpty();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);

  }

  public void test25() throws Throwable {

    if (debug) System.out.printf("%nRingBufferMutantTest1.test25");


    at.fhhagenberg.sqe.exercise13.RingBufferMutant var1 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var1.enqueue((java.lang.Object)'#');
    var1.enqueue((java.lang.Object)' ');
    int var6 = var1.size();
    java.util.Iterator var7 = var1.iterator();
    boolean var8 = var1.isEmpty();
    java.util.Iterator var9 = var1.iterator();
    int var10 = var1.size();
    boolean var11 = var1.isEmpty();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var13 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var13.enqueue((java.lang.Object)'#');
    java.util.Iterator var16 = var13.iterator();
    java.util.Iterator var17 = var13.iterator();
    var13.enqueue((java.lang.Object)false);
    int var20 = var13.size();
    boolean var21 = var13.isEmpty();
    java.lang.Object var22 = var13.dequeue();
    java.util.Iterator var23 = var13.iterator();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var25 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var25.enqueue((java.lang.Object)'#');
    java.util.Iterator var28 = var25.iterator();
    java.util.Iterator var29 = var25.iterator();
    java.util.Iterator var30 = var25.iterator();
    var13.enqueue((java.lang.Object)var25);
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var33 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(0);
    int var34 = var33.size();
    boolean var35 = var33.isEmpty();
    boolean var36 = var33.isEmpty();
    boolean var37 = var33.isEmpty();
    var25.enqueue((java.lang.Object)var33);
    java.util.Iterator var39 = var25.iterator();
    boolean var40 = var25.isEmpty();
    var1.enqueue((java.lang.Object)var25);
    java.util.Iterator var42 = var1.iterator();
    int var43 = var1.size();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var45 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var45.enqueue((java.lang.Object)'#');
    java.util.Iterator var48 = var45.iterator();
    java.util.Iterator var49 = var45.iterator();
    java.util.Iterator var50 = var45.iterator();
    boolean var51 = var45.isEmpty();
    java.util.Iterator var52 = var45.iterator();
    java.util.Iterator var53 = var45.iterator();
    java.util.Iterator var54 = var45.iterator();
    boolean var55 = var45.isEmpty();
    var1.enqueue((java.lang.Object)var45);
    boolean var57 = var45.isEmpty();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var22 + "' != '" + '#'+ "'", var22.equals('#'));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == false);

  }

  public void test26() throws Throwable {

    if (debug) System.out.printf("%nRingBufferMutantTest1.test26");


    at.fhhagenberg.sqe.exercise13.RingBufferMutant var1 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var1.enqueue((java.lang.Object)'#');
    var1.enqueue((java.lang.Object)' ');
    int var6 = var1.size();
    int var7 = var1.size();
    var1.enqueue((java.lang.Object)' ');
    boolean var10 = var1.isEmpty();
    java.lang.Object var11 = var1.dequeue();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + '#'+ "'", var11.equals('#'));

  }

  public void test27() throws Throwable {

    if (debug) System.out.printf("%nRingBufferMutantTest1.test27");


    at.fhhagenberg.sqe.exercise13.RingBufferMutant var1 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var1.enqueue((java.lang.Object)1.0d);
    java.util.Iterator var4 = var1.iterator();
    boolean var5 = var1.isEmpty();
    int var6 = var1.size();
    int var7 = var1.size();
    java.lang.Object var8 = var1.dequeue();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var10 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var10.enqueue((java.lang.Object)'#');
    java.util.Iterator var13 = var10.iterator();
    java.util.Iterator var14 = var10.iterator();
    var10.enqueue((java.lang.Object)false);
    int var17 = var10.size();
    boolean var18 = var10.isEmpty();
    int var19 = var10.size();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var21 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var21.enqueue((java.lang.Object)'#');
    java.util.Iterator var24 = var21.iterator();
    java.util.Iterator var25 = var21.iterator();
    var21.enqueue((java.lang.Object)false);
    java.lang.Object var28 = var21.dequeue();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var30 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var31 = var30.isEmpty();
    boolean var32 = var30.isEmpty();
    java.util.Iterator var33 = var30.iterator();
    boolean var34 = var30.isEmpty();
    var30.enqueue((java.lang.Object)'#');
    boolean var37 = var30.isEmpty();
    int var38 = var30.size();
    java.util.Iterator var39 = var30.iterator();
    var21.enqueue((java.lang.Object)var30);
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var42 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var42.enqueue((java.lang.Object)'#');
    java.util.Iterator var45 = var42.iterator();
    java.util.Iterator var46 = var42.iterator();
    java.util.Iterator var47 = var42.iterator();
    boolean var48 = var42.isEmpty();
    int var49 = var42.size();
    var21.enqueue((java.lang.Object)var49);
    var10.enqueue((java.lang.Object)var49);
    int var52 = var10.size();
    int var53 = var10.size();
    boolean var54 = var10.isEmpty();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var56 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var57 = var56.isEmpty();
    boolean var58 = var56.isEmpty();
    java.util.Iterator var59 = var56.iterator();
    boolean var60 = var56.isEmpty();
    var56.enqueue((java.lang.Object)'#');
    java.util.Iterator var63 = var56.iterator();
    boolean var64 = var56.isEmpty();
    var10.enqueue((java.lang.Object)var56);
    var1.enqueue((java.lang.Object)var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + 1.0d+ "'", var8.equals(1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var28 + "' != '" + '#'+ "'", var28.equals('#'));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == false);

  }

  public void test28() throws Throwable {

    if (debug) System.out.printf("%nRingBufferMutantTest1.test28");


    at.fhhagenberg.sqe.exercise13.RingBufferMutant var1 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var2 = var1.isEmpty();
    boolean var3 = var1.isEmpty();
    java.util.Iterator var4 = var1.iterator();
    boolean var5 = var1.isEmpty();
    int var6 = var1.size();
    int var7 = var1.size();
    java.util.Iterator var8 = var1.iterator();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var10 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var10.enqueue((java.lang.Object)'#');
    java.util.Iterator var13 = var10.iterator();
    java.util.Iterator var14 = var10.iterator();
    java.util.Iterator var15 = var10.iterator();
    var1.enqueue((java.lang.Object)var10);
    int var17 = var10.size();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var19 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var19.enqueue((java.lang.Object)1.0d);
    java.util.Iterator var22 = var19.iterator();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var24 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(1);
    boolean var25 = var24.isEmpty();
    boolean var26 = var24.isEmpty();
    java.util.Iterator var27 = var24.iterator();
    var19.enqueue((java.lang.Object)var24);
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var30 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var30.enqueue((java.lang.Object)'#');
    java.util.Iterator var33 = var30.iterator();
    java.util.Iterator var34 = var30.iterator();
    var30.enqueue((java.lang.Object)false);
    int var37 = var30.size();
    boolean var38 = var30.isEmpty();
    boolean var39 = var30.isEmpty();
    boolean var40 = var30.isEmpty();
    java.lang.Object var41 = var30.dequeue();
    java.util.Iterator var42 = var30.iterator();
    var19.enqueue((java.lang.Object)var30);
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var45 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var46 = var45.isEmpty();
    boolean var47 = var45.isEmpty();
    int var48 = var45.size();
    java.util.Iterator var49 = var45.iterator();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var51 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var51.enqueue((java.lang.Object)'#');
    int var54 = var51.size();
    var51.enqueue((java.lang.Object)true);
    java.util.Iterator var57 = var51.iterator();
    var45.enqueue((java.lang.Object)var57);
    java.lang.Object var59 = var45.dequeue();
    java.util.Iterator var60 = var45.iterator();
    var19.enqueue((java.lang.Object)var45);
    var10.enqueue((java.lang.Object)var45);
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var64 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var65 = var64.isEmpty();
    boolean var66 = var64.isEmpty();
    java.util.Iterator var67 = var64.iterator();
    boolean var68 = var64.isEmpty();
    var64.enqueue((java.lang.Object)'#');
    boolean var71 = var64.isEmpty();
    boolean var72 = var64.isEmpty();
    java.util.Iterator var73 = var64.iterator();
    var10.enqueue((java.lang.Object)var73);
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var76 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var77 = var76.isEmpty();
    boolean var78 = var76.isEmpty();
    java.util.Iterator var79 = var76.iterator();
    boolean var80 = var76.isEmpty();
    java.util.Iterator var81 = var76.iterator();
    java.util.Iterator var82 = var76.iterator();
    var10.enqueue((java.lang.Object)var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var41 + "' != '" + '#'+ "'", var41.equals('#'));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var77 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var78 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var80 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);

  }

  public void test29() throws Throwable {

    if (debug) System.out.printf("%nRingBufferMutantTest1.test29");


    at.fhhagenberg.sqe.exercise13.RingBufferMutant var1 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    java.util.Iterator var2 = var1.iterator();
    boolean var3 = var1.isEmpty();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);

  }

  public void test30() throws Throwable {

    if (debug) System.out.printf("%nRingBufferMutantTest1.test30");


    at.fhhagenberg.sqe.exercise13.RingBufferMutant var1 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var1.enqueue((java.lang.Object)'#');
    int var4 = var1.size();
    var1.enqueue((java.lang.Object)true);
    java.util.Iterator var7 = var1.iterator();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var9 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(100);
    var1.enqueue((java.lang.Object)100);
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var12 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var13 = var12.isEmpty();
    boolean var14 = var12.isEmpty();
    java.util.Iterator var15 = var12.iterator();
    boolean var16 = var12.isEmpty();
    int var17 = var12.size();
    int var18 = var12.size();
    java.util.Iterator var19 = var12.iterator();
    var1.enqueue((java.lang.Object)var12);
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var22 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(1);
    java.util.Iterator var23 = var22.iterator();
    var12.enqueue((java.lang.Object)var23);
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var26 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var27 = var26.isEmpty();
    boolean var28 = var26.isEmpty();
    java.util.Iterator var29 = var26.iterator();
    boolean var30 = var26.isEmpty();
    int var31 = var26.size();
    int var32 = var26.size();
    java.util.Iterator var33 = var26.iterator();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var35 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var35.enqueue((java.lang.Object)'#');
    java.util.Iterator var38 = var35.iterator();
    java.util.Iterator var39 = var35.iterator();
    java.util.Iterator var40 = var35.iterator();
    var26.enqueue((java.lang.Object)var35);
    int var42 = var35.size();
    boolean var43 = var35.isEmpty();
    java.util.Iterator var44 = var35.iterator();
    java.lang.Object var45 = var35.dequeue();
    java.util.Iterator var46 = var35.iterator();
    var12.enqueue((java.lang.Object)var35);
    java.util.Iterator var48 = var12.iterator();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var45 + "' != '" + '#'+ "'", var45.equals('#'));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);

  }

  public void test31() throws Throwable {

    if (debug) System.out.printf("%nRingBufferMutantTest1.test31");


    at.fhhagenberg.sqe.exercise13.RingBufferMutant var1 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var1.enqueue((java.lang.Object)'#');
    java.util.Iterator var4 = var1.iterator();
    java.util.Iterator var5 = var1.iterator();
    var1.enqueue((java.lang.Object)false);
    int var8 = var1.size();
    boolean var9 = var1.isEmpty();
    java.lang.Object var10 = var1.dequeue();
    java.util.Iterator var11 = var1.iterator();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var13 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var13.enqueue((java.lang.Object)'#');
    java.util.Iterator var16 = var13.iterator();
    java.util.Iterator var17 = var13.iterator();
    java.util.Iterator var18 = var13.iterator();
    var1.enqueue((java.lang.Object)var13);
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var21 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(0);
    int var22 = var21.size();
    boolean var23 = var21.isEmpty();
    boolean var24 = var21.isEmpty();
    boolean var25 = var21.isEmpty();
    var13.enqueue((java.lang.Object)var21);
    boolean var27 = var21.isEmpty();
    java.util.Iterator var28 = var21.iterator();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + '#'+ "'", var10.equals('#'));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);

  }

  public void test32() throws Throwable {

    if (debug) System.out.printf("%nRingBufferMutantTest1.test32");


    at.fhhagenberg.sqe.exercise13.RingBufferMutant var1 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var2 = var1.isEmpty();
    boolean var3 = var1.isEmpty();
    java.util.Iterator var4 = var1.iterator();
    boolean var5 = var1.isEmpty();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var7 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var7.enqueue((java.lang.Object)'#');
    java.util.Iterator var10 = var7.iterator();
    java.util.Iterator var11 = var7.iterator();
    var7.enqueue((java.lang.Object)false);
    int var14 = var7.size();
    var1.enqueue((java.lang.Object)var7);
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var17 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var17.enqueue((java.lang.Object)'#');
    var17.enqueue((java.lang.Object)' ');
    int var22 = var17.size();
    java.util.Iterator var23 = var17.iterator();
    boolean var24 = var17.isEmpty();
    java.util.Iterator var25 = var17.iterator();
    var7.enqueue((java.lang.Object)var17);
    boolean var27 = var17.isEmpty();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);

  }

  public void test33() throws Throwable {

    if (debug) System.out.printf("%nRingBufferMutantTest1.test33");


    at.fhhagenberg.sqe.exercise13.RingBufferMutant var1 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var1.enqueue((java.lang.Object)'#');
    int var4 = var1.size();
    var1.enqueue((java.lang.Object)true);
    java.util.Iterator var7 = var1.iterator();
    java.lang.Object var8 = var1.dequeue();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var10 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var11 = var10.isEmpty();
    boolean var12 = var10.isEmpty();
    java.util.Iterator var13 = var10.iterator();
    boolean var14 = var10.isEmpty();
    var1.enqueue((java.lang.Object)var10);
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var17 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var18 = var17.isEmpty();
    boolean var19 = var17.isEmpty();
    java.util.Iterator var20 = var17.iterator();
    boolean var21 = var17.isEmpty();
    var17.enqueue((java.lang.Object)'#');
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var25 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var26 = var25.isEmpty();
    boolean var27 = var25.isEmpty();
    java.util.Iterator var28 = var25.iterator();
    boolean var29 = var25.isEmpty();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var31 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var31.enqueue((java.lang.Object)'#');
    java.util.Iterator var34 = var31.iterator();
    java.util.Iterator var35 = var31.iterator();
    var31.enqueue((java.lang.Object)false);
    int var38 = var31.size();
    var25.enqueue((java.lang.Object)var31);
    int var40 = var25.size();
    var17.enqueue((java.lang.Object)var40);
    var1.enqueue((java.lang.Object)var17);
    java.util.Iterator var43 = var17.iterator();
    var17.enqueue((java.lang.Object)(short)1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + '#'+ "'", var8.equals('#'));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);

  }

  public void test34() throws Throwable {

    if (debug) System.out.printf("%nRingBufferMutantTest1.test34");


    at.fhhagenberg.sqe.exercise13.RingBufferMutant var1 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var1.enqueue((java.lang.Object)1.0d);
    java.util.Iterator var4 = var1.iterator();
    java.lang.Object var5 = var1.dequeue();
    java.util.Iterator var6 = var1.iterator();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var8 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var9 = var8.isEmpty();
    boolean var10 = var8.isEmpty();
    int var11 = var8.size();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var13 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var14 = var13.isEmpty();
    boolean var15 = var13.isEmpty();
    var8.enqueue((java.lang.Object)var15);
    boolean var17 = var8.isEmpty();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var19 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var19.enqueue((java.lang.Object)'#');
    java.util.Iterator var22 = var19.iterator();
    java.util.Iterator var23 = var19.iterator();
    java.util.Iterator var24 = var19.iterator();
    boolean var25 = var19.isEmpty();
    java.util.Iterator var26 = var19.iterator();
    int var27 = var19.size();
    int var28 = var19.size();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var30 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var30.enqueue((java.lang.Object)'#');
    int var33 = var30.size();
    var30.enqueue((java.lang.Object)true);
    java.util.Iterator var36 = var30.iterator();
    var19.enqueue((java.lang.Object)var30);
    java.util.Iterator var38 = var19.iterator();
    var8.enqueue((java.lang.Object)var19);
    var1.enqueue((java.lang.Object)var19);
    int var41 = var19.size();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + 1.0d+ "'", var5.equals(1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == 2);

  }

  public void test35() throws Throwable {

    if (debug) System.out.printf("%nRingBufferMutantTest1.test35");


    at.fhhagenberg.sqe.exercise13.RingBufferMutant var1 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var1.enqueue((java.lang.Object)'#');
    int var4 = var1.size();
    var1.enqueue((java.lang.Object)true);
    java.util.Iterator var7 = var1.iterator();
    boolean var8 = var1.isEmpty();
    boolean var9 = var1.isEmpty();
    int var10 = var1.size();
    int var11 = var1.size();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 2);

  }

  public void test36() throws Throwable {

    if (debug) System.out.printf("%nRingBufferMutantTest1.test36");


    at.fhhagenberg.sqe.exercise13.RingBufferMutant var1 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var2 = var1.isEmpty();
    boolean var3 = var1.isEmpty();
    java.util.Iterator var4 = var1.iterator();
    boolean var5 = var1.isEmpty();
    var1.enqueue((java.lang.Object)'#');
    boolean var8 = var1.isEmpty();
    int var9 = var1.size();
    java.util.Iterator var10 = var1.iterator();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var12 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var12.enqueue((java.lang.Object)'#');
    java.util.Iterator var15 = var12.iterator();
    var12.enqueue((java.lang.Object)100.0d);
    boolean var18 = var12.isEmpty();
    java.lang.Object var19 = var12.dequeue();
    var1.enqueue(var19);
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var22 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var22.enqueue((java.lang.Object)'#');
    java.util.Iterator var25 = var22.iterator();
    var1.enqueue((java.lang.Object)var22);
    boolean var27 = var22.isEmpty();
    java.util.Iterator var28 = var22.iterator();
    java.util.Iterator var29 = var22.iterator();
    boolean var30 = var22.isEmpty();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var32 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var32.enqueue((java.lang.Object)'#');
    int var35 = var32.size();
    java.lang.Object var36 = var32.dequeue();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var38 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var38.enqueue((java.lang.Object)'#');
    var38.enqueue((java.lang.Object)' ');
    int var43 = var38.size();
    int var44 = var38.size();
    java.util.Iterator var45 = var38.iterator();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var47 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(0);
    java.util.Iterator var48 = var47.iterator();
    var38.enqueue((java.lang.Object)var48);
    var32.enqueue((java.lang.Object)var38);
    boolean var51 = var38.isEmpty();
    java.lang.Object var52 = var38.dequeue();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var54 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(100);
    boolean var55 = var54.isEmpty();
    boolean var56 = var54.isEmpty();
    java.util.Iterator var57 = var54.iterator();
    var38.enqueue((java.lang.Object)var57);
    var22.enqueue((java.lang.Object)var57);
    java.lang.Object var60 = var22.dequeue();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + '#'+ "'", var19.equals('#'));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var36 + "' != '" + '#'+ "'", var36.equals('#'));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var52 + "' != '" + '#'+ "'", var52.equals('#'));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var60 + "' != '" + '#'+ "'", var60.equals('#'));

  }

  public void test37() throws Throwable {

    if (debug) System.out.printf("%nRingBufferMutantTest1.test37");


    at.fhhagenberg.sqe.exercise13.RingBufferMutant var1 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var1.enqueue((java.lang.Object)'#');
    int var4 = var1.size();
    int var5 = var1.size();
    java.util.Iterator var6 = var1.iterator();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var8 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var9 = var8.isEmpty();
    boolean var10 = var8.isEmpty();
    java.util.Iterator var11 = var8.iterator();
    boolean var12 = var8.isEmpty();
    var8.enqueue((java.lang.Object)1.0d);
    java.util.Iterator var15 = var8.iterator();
    var1.enqueue((java.lang.Object)var15);
    int var17 = var1.size();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var19 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var19.enqueue((java.lang.Object)'#');
    java.util.Iterator var22 = var19.iterator();
    java.util.Iterator var23 = var19.iterator();
    java.util.Iterator var24 = var19.iterator();
    java.lang.Object var25 = var19.dequeue();
    java.util.Iterator var26 = var19.iterator();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var28 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var29 = var28.isEmpty();
    boolean var30 = var28.isEmpty();
    java.util.Iterator var31 = var28.iterator();
    boolean var32 = var28.isEmpty();
    int var33 = var28.size();
    java.util.Iterator var34 = var28.iterator();
    var19.enqueue((java.lang.Object)var28);
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var37 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var38 = var37.isEmpty();
    boolean var39 = var37.isEmpty();
    java.util.Iterator var40 = var37.iterator();
    boolean var41 = var37.isEmpty();
    var37.enqueue((java.lang.Object)'#');
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var45 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var46 = var45.isEmpty();
    boolean var47 = var45.isEmpty();
    java.util.Iterator var48 = var45.iterator();
    boolean var49 = var45.isEmpty();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var51 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var51.enqueue((java.lang.Object)'#');
    java.util.Iterator var54 = var51.iterator();
    java.util.Iterator var55 = var51.iterator();
    var51.enqueue((java.lang.Object)false);
    int var58 = var51.size();
    var45.enqueue((java.lang.Object)var51);
    int var60 = var45.size();
    var37.enqueue((java.lang.Object)var60);
    int var62 = var37.size();
    java.lang.Object var63 = var37.dequeue();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var65 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var66 = var65.isEmpty();
    boolean var67 = var65.isEmpty();
    java.util.Iterator var68 = var65.iterator();
    boolean var69 = var65.isEmpty();
    var65.enqueue((java.lang.Object)'#');
    var37.enqueue((java.lang.Object)var65);
    var28.enqueue((java.lang.Object)var65);
    var1.enqueue((java.lang.Object)var28);
    java.util.Iterator var75 = var1.iterator();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var25 + "' != '" + '#'+ "'", var25.equals('#'));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var63 + "' != '" + '#'+ "'", var63.equals('#'));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);

  }

  public void test38() throws Throwable {

    if (debug) System.out.printf("%nRingBufferMutantTest1.test38");


    at.fhhagenberg.sqe.exercise13.RingBufferMutant var1 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var1.enqueue((java.lang.Object)'#');
    int var4 = var1.size();
    var1.enqueue((java.lang.Object)true);
    java.util.Iterator var7 = var1.iterator();
    java.lang.Object var8 = var1.dequeue();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var10 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var11 = var10.isEmpty();
    boolean var12 = var10.isEmpty();
    java.util.Iterator var13 = var10.iterator();
    boolean var14 = var10.isEmpty();
    var1.enqueue((java.lang.Object)var10);
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var17 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var18 = var17.isEmpty();
    boolean var19 = var17.isEmpty();
    java.util.Iterator var20 = var17.iterator();
    boolean var21 = var17.isEmpty();
    var17.enqueue((java.lang.Object)'#');
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var25 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var26 = var25.isEmpty();
    boolean var27 = var25.isEmpty();
    java.util.Iterator var28 = var25.iterator();
    boolean var29 = var25.isEmpty();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var31 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var31.enqueue((java.lang.Object)'#');
    java.util.Iterator var34 = var31.iterator();
    java.util.Iterator var35 = var31.iterator();
    var31.enqueue((java.lang.Object)false);
    int var38 = var31.size();
    var25.enqueue((java.lang.Object)var31);
    int var40 = var25.size();
    var17.enqueue((java.lang.Object)var40);
    var1.enqueue((java.lang.Object)var17);
    java.util.Iterator var43 = var17.iterator();
    java.util.Iterator var44 = var17.iterator();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + '#'+ "'", var8.equals('#'));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);

  }

  public void test39() throws Throwable {

    if (debug) System.out.printf("%nRingBufferMutantTest1.test39");


    at.fhhagenberg.sqe.exercise13.RingBufferMutant var1 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var1.enqueue((java.lang.Object)'#');
    java.util.Iterator var4 = var1.iterator();
    java.util.Iterator var5 = var1.iterator();
    var1.enqueue((java.lang.Object)false);
    int var8 = var1.size();
    boolean var9 = var1.isEmpty();
    int var10 = var1.size();
    java.lang.Object var11 = new java.lang.Object();
    var1.enqueue(var11);
    boolean var13 = var1.isEmpty();
    int var14 = var1.size();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 3);

  }

  public void test40() throws Throwable {

    if (debug) System.out.printf("%nRingBufferMutantTest1.test40");


    at.fhhagenberg.sqe.exercise13.RingBufferMutant var1 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var1.enqueue((java.lang.Object)'#');
    int var4 = var1.size();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var6 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var7 = var6.isEmpty();
    boolean var8 = var6.isEmpty();
    java.util.Iterator var9 = var6.iterator();
    boolean var10 = var6.isEmpty();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var12 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var12.enqueue((java.lang.Object)'#');
    java.util.Iterator var15 = var12.iterator();
    java.util.Iterator var16 = var12.iterator();
    var12.enqueue((java.lang.Object)false);
    int var19 = var12.size();
    var6.enqueue((java.lang.Object)var12);
    var1.enqueue((java.lang.Object)var12);
    java.util.Iterator var22 = var1.iterator();
    boolean var23 = var1.isEmpty();
    boolean var24 = var1.isEmpty();
    java.util.Iterator var25 = var1.iterator();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);

  }

  public void test41() throws Throwable {

    if (debug) System.out.printf("%nRingBufferMutantTest1.test41");


    at.fhhagenberg.sqe.exercise13.RingBufferMutant var1 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var2 = var1.isEmpty();
    boolean var3 = var1.isEmpty();
    java.util.Iterator var4 = var1.iterator();
    boolean var5 = var1.isEmpty();
    int var6 = var1.size();
    int var7 = var1.size();
    java.util.Iterator var8 = var1.iterator();
    java.util.Iterator var9 = var1.iterator();
    java.util.Iterator var10 = var1.iterator();
    java.util.Iterator var11 = var1.iterator();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);

  }

  public void test42() throws Throwable {

    if (debug) System.out.printf("%nRingBufferMutantTest1.test42");


    at.fhhagenberg.sqe.exercise13.RingBufferMutant var1 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var1.enqueue((java.lang.Object)'#');
    int var4 = var1.size();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var6 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var7 = var6.isEmpty();
    boolean var8 = var6.isEmpty();
    java.util.Iterator var9 = var6.iterator();
    boolean var10 = var6.isEmpty();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var12 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var12.enqueue((java.lang.Object)'#');
    java.util.Iterator var15 = var12.iterator();
    java.util.Iterator var16 = var12.iterator();
    var12.enqueue((java.lang.Object)false);
    int var19 = var12.size();
    var6.enqueue((java.lang.Object)var12);
    var1.enqueue((java.lang.Object)var12);
    java.util.Iterator var22 = var12.iterator();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var24 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var25 = var24.isEmpty();
    boolean var26 = var24.isEmpty();
    java.util.Iterator var27 = var24.iterator();
    boolean var28 = var24.isEmpty();
    var24.enqueue((java.lang.Object)'#');
    boolean var31 = var24.isEmpty();
    int var32 = var24.size();
    java.util.Iterator var33 = var24.iterator();
    boolean var34 = var24.isEmpty();
    var12.enqueue((java.lang.Object)var34);
    boolean var36 = var12.isEmpty();
    int var37 = var12.size();
    java.util.Iterator var38 = var12.iterator();
    int var39 = var12.size();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var41 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var41.enqueue((java.lang.Object)'#');
    var41.enqueue((java.lang.Object)' ');
    int var46 = var41.size();
    int var47 = var41.size();
    int var48 = var41.size();
    int var49 = var41.size();
    var12.enqueue((java.lang.Object)var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == 2);

  }

  public void test43() throws Throwable {

    if (debug) System.out.printf("%nRingBufferMutantTest1.test43");


    at.fhhagenberg.sqe.exercise13.RingBufferMutant var1 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var2 = var1.isEmpty();
    boolean var3 = var1.isEmpty();
    java.util.Iterator var4 = var1.iterator();
    boolean var5 = var1.isEmpty();
    int var6 = var1.size();
    java.util.Iterator var7 = var1.iterator();
    int var8 = var1.size();
    java.util.Iterator var9 = var1.iterator();
    boolean var10 = var1.isEmpty();
    int var11 = var1.size();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var13 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var14 = var13.isEmpty();
    boolean var15 = var13.isEmpty();
    java.util.Iterator var16 = var13.iterator();
    boolean var17 = var13.isEmpty();
    int var18 = var13.size();
    int var19 = var13.size();
    java.util.Iterator var20 = var13.iterator();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var22 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var22.enqueue((java.lang.Object)'#');
    java.util.Iterator var25 = var22.iterator();
    java.util.Iterator var26 = var22.iterator();
    java.util.Iterator var27 = var22.iterator();
    var13.enqueue((java.lang.Object)var22);
    int var29 = var22.size();
    boolean var30 = var22.isEmpty();
    int var31 = var22.size();
    boolean var32 = var22.isEmpty();
    var1.enqueue((java.lang.Object)var22);
    int var34 = var1.size();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == 1);

  }

  public void test44() throws Throwable {

    if (debug) System.out.printf("%nRingBufferMutantTest1.test44");


    at.fhhagenberg.sqe.exercise13.RingBufferMutant var1 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var1.enqueue((java.lang.Object)'#');
    java.util.Iterator var4 = var1.iterator();
    java.util.Iterator var5 = var1.iterator();
    var1.enqueue((java.lang.Object)false);
    int var8 = var1.size();
    boolean var9 = var1.isEmpty();
    boolean var10 = var1.isEmpty();
    var1.enqueue((java.lang.Object)(short)0);
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var14 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var14.enqueue((java.lang.Object)'#');
    java.util.Iterator var17 = var14.iterator();
    java.util.Iterator var18 = var14.iterator();
    java.util.Iterator var19 = var14.iterator();
    boolean var20 = var14.isEmpty();
    java.util.Iterator var21 = var14.iterator();
    boolean var22 = var14.isEmpty();
    var1.enqueue((java.lang.Object)var22);
    int var24 = var1.size();
    int var25 = var1.size();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 4);

  }

  public void test45() throws Throwable {

    if (debug) System.out.printf("%nRingBufferMutantTest1.test45");


    at.fhhagenberg.sqe.exercise13.RingBufferMutant var1 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var1.enqueue((java.lang.Object)'#');
    int var4 = var1.size();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var6 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var7 = var6.isEmpty();
    boolean var8 = var6.isEmpty();
    java.util.Iterator var9 = var6.iterator();
    boolean var10 = var6.isEmpty();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var12 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var12.enqueue((java.lang.Object)'#');
    java.util.Iterator var15 = var12.iterator();
    java.util.Iterator var16 = var12.iterator();
    var12.enqueue((java.lang.Object)false);
    int var19 = var12.size();
    var6.enqueue((java.lang.Object)var12);
    var1.enqueue((java.lang.Object)var12);
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var23 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var23.enqueue((java.lang.Object)1.0d);
    java.util.Iterator var26 = var23.iterator();
    boolean var27 = var23.isEmpty();
    boolean var28 = var23.isEmpty();
    boolean var29 = var23.isEmpty();
    var1.enqueue((java.lang.Object)var23);
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var32 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var32.enqueue((java.lang.Object)'#');
    int var35 = var32.size();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var37 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var38 = var37.isEmpty();
    boolean var39 = var37.isEmpty();
    java.util.Iterator var40 = var37.iterator();
    boolean var41 = var37.isEmpty();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var43 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var43.enqueue((java.lang.Object)'#');
    java.util.Iterator var46 = var43.iterator();
    java.util.Iterator var47 = var43.iterator();
    var43.enqueue((java.lang.Object)false);
    int var50 = var43.size();
    var37.enqueue((java.lang.Object)var43);
    var32.enqueue((java.lang.Object)var43);
    java.util.Iterator var53 = var43.iterator();
    boolean var54 = var43.isEmpty();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var56 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var56.enqueue((java.lang.Object)'#');
    java.util.Iterator var59 = var56.iterator();
    java.util.Iterator var60 = var56.iterator();
    var56.enqueue((java.lang.Object)false);
    java.lang.Object var63 = var56.dequeue();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var65 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var66 = var65.isEmpty();
    boolean var67 = var65.isEmpty();
    java.util.Iterator var68 = var65.iterator();
    boolean var69 = var65.isEmpty();
    var65.enqueue((java.lang.Object)'#');
    boolean var72 = var65.isEmpty();
    int var73 = var65.size();
    java.util.Iterator var74 = var65.iterator();
    var56.enqueue((java.lang.Object)var65);
    var43.enqueue((java.lang.Object)var56);
    var23.enqueue((java.lang.Object)var43);
    boolean var78 = var23.isEmpty();
    int var79 = var23.size();
    boolean var80 = var23.isEmpty();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var63 + "' != '" + '#'+ "'", var63.equals('#'));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var78 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var79 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var80 == false);

  }

  public void test46() throws Throwable {

    if (debug) System.out.printf("%nRingBufferMutantTest1.test46");


    at.fhhagenberg.sqe.exercise13.RingBufferMutant var1 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var1.enqueue((java.lang.Object)1.0d);
    java.util.Iterator var4 = var1.iterator();
    boolean var5 = var1.isEmpty();
    java.util.Iterator var6 = var1.iterator();
    java.lang.Object var7 = var1.dequeue();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + 1.0d+ "'", var7.equals(1.0d));

  }

  public void test47() throws Throwable {

    if (debug) System.out.printf("%nRingBufferMutantTest1.test47");


    at.fhhagenberg.sqe.exercise13.RingBufferMutant var1 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var1.enqueue((java.lang.Object)'#');
    int var4 = var1.size();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var6 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var7 = var6.isEmpty();
    boolean var8 = var6.isEmpty();
    java.util.Iterator var9 = var6.iterator();
    boolean var10 = var6.isEmpty();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var12 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var12.enqueue((java.lang.Object)'#');
    java.util.Iterator var15 = var12.iterator();
    java.util.Iterator var16 = var12.iterator();
    var12.enqueue((java.lang.Object)false);
    int var19 = var12.size();
    var6.enqueue((java.lang.Object)var12);
    var1.enqueue((java.lang.Object)var12);
    java.util.Iterator var22 = var12.iterator();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var24 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var25 = var24.isEmpty();
    boolean var26 = var24.isEmpty();
    java.util.Iterator var27 = var24.iterator();
    boolean var28 = var24.isEmpty();
    var24.enqueue((java.lang.Object)'#');
    boolean var31 = var24.isEmpty();
    int var32 = var24.size();
    java.util.Iterator var33 = var24.iterator();
    boolean var34 = var24.isEmpty();
    var12.enqueue((java.lang.Object)var34);
    boolean var36 = var12.isEmpty();
    int var37 = var12.size();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var39 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(2);
    var12.enqueue((java.lang.Object)2);
    boolean var41 = var12.isEmpty();
    java.lang.Object var42 = var12.dequeue();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var42 + "' != '" + '#'+ "'", var42.equals('#'));

  }

  public void test48() throws Throwable {

    if (debug) System.out.printf("%nRingBufferMutantTest1.test48");


    at.fhhagenberg.sqe.exercise13.RingBufferMutant var1 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var1.enqueue((java.lang.Object)1.0d);
    java.util.Iterator var4 = var1.iterator();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var6 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(1);
    boolean var7 = var6.isEmpty();
    boolean var8 = var6.isEmpty();
    java.util.Iterator var9 = var6.iterator();
    var1.enqueue((java.lang.Object)var6);
    boolean var11 = var6.isEmpty();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == true);

  }

  public void test49() throws Throwable {

    if (debug) System.out.printf("%nRingBufferMutantTest1.test49");


    at.fhhagenberg.sqe.exercise13.RingBufferMutant var1 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var1.enqueue((java.lang.Object)'#');
    int var4 = var1.size();
    int var5 = var1.size();
    java.util.Iterator var6 = var1.iterator();
    java.util.Iterator var7 = var1.iterator();
    boolean var8 = var1.isEmpty();
    boolean var9 = var1.isEmpty();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);

  }

  public void test50() throws Throwable {

    if (debug) System.out.printf("%nRingBufferMutantTest1.test50");


    at.fhhagenberg.sqe.exercise13.RingBufferMutant var1 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var1.enqueue((java.lang.Object)'#');
    java.util.Iterator var4 = var1.iterator();
    java.util.Iterator var5 = var1.iterator();
    var1.enqueue((java.lang.Object)false);
    int var8 = var1.size();
    boolean var9 = var1.isEmpty();
    int var10 = var1.size();
    java.lang.Object var11 = new java.lang.Object();
    var1.enqueue(var11);
    boolean var13 = var1.isEmpty();
    java.util.Iterator var14 = var1.iterator();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);

  }

  public void test51() throws Throwable {

    if (debug) System.out.printf("%nRingBufferMutantTest1.test51");


    at.fhhagenberg.sqe.exercise13.RingBufferMutant var1 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var1.enqueue((java.lang.Object)'#');
    java.util.Iterator var4 = var1.iterator();
    java.util.Iterator var5 = var1.iterator();
    var1.enqueue((java.lang.Object)false);
    int var8 = var1.size();
    boolean var9 = var1.isEmpty();
    boolean var10 = var1.isEmpty();
    var1.enqueue((java.lang.Object)(short)0);
    boolean var13 = var1.isEmpty();
    int var14 = var1.size();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 3);

  }

  public void test52() throws Throwable {

    if (debug) System.out.printf("%nRingBufferMutantTest1.test52");


    at.fhhagenberg.sqe.exercise13.RingBufferMutant var1 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var1.enqueue((java.lang.Object)'#');
    java.util.Iterator var4 = var1.iterator();
    java.util.Iterator var5 = var1.iterator();
    var1.enqueue((java.lang.Object)false);
    int var8 = var1.size();
    boolean var9 = var1.isEmpty();
    int var10 = var1.size();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var12 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var12.enqueue((java.lang.Object)'#');
    java.util.Iterator var15 = var12.iterator();
    java.util.Iterator var16 = var12.iterator();
    var12.enqueue((java.lang.Object)false);
    java.lang.Object var19 = var12.dequeue();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var21 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var22 = var21.isEmpty();
    boolean var23 = var21.isEmpty();
    java.util.Iterator var24 = var21.iterator();
    boolean var25 = var21.isEmpty();
    var21.enqueue((java.lang.Object)'#');
    boolean var28 = var21.isEmpty();
    int var29 = var21.size();
    java.util.Iterator var30 = var21.iterator();
    var12.enqueue((java.lang.Object)var21);
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var33 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var33.enqueue((java.lang.Object)'#');
    java.util.Iterator var36 = var33.iterator();
    java.util.Iterator var37 = var33.iterator();
    java.util.Iterator var38 = var33.iterator();
    boolean var39 = var33.isEmpty();
    int var40 = var33.size();
    var12.enqueue((java.lang.Object)var40);
    var1.enqueue((java.lang.Object)var40);
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var44 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var44.enqueue((java.lang.Object)'#');
    java.util.Iterator var47 = var44.iterator();
    java.util.Iterator var48 = var44.iterator();
    var44.enqueue((java.lang.Object)false);
    int var51 = var44.size();
    boolean var52 = var44.isEmpty();
    boolean var53 = var44.isEmpty();
    boolean var54 = var44.isEmpty();
    java.util.Iterator var55 = var44.iterator();
    java.util.Iterator var56 = var44.iterator();
    var1.enqueue((java.lang.Object)var44);
    boolean var58 = var1.isEmpty();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + '#'+ "'", var19.equals('#'));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == false);

  }

  public void test53() throws Throwable {

    if (debug) System.out.printf("%nRingBufferMutantTest1.test53");


    at.fhhagenberg.sqe.exercise13.RingBufferMutant var1 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(4);
    java.util.Iterator var2 = var1.iterator();
    java.util.Iterator var3 = var1.iterator();
    int var4 = var1.size();
    java.util.Iterator var5 = var1.iterator();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);

  }

  public void test54() throws Throwable {

    if (debug) System.out.printf("%nRingBufferMutantTest1.test54");


    at.fhhagenberg.sqe.exercise13.RingBufferMutant var1 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var2 = var1.isEmpty();
    boolean var3 = var1.isEmpty();
    int var4 = var1.size();
    java.util.Iterator var5 = var1.iterator();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var7 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var7.enqueue((java.lang.Object)'#');
    int var10 = var7.size();
    var7.enqueue((java.lang.Object)true);
    java.util.Iterator var13 = var7.iterator();
    var1.enqueue((java.lang.Object)var13);
    java.util.Iterator var15 = var1.iterator();
    int var16 = var1.size();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var18 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var19 = var18.isEmpty();
    boolean var20 = var18.isEmpty();
    int var21 = var18.size();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var23 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var24 = var23.isEmpty();
    boolean var25 = var23.isEmpty();
    var18.enqueue((java.lang.Object)var25);
    boolean var27 = var18.isEmpty();
    var1.enqueue((java.lang.Object)var27);
    java.util.Iterator var29 = var1.iterator();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var31 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var32 = var31.isEmpty();
    boolean var33 = var31.isEmpty();
    boolean var34 = var31.isEmpty();
    int var35 = var31.size();
    int var36 = var31.size();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var38 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var39 = var38.isEmpty();
    boolean var40 = var38.isEmpty();
    java.util.Iterator var41 = var38.iterator();
    boolean var42 = var38.isEmpty();
    int var43 = var38.size();
    java.util.Iterator var44 = var38.iterator();
    int var45 = var38.size();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var47 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var47.enqueue((java.lang.Object)'#');
    java.util.Iterator var50 = var47.iterator();
    java.util.Iterator var51 = var47.iterator();
    var47.enqueue((java.lang.Object)false);
    java.lang.Object var54 = var47.dequeue();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var56 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var57 = var56.isEmpty();
    boolean var58 = var56.isEmpty();
    java.util.Iterator var59 = var56.iterator();
    boolean var60 = var56.isEmpty();
    var56.enqueue((java.lang.Object)'#');
    boolean var63 = var56.isEmpty();
    int var64 = var56.size();
    java.util.Iterator var65 = var56.iterator();
    var47.enqueue((java.lang.Object)var56);
    int var67 = var56.size();
    int var68 = var56.size();
    var38.enqueue((java.lang.Object)var56);
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var71 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var72 = var71.isEmpty();
    boolean var73 = var71.isEmpty();
    int var74 = var71.size();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var76 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var77 = var76.isEmpty();
    boolean var78 = var76.isEmpty();
    var71.enqueue((java.lang.Object)var78);
    boolean var80 = var71.isEmpty();
    var56.enqueue((java.lang.Object)var80);
    boolean var82 = var56.isEmpty();
    var31.enqueue((java.lang.Object)var56);
    var1.enqueue((java.lang.Object)var56);
    java.util.Iterator var85 = var56.iterator();
    java.lang.Object var86 = var56.dequeue();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var54 + "' != '" + '#'+ "'", var54.equals('#'));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var77 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var78 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var80 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var82 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var85);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var86 + "' != '" + '#'+ "'", var86.equals('#'));

  }

  public void test55() throws Throwable {

    if (debug) System.out.printf("%nRingBufferMutantTest1.test55");


    at.fhhagenberg.sqe.exercise13.RingBufferMutant var1 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var2 = var1.isEmpty();
    boolean var3 = var1.isEmpty();
    java.util.Iterator var4 = var1.iterator();
    boolean var5 = var1.isEmpty();
    var1.enqueue((java.lang.Object)1.0d);
    int var8 = var1.size();
    int var9 = var1.size();
    java.util.Iterator var10 = var1.iterator();
    int var11 = var1.size();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var13 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var13.enqueue((java.lang.Object)'#');
    int var16 = var13.size();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var18 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var19 = var18.isEmpty();
    boolean var20 = var18.isEmpty();
    java.util.Iterator var21 = var18.iterator();
    boolean var22 = var18.isEmpty();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var24 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var24.enqueue((java.lang.Object)'#');
    java.util.Iterator var27 = var24.iterator();
    java.util.Iterator var28 = var24.iterator();
    var24.enqueue((java.lang.Object)false);
    int var31 = var24.size();
    var18.enqueue((java.lang.Object)var24);
    var13.enqueue((java.lang.Object)var24);
    java.util.Iterator var34 = var24.iterator();
    java.util.Iterator var35 = var24.iterator();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var37 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var38 = var37.isEmpty();
    boolean var39 = var37.isEmpty();
    java.util.Iterator var40 = var37.iterator();
    boolean var41 = var37.isEmpty();
    var37.enqueue((java.lang.Object)'#');
    int var44 = var37.size();
    var24.enqueue((java.lang.Object)var44);
    boolean var46 = var24.isEmpty();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var48 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(2);
    java.util.Iterator var49 = var48.iterator();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var51 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var51.enqueue((java.lang.Object)'#');
    java.util.Iterator var54 = var51.iterator();
    java.util.Iterator var55 = var51.iterator();
    var51.enqueue((java.lang.Object)false);
    int var58 = var51.size();
    boolean var59 = var51.isEmpty();
    boolean var60 = var51.isEmpty();
    var48.enqueue((java.lang.Object)var51);
    java.util.Iterator var62 = var48.iterator();
    java.lang.Object var63 = var48.dequeue();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var65 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var66 = var65.isEmpty();
    boolean var67 = var65.isEmpty();
    java.util.Iterator var68 = var65.iterator();
    boolean var69 = var65.isEmpty();
    var65.enqueue((java.lang.Object)1.0d);
    java.lang.Object var72 = var65.dequeue();
    var48.enqueue((java.lang.Object)var65);
    var24.enqueue((java.lang.Object)var65);
    var1.enqueue((java.lang.Object)var65);
    java.lang.Object var76 = var1.dequeue();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var72 + "' != '" + 1.0d+ "'", var72.equals(1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var76 + "' != '" + 1.0d+ "'", var76.equals(1.0d));

  }

  public void test56() throws Throwable {

    if (debug) System.out.printf("%nRingBufferMutantTest1.test56");


    at.fhhagenberg.sqe.exercise13.RingBufferMutant var1 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var2 = var1.isEmpty();
    boolean var3 = var1.isEmpty();
    java.util.Iterator var4 = var1.iterator();
    boolean var5 = var1.isEmpty();
    int var6 = var1.size();
    int var7 = var1.size();
    java.util.Iterator var8 = var1.iterator();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var10 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var10.enqueue((java.lang.Object)'#');
    java.util.Iterator var13 = var10.iterator();
    java.util.Iterator var14 = var10.iterator();
    java.util.Iterator var15 = var10.iterator();
    var1.enqueue((java.lang.Object)var10);
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var18 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(100);
    int var19 = var18.size();
    int var20 = var18.size();
    boolean var21 = var18.isEmpty();
    boolean var22 = var18.isEmpty();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var24 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var24.enqueue((java.lang.Object)'#');
    int var27 = var24.size();
    java.lang.Object var28 = var24.dequeue();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var30 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(0);
    int var31 = var30.size();
    var24.enqueue((java.lang.Object)var31);
    var18.enqueue((java.lang.Object)var31);
    boolean var34 = var18.isEmpty();
    boolean var35 = var18.isEmpty();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var37 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var37.enqueue((java.lang.Object)'#');
    int var40 = var37.size();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var42 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var43 = var42.isEmpty();
    boolean var44 = var42.isEmpty();
    java.util.Iterator var45 = var42.iterator();
    boolean var46 = var42.isEmpty();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var48 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var48.enqueue((java.lang.Object)'#');
    java.util.Iterator var51 = var48.iterator();
    java.util.Iterator var52 = var48.iterator();
    var48.enqueue((java.lang.Object)false);
    int var55 = var48.size();
    var42.enqueue((java.lang.Object)var48);
    var37.enqueue((java.lang.Object)var48);
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var59 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var59.enqueue((java.lang.Object)1.0d);
    java.util.Iterator var62 = var59.iterator();
    boolean var63 = var59.isEmpty();
    boolean var64 = var59.isEmpty();
    boolean var65 = var59.isEmpty();
    var37.enqueue((java.lang.Object)var59);
    int var67 = var37.size();
    var18.enqueue((java.lang.Object)var67);
    java.util.Iterator var69 = var18.iterator();
    var10.enqueue((java.lang.Object)var18);
    boolean var71 = var10.isEmpty();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var28 + "' != '" + '#'+ "'", var28.equals('#'));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == false);

  }

  public void test57() throws Throwable {

    if (debug) System.out.printf("%nRingBufferMutantTest1.test57");


    at.fhhagenberg.sqe.exercise13.RingBufferMutant var1 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var1.enqueue((java.lang.Object)'#');
    java.util.Iterator var4 = var1.iterator();
    java.util.Iterator var5 = var1.iterator();
    java.util.Iterator var6 = var1.iterator();
    boolean var7 = var1.isEmpty();
    java.util.Iterator var8 = var1.iterator();
    java.util.Iterator var9 = var1.iterator();
    java.util.Iterator var10 = var1.iterator();
    boolean var11 = var1.isEmpty();
    java.lang.Object var12 = var1.dequeue();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + '#'+ "'", var12.equals('#'));

  }

  public void test58() throws Throwable {

    if (debug) System.out.printf("%nRingBufferMutantTest1.test58");


    at.fhhagenberg.sqe.exercise13.RingBufferMutant var1 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var1.enqueue((java.lang.Object)'#');
    java.util.Iterator var4 = var1.iterator();
    java.util.Iterator var5 = var1.iterator();
    java.util.Iterator var6 = var1.iterator();
    boolean var7 = var1.isEmpty();
    java.util.Iterator var8 = var1.iterator();
    int var9 = var1.size();
    java.util.Iterator var10 = var1.iterator();
    java.lang.Object var11 = var1.dequeue();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var13 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var13.enqueue((java.lang.Object)'#');
    java.util.Iterator var16 = var13.iterator();
    java.util.Iterator var17 = var13.iterator();
    var13.enqueue((java.lang.Object)false);
    java.lang.Object var20 = var13.dequeue();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var22 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var22.enqueue((java.lang.Object)'#');
    java.util.Iterator var25 = var22.iterator();
    java.util.Iterator var26 = var22.iterator();
    var22.enqueue((java.lang.Object)false);
    int var29 = var22.size();
    boolean var30 = var22.isEmpty();
    java.util.Iterator var31 = var22.iterator();
    var13.enqueue((java.lang.Object)var22);
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var34 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var34.enqueue((java.lang.Object)'#');
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var38 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var38.enqueue((java.lang.Object)'#');
    java.util.Iterator var41 = var38.iterator();
    java.util.Iterator var42 = var38.iterator();
    var38.enqueue((java.lang.Object)false);
    int var45 = var38.size();
    boolean var46 = var38.isEmpty();
    java.lang.Object var47 = var38.dequeue();
    java.util.Iterator var48 = var38.iterator();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var50 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var50.enqueue((java.lang.Object)'#');
    java.util.Iterator var53 = var50.iterator();
    java.util.Iterator var54 = var50.iterator();
    java.util.Iterator var55 = var50.iterator();
    var38.enqueue((java.lang.Object)var50);
    var34.enqueue((java.lang.Object)var50);
    java.util.Iterator var58 = var50.iterator();
    boolean var59 = var50.isEmpty();
    boolean var60 = var50.isEmpty();
    int var61 = var50.size();
    var22.enqueue((java.lang.Object)var50);
    var1.enqueue((java.lang.Object)var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + '#'+ "'", var11.equals('#'));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var20 + "' != '" + '#'+ "'", var20.equals('#'));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var47 + "' != '" + '#'+ "'", var47.equals('#'));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == 1);

  }

  public void test59() throws Throwable {

    if (debug) System.out.printf("%nRingBufferMutantTest1.test59");


    at.fhhagenberg.sqe.exercise13.RingBufferMutant var1 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var1.enqueue((java.lang.Object)'#');
    var1.enqueue((java.lang.Object)' ');
    int var6 = var1.size();
    int var7 = var1.size();
    java.lang.Object var8 = var1.dequeue();
    java.util.Iterator var9 = var1.iterator();
    java.util.Iterator var10 = var1.iterator();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + '#'+ "'", var8.equals('#'));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);

  }

  public void test60() throws Throwable {

    if (debug) System.out.printf("%nRingBufferMutantTest1.test60");


    at.fhhagenberg.sqe.exercise13.RingBufferMutant var1 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var2 = var1.isEmpty();
    boolean var3 = var1.isEmpty();
    java.util.Iterator var4 = var1.iterator();
    boolean var5 = var1.isEmpty();
    var1.enqueue((java.lang.Object)'#');
    boolean var8 = var1.isEmpty();
    boolean var9 = var1.isEmpty();
    int var10 = var1.size();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var12 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var12.enqueue((java.lang.Object)'#');
    java.util.Iterator var15 = var12.iterator();
    java.util.Iterator var16 = var12.iterator();
    boolean var17 = var12.isEmpty();
    int var18 = var12.size();
    var12.enqueue((java.lang.Object)1.0d);
    var1.enqueue((java.lang.Object)var12);
    boolean var22 = var1.isEmpty();
    java.util.Iterator var23 = var1.iterator();
    int var24 = var1.size();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 2);

  }

  public void test61() throws Throwable {

    if (debug) System.out.printf("%nRingBufferMutantTest1.test61");


    at.fhhagenberg.sqe.exercise13.RingBufferMutant var1 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(1);
    java.util.Iterator var2 = var1.iterator();
    java.util.Iterator var3 = var1.iterator();
    java.util.Iterator var4 = var1.iterator();
    int var5 = var1.size();
    int var6 = var1.size();
    int var7 = var1.size();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0);

  }

  public void test62() throws Throwable {

    if (debug) System.out.printf("%nRingBufferMutantTest1.test62");


    at.fhhagenberg.sqe.exercise13.RingBufferMutant var1 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(100);
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var3 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var3.enqueue((java.lang.Object)'#');
    java.util.Iterator var6 = var3.iterator();
    java.util.Iterator var7 = var3.iterator();
    var3.enqueue((java.lang.Object)false);
    int var10 = var3.size();
    boolean var11 = var3.isEmpty();
    int var12 = var3.size();
    java.lang.Object var13 = new java.lang.Object();
    var3.enqueue(var13);
    var1.enqueue((java.lang.Object)var3);
    int var16 = var3.size();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 3);

  }

  public void test63() throws Throwable {

    if (debug) System.out.printf("%nRingBufferMutantTest1.test63");


    at.fhhagenberg.sqe.exercise13.RingBufferMutant var1 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var1.enqueue((java.lang.Object)'#');
    java.util.Iterator var4 = var1.iterator();
    java.util.Iterator var5 = var1.iterator();
    java.util.Iterator var6 = var1.iterator();
    java.lang.Object var7 = var1.dequeue();
    java.util.Iterator var8 = var1.iterator();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var10 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var11 = var10.isEmpty();
    boolean var12 = var10.isEmpty();
    java.util.Iterator var13 = var10.iterator();
    boolean var14 = var10.isEmpty();
    int var15 = var10.size();
    java.util.Iterator var16 = var10.iterator();
    var1.enqueue((java.lang.Object)var10);
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var19 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var20 = var19.isEmpty();
    boolean var21 = var19.isEmpty();
    java.util.Iterator var22 = var19.iterator();
    boolean var23 = var19.isEmpty();
    var19.enqueue((java.lang.Object)'#');
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var27 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var28 = var27.isEmpty();
    boolean var29 = var27.isEmpty();
    java.util.Iterator var30 = var27.iterator();
    boolean var31 = var27.isEmpty();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var33 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var33.enqueue((java.lang.Object)'#');
    java.util.Iterator var36 = var33.iterator();
    java.util.Iterator var37 = var33.iterator();
    var33.enqueue((java.lang.Object)false);
    int var40 = var33.size();
    var27.enqueue((java.lang.Object)var33);
    int var42 = var27.size();
    var19.enqueue((java.lang.Object)var42);
    int var44 = var19.size();
    java.lang.Object var45 = var19.dequeue();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var47 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var48 = var47.isEmpty();
    boolean var49 = var47.isEmpty();
    java.util.Iterator var50 = var47.iterator();
    boolean var51 = var47.isEmpty();
    var47.enqueue((java.lang.Object)'#');
    var19.enqueue((java.lang.Object)var47);
    var10.enqueue((java.lang.Object)var47);
    boolean var56 = var10.isEmpty();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + '#'+ "'", var7.equals('#'));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var45 + "' != '" + '#'+ "'", var45.equals('#'));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == false);

  }

  public void test64() throws Throwable {

    if (debug) System.out.printf("%nRingBufferMutantTest1.test64");


    at.fhhagenberg.sqe.exercise13.RingBufferMutant var1 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var1.enqueue((java.lang.Object)'#');
    var1.enqueue((java.lang.Object)' ');
    int var6 = var1.size();
    java.util.Iterator var7 = var1.iterator();
    boolean var8 = var1.isEmpty();
    java.util.Iterator var9 = var1.iterator();
    int var10 = var1.size();
    boolean var11 = var1.isEmpty();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var13 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var13.enqueue((java.lang.Object)'#');
    java.util.Iterator var16 = var13.iterator();
    java.util.Iterator var17 = var13.iterator();
    var13.enqueue((java.lang.Object)false);
    int var20 = var13.size();
    boolean var21 = var13.isEmpty();
    java.lang.Object var22 = var13.dequeue();
    java.util.Iterator var23 = var13.iterator();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var25 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var25.enqueue((java.lang.Object)'#');
    java.util.Iterator var28 = var25.iterator();
    java.util.Iterator var29 = var25.iterator();
    java.util.Iterator var30 = var25.iterator();
    var13.enqueue((java.lang.Object)var25);
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var33 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(0);
    int var34 = var33.size();
    boolean var35 = var33.isEmpty();
    boolean var36 = var33.isEmpty();
    boolean var37 = var33.isEmpty();
    var25.enqueue((java.lang.Object)var33);
    java.util.Iterator var39 = var25.iterator();
    boolean var40 = var25.isEmpty();
    var1.enqueue((java.lang.Object)var25);
    int var42 = var25.size();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var22 + "' != '" + '#'+ "'", var22.equals('#'));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == 2);

  }

  public void test65() throws Throwable {

    if (debug) System.out.printf("%nRingBufferMutantTest1.test65");


    at.fhhagenberg.sqe.exercise13.RingBufferMutant var1 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var1.enqueue((java.lang.Object)'#');
    var1.enqueue((java.lang.Object)' ');
    int var6 = var1.size();
    java.util.Iterator var7 = var1.iterator();
    java.util.Iterator var8 = var1.iterator();
    java.lang.Object var9 = var1.dequeue();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + '#'+ "'", var9.equals('#'));

  }

  public void test66() throws Throwable {

    if (debug) System.out.printf("%nRingBufferMutantTest1.test66");


    at.fhhagenberg.sqe.exercise13.RingBufferMutant var1 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var1.enqueue((java.lang.Object)'#');
    java.util.Iterator var4 = var1.iterator();
    java.util.Iterator var5 = var1.iterator();
    int var6 = var1.size();
    boolean var7 = var1.isEmpty();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var9 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var9.enqueue((java.lang.Object)'#');
    java.util.Iterator var12 = var9.iterator();
    java.util.Iterator var13 = var9.iterator();
    var9.enqueue((java.lang.Object)false);
    int var16 = var9.size();
    boolean var17 = var9.isEmpty();
    java.util.Iterator var18 = var9.iterator();
    var1.enqueue((java.lang.Object)var18);
    int var20 = var1.size();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 2);

  }

  public void test67() throws Throwable {

    if (debug) System.out.printf("%nRingBufferMutantTest1.test67");


    at.fhhagenberg.sqe.exercise13.RingBufferMutant var1 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var2 = var1.isEmpty();
    boolean var3 = var1.isEmpty();
    java.util.Iterator var4 = var1.iterator();
    boolean var5 = var1.isEmpty();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var7 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var7.enqueue((java.lang.Object)'#');
    java.util.Iterator var10 = var7.iterator();
    java.util.Iterator var11 = var7.iterator();
    var7.enqueue((java.lang.Object)false);
    int var14 = var7.size();
    var1.enqueue((java.lang.Object)var7);
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var17 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var17.enqueue((java.lang.Object)'#');
    var17.enqueue((java.lang.Object)' ');
    int var22 = var17.size();
    java.util.Iterator var23 = var17.iterator();
    boolean var24 = var17.isEmpty();
    java.util.Iterator var25 = var17.iterator();
    var7.enqueue((java.lang.Object)var17);
    boolean var27 = var7.isEmpty();
    java.util.Iterator var28 = var7.iterator();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);

  }

  public void test68() throws Throwable {

    if (debug) System.out.printf("%nRingBufferMutantTest1.test68");


    at.fhhagenberg.sqe.exercise13.RingBufferMutant var1 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var2 = var1.isEmpty();
    boolean var3 = var1.isEmpty();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var5 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var5.enqueue((java.lang.Object)1.0d);
    java.util.Iterator var8 = var5.iterator();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var10 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(1);
    boolean var11 = var10.isEmpty();
    boolean var12 = var10.isEmpty();
    java.util.Iterator var13 = var10.iterator();
    var5.enqueue((java.lang.Object)var10);
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var16 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var16.enqueue((java.lang.Object)'#');
    java.util.Iterator var19 = var16.iterator();
    java.util.Iterator var20 = var16.iterator();
    var16.enqueue((java.lang.Object)false);
    int var23 = var16.size();
    boolean var24 = var16.isEmpty();
    boolean var25 = var16.isEmpty();
    boolean var26 = var16.isEmpty();
    java.lang.Object var27 = var16.dequeue();
    java.util.Iterator var28 = var16.iterator();
    var5.enqueue((java.lang.Object)var16);
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var31 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(0);
    int var32 = var31.size();
    boolean var33 = var31.isEmpty();
    boolean var34 = var31.isEmpty();
    boolean var35 = var31.isEmpty();
    var16.enqueue((java.lang.Object)var31);
    var1.enqueue((java.lang.Object)var16);
    boolean var38 = var1.isEmpty();
    java.util.Iterator var39 = var1.iterator();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var27 + "' != '" + '#'+ "'", var27.equals('#'));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);

  }

  public void test69() throws Throwable {

    if (debug) System.out.printf("%nRingBufferMutantTest1.test69");


    at.fhhagenberg.sqe.exercise13.RingBufferMutant var1 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var2 = var1.isEmpty();
    boolean var3 = var1.isEmpty();
    java.util.Iterator var4 = var1.iterator();
    boolean var5 = var1.isEmpty();
    var1.enqueue((java.lang.Object)1.0d);
    java.util.Iterator var8 = var1.iterator();
    boolean var9 = var1.isEmpty();
    int var10 = var1.size();
    int var11 = var1.size();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 1);

  }

  public void test70() throws Throwable {

    if (debug) System.out.printf("%nRingBufferMutantTest1.test70");


    at.fhhagenberg.sqe.exercise13.RingBufferMutant var1 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(0);
    int var2 = var1.size();
    boolean var3 = var1.isEmpty();
    boolean var4 = var1.isEmpty();
    boolean var5 = var1.isEmpty();
    boolean var6 = var1.isEmpty();
    java.util.Iterator var7 = var1.iterator();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.Object var8 = var1.dequeue();
      fail("Expected exception of type java.lang.RuntimeException");
    } catch (java.lang.RuntimeException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);

  }

  public void test71() throws Throwable {

    if (debug) System.out.printf("%nRingBufferMutantTest1.test71");


    at.fhhagenberg.sqe.exercise13.RingBufferMutant var1 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var2 = var1.isEmpty();
    boolean var3 = var1.isEmpty();
    java.util.Iterator var4 = var1.iterator();
    boolean var5 = var1.isEmpty();
    int var6 = var1.size();
    int var7 = var1.size();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var9 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var9.enqueue((java.lang.Object)'#');
    int var12 = var9.size();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var14 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var15 = var14.isEmpty();
    boolean var16 = var14.isEmpty();
    java.util.Iterator var17 = var14.iterator();
    boolean var18 = var14.isEmpty();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var20 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var20.enqueue((java.lang.Object)'#');
    java.util.Iterator var23 = var20.iterator();
    java.util.Iterator var24 = var20.iterator();
    var20.enqueue((java.lang.Object)false);
    int var27 = var20.size();
    var14.enqueue((java.lang.Object)var20);
    var9.enqueue((java.lang.Object)var20);
    java.util.Iterator var30 = var20.iterator();
    java.util.Iterator var31 = var20.iterator();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var33 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var34 = var33.isEmpty();
    boolean var35 = var33.isEmpty();
    java.util.Iterator var36 = var33.iterator();
    boolean var37 = var33.isEmpty();
    var33.enqueue((java.lang.Object)'#');
    int var40 = var33.size();
    var20.enqueue((java.lang.Object)var40);
    boolean var42 = var20.isEmpty();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var44 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var44.enqueue((java.lang.Object)'#');
    int var47 = var44.size();
    int var48 = var44.size();
    java.util.Iterator var49 = var44.iterator();
    java.util.Iterator var50 = var44.iterator();
    var20.enqueue((java.lang.Object)var44);
    var1.enqueue((java.lang.Object)var20);
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var54 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var54.enqueue((java.lang.Object)'#');
    java.util.Iterator var57 = var54.iterator();
    java.util.Iterator var58 = var54.iterator();
    boolean var59 = var54.isEmpty();
    int var60 = var54.size();
    var54.enqueue((java.lang.Object)1.0d);
    boolean var63 = var54.isEmpty();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var65 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var65.enqueue((java.lang.Object)'#');
    java.util.Iterator var68 = var65.iterator();
    java.util.Iterator var69 = var65.iterator();
    var65.enqueue((java.lang.Object)false);
    java.lang.Object var72 = var65.dequeue();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var74 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var75 = var74.isEmpty();
    boolean var76 = var74.isEmpty();
    java.util.Iterator var77 = var74.iterator();
    boolean var78 = var74.isEmpty();
    var74.enqueue((java.lang.Object)'#');
    boolean var81 = var74.isEmpty();
    int var82 = var74.size();
    java.util.Iterator var83 = var74.iterator();
    var65.enqueue((java.lang.Object)var74);
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var86 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var86.enqueue((java.lang.Object)'#');
    java.util.Iterator var89 = var86.iterator();
    java.util.Iterator var90 = var86.iterator();
    java.util.Iterator var91 = var86.iterator();
    boolean var92 = var86.isEmpty();
    int var93 = var86.size();
    var65.enqueue((java.lang.Object)var93);
    java.util.Iterator var95 = var65.iterator();
    var54.enqueue((java.lang.Object)var65);
    boolean var97 = var54.isEmpty();
    java.lang.Object var98 = var54.dequeue();
    var20.enqueue(var98);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var72 + "' != '" + '#'+ "'", var72.equals('#'));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var76 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var78 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var81 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var82 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var89);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var90);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var91);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var92 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var93 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var95);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var97 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var98 + "' != '" + '#'+ "'", var98.equals('#'));

  }

  public void test72() throws Throwable {

    if (debug) System.out.printf("%nRingBufferMutantTest1.test72");


    at.fhhagenberg.sqe.exercise13.RingBufferMutant var1 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var1.enqueue((java.lang.Object)'#');
    boolean var4 = var1.isEmpty();
    java.lang.Object var5 = var1.dequeue();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var7 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(100);
    int var8 = var7.size();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var10 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var10.enqueue((java.lang.Object)'#');
    java.util.Iterator var13 = var10.iterator();
    java.util.Iterator var14 = var10.iterator();
    var10.enqueue((java.lang.Object)false);
    java.lang.Object var17 = var10.dequeue();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var19 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var20 = var19.isEmpty();
    boolean var21 = var19.isEmpty();
    java.util.Iterator var22 = var19.iterator();
    boolean var23 = var19.isEmpty();
    var19.enqueue((java.lang.Object)'#');
    boolean var26 = var19.isEmpty();
    int var27 = var19.size();
    java.util.Iterator var28 = var19.iterator();
    var10.enqueue((java.lang.Object)var19);
    int var30 = var19.size();
    int var31 = var19.size();
    var7.enqueue((java.lang.Object)var31);
    java.lang.Object var33 = var7.dequeue();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var35 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var35.enqueue((java.lang.Object)'#');
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var39 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var39.enqueue((java.lang.Object)'#');
    java.util.Iterator var42 = var39.iterator();
    java.util.Iterator var43 = var39.iterator();
    var39.enqueue((java.lang.Object)false);
    int var46 = var39.size();
    boolean var47 = var39.isEmpty();
    java.lang.Object var48 = var39.dequeue();
    java.util.Iterator var49 = var39.iterator();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var51 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var51.enqueue((java.lang.Object)'#');
    java.util.Iterator var54 = var51.iterator();
    java.util.Iterator var55 = var51.iterator();
    java.util.Iterator var56 = var51.iterator();
    var39.enqueue((java.lang.Object)var51);
    var35.enqueue((java.lang.Object)var51);
    int var59 = var35.size();
    java.lang.Object var60 = var35.dequeue();
    var7.enqueue(var60);
    var1.enqueue((java.lang.Object)var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + '#'+ "'", var5.equals('#'));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + '#'+ "'", var17.equals('#'));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var33 + "' != '" + 1+ "'", var33.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var48 + "' != '" + '#'+ "'", var48.equals('#'));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var60 + "' != '" + '#'+ "'", var60.equals('#'));

  }

  public void test73() throws Throwable {

    if (debug) System.out.printf("%nRingBufferMutantTest1.test73");


    at.fhhagenberg.sqe.exercise13.RingBufferMutant var1 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var2 = var1.isEmpty();
    boolean var3 = var1.isEmpty();
    java.util.Iterator var4 = var1.iterator();
    boolean var5 = var1.isEmpty();
    var1.enqueue((java.lang.Object)1.0d);
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var9 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(100);
    int var10 = var9.size();
    int var11 = var9.size();
    boolean var12 = var9.isEmpty();
    boolean var13 = var9.isEmpty();
    int var14 = var9.size();
    var1.enqueue((java.lang.Object)var14);
    boolean var16 = var1.isEmpty();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var18 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var19 = var18.isEmpty();
    boolean var20 = var18.isEmpty();
    java.util.Iterator var21 = var18.iterator();
    boolean var22 = var18.isEmpty();
    int var23 = var18.size();
    int var24 = var18.size();
    java.util.Iterator var25 = var18.iterator();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var27 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var27.enqueue((java.lang.Object)'#');
    java.util.Iterator var30 = var27.iterator();
    java.util.Iterator var31 = var27.iterator();
    var27.enqueue((java.lang.Object)false);
    java.lang.Object var34 = var27.dequeue();
    var18.enqueue((java.lang.Object)var27);
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var37 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var37.enqueue((java.lang.Object)'#');
    java.util.Iterator var40 = var37.iterator();
    java.util.Iterator var41 = var37.iterator();
    var37.enqueue((java.lang.Object)false);
    java.lang.Object var44 = var37.dequeue();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var46 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var47 = var46.isEmpty();
    boolean var48 = var46.isEmpty();
    java.util.Iterator var49 = var46.iterator();
    boolean var50 = var46.isEmpty();
    var46.enqueue((java.lang.Object)'#');
    boolean var53 = var46.isEmpty();
    int var54 = var46.size();
    java.util.Iterator var55 = var46.iterator();
    var37.enqueue((java.lang.Object)var46);
    var46.enqueue((java.lang.Object)100);
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var60 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var60.enqueue((java.lang.Object)'#');
    java.util.Iterator var63 = var60.iterator();
    var60.enqueue((java.lang.Object)100.0d);
    java.util.Iterator var66 = var60.iterator();
    var46.enqueue((java.lang.Object)var60);
    java.lang.Object var68 = var46.dequeue();
    var18.enqueue((java.lang.Object)var46);
    var1.enqueue((java.lang.Object)var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var34 + "' != '" + '#'+ "'", var34.equals('#'));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var44 + "' != '" + '#'+ "'", var44.equals('#'));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var68 + "' != '" + '#'+ "'", var68.equals('#'));

  }

  public void test74() throws Throwable {

    if (debug) System.out.printf("%nRingBufferMutantTest1.test74");


    at.fhhagenberg.sqe.exercise13.RingBufferMutant var1 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var1.enqueue((java.lang.Object)'#');
    java.util.Iterator var4 = var1.iterator();
    java.util.Iterator var5 = var1.iterator();
    var1.enqueue((java.lang.Object)false);
    int var8 = var1.size();
    boolean var9 = var1.isEmpty();
    boolean var10 = var1.isEmpty();
    boolean var11 = var1.isEmpty();
    int var12 = var1.size();
    boolean var13 = var1.isEmpty();
    int var14 = var1.size();
    int var15 = var1.size();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var17 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var17.enqueue((java.lang.Object)'#');
    java.util.Iterator var20 = var17.iterator();
    java.util.Iterator var21 = var17.iterator();
    var17.enqueue((java.lang.Object)false);
    java.lang.Object var24 = var17.dequeue();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var26 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var27 = var26.isEmpty();
    boolean var28 = var26.isEmpty();
    java.util.Iterator var29 = var26.iterator();
    boolean var30 = var26.isEmpty();
    var26.enqueue((java.lang.Object)'#');
    boolean var33 = var26.isEmpty();
    int var34 = var26.size();
    java.util.Iterator var35 = var26.iterator();
    var17.enqueue((java.lang.Object)var26);
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var38 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var39 = var38.isEmpty();
    boolean var40 = var38.isEmpty();
    java.util.Iterator var41 = var38.iterator();
    boolean var42 = var38.isEmpty();
    int var43 = var38.size();
    int var44 = var38.size();
    java.util.Iterator var45 = var38.iterator();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var47 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var47.enqueue((java.lang.Object)'#');
    java.util.Iterator var50 = var47.iterator();
    java.util.Iterator var51 = var47.iterator();
    var47.enqueue((java.lang.Object)false);
    java.lang.Object var54 = var47.dequeue();
    var38.enqueue((java.lang.Object)var47);
    java.util.Iterator var56 = var38.iterator();
    var17.enqueue((java.lang.Object)var56);
    java.util.Iterator var58 = var17.iterator();
    var1.enqueue((java.lang.Object)var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var24 + "' != '" + '#'+ "'", var24.equals('#'));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var54 + "' != '" + '#'+ "'", var54.equals('#'));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);

  }

  public void test75() throws Throwable {

    if (debug) System.out.printf("%nRingBufferMutantTest1.test75");


    at.fhhagenberg.sqe.exercise13.RingBufferMutant var1 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var1.enqueue((java.lang.Object)'#');
    int var4 = var1.size();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var6 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var7 = var6.isEmpty();
    boolean var8 = var6.isEmpty();
    java.util.Iterator var9 = var6.iterator();
    boolean var10 = var6.isEmpty();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var12 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var12.enqueue((java.lang.Object)'#');
    java.util.Iterator var15 = var12.iterator();
    java.util.Iterator var16 = var12.iterator();
    var12.enqueue((java.lang.Object)false);
    int var19 = var12.size();
    var6.enqueue((java.lang.Object)var12);
    var1.enqueue((java.lang.Object)var12);
    java.util.Iterator var22 = var12.iterator();
    java.util.Iterator var23 = var12.iterator();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var25 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var26 = var25.isEmpty();
    boolean var27 = var25.isEmpty();
    java.util.Iterator var28 = var25.iterator();
    boolean var29 = var25.isEmpty();
    var25.enqueue((java.lang.Object)'#');
    int var32 = var25.size();
    var12.enqueue((java.lang.Object)var32);
    boolean var34 = var12.isEmpty();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var36 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(2);
    java.util.Iterator var37 = var36.iterator();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var39 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var39.enqueue((java.lang.Object)'#');
    java.util.Iterator var42 = var39.iterator();
    java.util.Iterator var43 = var39.iterator();
    var39.enqueue((java.lang.Object)false);
    int var46 = var39.size();
    boolean var47 = var39.isEmpty();
    boolean var48 = var39.isEmpty();
    var36.enqueue((java.lang.Object)var39);
    java.util.Iterator var50 = var36.iterator();
    java.lang.Object var51 = var36.dequeue();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var53 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var54 = var53.isEmpty();
    boolean var55 = var53.isEmpty();
    java.util.Iterator var56 = var53.iterator();
    boolean var57 = var53.isEmpty();
    var53.enqueue((java.lang.Object)1.0d);
    java.lang.Object var60 = var53.dequeue();
    var36.enqueue((java.lang.Object)var53);
    var12.enqueue((java.lang.Object)var53);
    boolean var63 = var12.isEmpty();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var60 + "' != '" + 1.0d+ "'", var60.equals(1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == false);

  }

  public void test76() throws Throwable {

    if (debug) System.out.printf("%nRingBufferMutantTest1.test76");


    at.fhhagenberg.sqe.exercise13.RingBufferMutant var1 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var1.enqueue((java.lang.Object)'#');
    var1.enqueue((java.lang.Object)' ');
    int var6 = var1.size();
    int var7 = var1.size();
    int var8 = var1.size();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var10 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var11 = var10.isEmpty();
    boolean var12 = var10.isEmpty();
    java.util.Iterator var13 = var10.iterator();
    boolean var14 = var10.isEmpty();
    var10.enqueue((java.lang.Object)'#');
    boolean var17 = var10.isEmpty();
    int var18 = var10.size();
    java.util.Iterator var19 = var10.iterator();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var21 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var21.enqueue((java.lang.Object)'#');
    java.util.Iterator var24 = var21.iterator();
    var21.enqueue((java.lang.Object)100.0d);
    boolean var27 = var21.isEmpty();
    java.lang.Object var28 = var21.dequeue();
    var10.enqueue(var28);
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var31 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var31.enqueue((java.lang.Object)'#');
    java.util.Iterator var34 = var31.iterator();
    var10.enqueue((java.lang.Object)var31);
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var37 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var37.enqueue((java.lang.Object)'#');
    java.util.Iterator var40 = var37.iterator();
    java.util.Iterator var41 = var37.iterator();
    var37.enqueue((java.lang.Object)false);
    int var44 = var37.size();
    boolean var45 = var37.isEmpty();
    java.lang.Object var46 = var37.dequeue();
    java.util.Iterator var47 = var37.iterator();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var49 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var49.enqueue((java.lang.Object)'#');
    java.util.Iterator var52 = var49.iterator();
    java.util.Iterator var53 = var49.iterator();
    java.util.Iterator var54 = var49.iterator();
    var37.enqueue((java.lang.Object)var49);
    var10.enqueue((java.lang.Object)var37);
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var58 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(100);
    int var59 = var58.size();
    int var60 = var58.size();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var62 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var63 = var62.isEmpty();
    boolean var64 = var62.isEmpty();
    java.util.Iterator var65 = var62.iterator();
    boolean var66 = var62.isEmpty();
    java.util.Iterator var67 = var62.iterator();
    var58.enqueue((java.lang.Object)var67);
    java.util.Iterator var69 = var58.iterator();
    var37.enqueue((java.lang.Object)var58);
    var1.enqueue((java.lang.Object)var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var28 + "' != '" + '#'+ "'", var28.equals('#'));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var46 + "' != '" + '#'+ "'", var46.equals('#'));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);

  }

  public void test77() throws Throwable {

    if (debug) System.out.printf("%nRingBufferMutantTest1.test77");


    at.fhhagenberg.sqe.exercise13.RingBufferMutant var1 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var1.enqueue((java.lang.Object)'#');
    var1.enqueue((java.lang.Object)' ');
    int var6 = var1.size();
    java.util.Iterator var7 = var1.iterator();
    boolean var8 = var1.isEmpty();
    java.util.Iterator var9 = var1.iterator();
    int var10 = var1.size();
    java.lang.Object var11 = var1.dequeue();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + '#'+ "'", var11.equals('#'));

  }

  public void test78() throws Throwable {

    if (debug) System.out.printf("%nRingBufferMutantTest1.test78");


    at.fhhagenberg.sqe.exercise13.RingBufferMutant var1 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var2 = var1.isEmpty();
    boolean var3 = var1.isEmpty();
    java.util.Iterator var4 = var1.iterator();
    boolean var5 = var1.isEmpty();
    var1.enqueue((java.lang.Object)1.0d);
    java.util.Iterator var8 = var1.iterator();
    boolean var9 = var1.isEmpty();
    int var10 = var1.size();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var12 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var12.enqueue((java.lang.Object)'#');
    var12.enqueue((java.lang.Object)' ');
    int var17 = var12.size();
    java.util.Iterator var18 = var12.iterator();
    boolean var19 = var12.isEmpty();
    java.util.Iterator var20 = var12.iterator();
    int var21 = var12.size();
    boolean var22 = var12.isEmpty();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var24 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var24.enqueue((java.lang.Object)'#');
    java.util.Iterator var27 = var24.iterator();
    java.util.Iterator var28 = var24.iterator();
    var24.enqueue((java.lang.Object)false);
    int var31 = var24.size();
    boolean var32 = var24.isEmpty();
    java.lang.Object var33 = var24.dequeue();
    java.util.Iterator var34 = var24.iterator();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var36 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var36.enqueue((java.lang.Object)'#');
    java.util.Iterator var39 = var36.iterator();
    java.util.Iterator var40 = var36.iterator();
    java.util.Iterator var41 = var36.iterator();
    var24.enqueue((java.lang.Object)var36);
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var44 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(0);
    int var45 = var44.size();
    boolean var46 = var44.isEmpty();
    boolean var47 = var44.isEmpty();
    boolean var48 = var44.isEmpty();
    var36.enqueue((java.lang.Object)var44);
    java.util.Iterator var50 = var36.iterator();
    boolean var51 = var36.isEmpty();
    var12.enqueue((java.lang.Object)var36);
    var1.enqueue((java.lang.Object)var12);
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var55 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var56 = var55.isEmpty();
    boolean var57 = var55.isEmpty();
    java.util.Iterator var58 = var55.iterator();
    boolean var59 = var55.isEmpty();
    var55.enqueue((java.lang.Object)1.0d);
    java.util.Iterator var62 = var55.iterator();
    var12.enqueue((java.lang.Object)var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var33 + "' != '" + '#'+ "'", var33.equals('#'));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);

  }

  public void test79() throws Throwable {

    if (debug) System.out.printf("%nRingBufferMutantTest1.test79");


    at.fhhagenberg.sqe.exercise13.RingBufferMutant var1 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var1.enqueue((java.lang.Object)'#');
    java.util.Iterator var4 = var1.iterator();
    java.util.Iterator var5 = var1.iterator();
    boolean var6 = var1.isEmpty();
    int var7 = var1.size();
    var1.enqueue((java.lang.Object)1.0d);
    boolean var10 = var1.isEmpty();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var12 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var12.enqueue((java.lang.Object)'#');
    java.util.Iterator var15 = var12.iterator();
    java.util.Iterator var16 = var12.iterator();
    var12.enqueue((java.lang.Object)false);
    java.lang.Object var19 = var12.dequeue();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var21 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var22 = var21.isEmpty();
    boolean var23 = var21.isEmpty();
    java.util.Iterator var24 = var21.iterator();
    boolean var25 = var21.isEmpty();
    var21.enqueue((java.lang.Object)'#');
    boolean var28 = var21.isEmpty();
    int var29 = var21.size();
    java.util.Iterator var30 = var21.iterator();
    var12.enqueue((java.lang.Object)var21);
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var33 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var33.enqueue((java.lang.Object)'#');
    java.util.Iterator var36 = var33.iterator();
    java.util.Iterator var37 = var33.iterator();
    java.util.Iterator var38 = var33.iterator();
    boolean var39 = var33.isEmpty();
    int var40 = var33.size();
    var12.enqueue((java.lang.Object)var40);
    java.util.Iterator var42 = var12.iterator();
    var1.enqueue((java.lang.Object)var12);
    boolean var44 = var1.isEmpty();
    java.util.Iterator var45 = var1.iterator();
    boolean var46 = var1.isEmpty();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + '#'+ "'", var19.equals('#'));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);

  }

  public void test80() throws Throwable {

    if (debug) System.out.printf("%nRingBufferMutantTest1.test80");


    at.fhhagenberg.sqe.exercise13.RingBufferMutant var1 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var2 = var1.isEmpty();
    boolean var3 = var1.isEmpty();
    java.util.Iterator var4 = var1.iterator();
    boolean var5 = var1.isEmpty();
    var1.enqueue((java.lang.Object)'#');
    boolean var8 = var1.isEmpty();
    boolean var9 = var1.isEmpty();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var11 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(4);
    java.util.Iterator var12 = var11.iterator();
    java.util.Iterator var13 = var11.iterator();
    var1.enqueue((java.lang.Object)var11);
    boolean var15 = var11.isEmpty();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == true);

  }

  public void test81() throws Throwable {

    if (debug) System.out.printf("%nRingBufferMutantTest1.test81");


    at.fhhagenberg.sqe.exercise13.RingBufferMutant var1 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var1.enqueue((java.lang.Object)'#');
    int var4 = var1.size();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var6 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var7 = var6.isEmpty();
    boolean var8 = var6.isEmpty();
    java.util.Iterator var9 = var6.iterator();
    boolean var10 = var6.isEmpty();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var12 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var12.enqueue((java.lang.Object)'#');
    java.util.Iterator var15 = var12.iterator();
    java.util.Iterator var16 = var12.iterator();
    var12.enqueue((java.lang.Object)false);
    int var19 = var12.size();
    var6.enqueue((java.lang.Object)var12);
    var1.enqueue((java.lang.Object)var12);
    int var22 = var12.size();
    java.util.Iterator var23 = var12.iterator();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var25 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(100);
    int var26 = var25.size();
    int var27 = var25.size();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var29 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var30 = var29.isEmpty();
    boolean var31 = var29.isEmpty();
    java.util.Iterator var32 = var29.iterator();
    boolean var33 = var29.isEmpty();
    java.util.Iterator var34 = var29.iterator();
    var25.enqueue((java.lang.Object)var34);
    java.util.Iterator var36 = var25.iterator();
    java.util.Iterator var37 = var25.iterator();
    var12.enqueue((java.lang.Object)var25);
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var40 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var40.enqueue((java.lang.Object)'#');
    var40.enqueue((java.lang.Object)' ');
    int var45 = var40.size();
    int var46 = var40.size();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var48 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(0);
    java.util.Iterator var49 = var48.iterator();
    boolean var50 = var48.isEmpty();
    var40.enqueue((java.lang.Object)var50);
    int var52 = var40.size();
    java.lang.Object var53 = var40.dequeue();
    var12.enqueue(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var53 + "' != '" + '#'+ "'", var53.equals('#'));

  }

  public void test82() throws Throwable {

    if (debug) System.out.printf("%nRingBufferMutantTest1.test82");


    at.fhhagenberg.sqe.exercise13.RingBufferMutant var1 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(0);
    int var2 = var1.size();
    boolean var3 = var1.isEmpty();
    boolean var4 = var1.isEmpty();
    int var5 = var1.size();
    boolean var6 = var1.isEmpty();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);

  }

  public void test83() throws Throwable {

    if (debug) System.out.printf("%nRingBufferMutantTest1.test83");


    at.fhhagenberg.sqe.exercise13.RingBufferMutant var1 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var1.enqueue((java.lang.Object)1.0d);
    java.util.Iterator var4 = var1.iterator();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var6 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(1);
    boolean var7 = var6.isEmpty();
    boolean var8 = var6.isEmpty();
    java.util.Iterator var9 = var6.iterator();
    var1.enqueue((java.lang.Object)var6);
    java.util.Iterator var11 = var6.iterator();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.Object var12 = var6.dequeue();
      fail("Expected exception of type java.lang.RuntimeException");
    } catch (java.lang.RuntimeException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);

  }

  public void test84() throws Throwable {

    if (debug) System.out.printf("%nRingBufferMutantTest1.test84");


    at.fhhagenberg.sqe.exercise13.RingBufferMutant var1 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var2 = var1.isEmpty();
    boolean var3 = var1.isEmpty();
    java.util.Iterator var4 = var1.iterator();
    boolean var5 = var1.isEmpty();
    var1.enqueue((java.lang.Object)'#');
    boolean var8 = var1.isEmpty();
    boolean var9 = var1.isEmpty();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var11 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(4);
    java.util.Iterator var12 = var11.iterator();
    java.util.Iterator var13 = var11.iterator();
    var1.enqueue((java.lang.Object)var11);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.Object var15 = var11.dequeue();
      fail("Expected exception of type java.lang.RuntimeException");
    } catch (java.lang.RuntimeException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);

  }

  public void test85() throws Throwable {

    if (debug) System.out.printf("%nRingBufferMutantTest1.test85");


    at.fhhagenberg.sqe.exercise13.RingBufferMutant var1 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var1.enqueue((java.lang.Object)'#');
    java.util.Iterator var4 = var1.iterator();
    java.util.Iterator var5 = var1.iterator();
    var1.enqueue((java.lang.Object)false);
    int var8 = var1.size();
    boolean var9 = var1.isEmpty();
    java.lang.Object var10 = var1.dequeue();
    java.util.Iterator var11 = var1.iterator();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var13 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var13.enqueue((java.lang.Object)'#');
    java.util.Iterator var16 = var13.iterator();
    java.util.Iterator var17 = var13.iterator();
    java.util.Iterator var18 = var13.iterator();
    var1.enqueue((java.lang.Object)var13);
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var21 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(0);
    int var22 = var21.size();
    boolean var23 = var21.isEmpty();
    boolean var24 = var21.isEmpty();
    boolean var25 = var21.isEmpty();
    var13.enqueue((java.lang.Object)var21);
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var28 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var28.enqueue((java.lang.Object)'#');
    int var31 = var28.size();
    int var32 = var28.size();
    int var33 = var28.size();
    int var34 = var28.size();
    java.util.Iterator var35 = var28.iterator();
    var13.enqueue((java.lang.Object)var28);
    java.util.Iterator var37 = var13.iterator();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + '#'+ "'", var10.equals('#'));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);

  }

  public void test86() throws Throwable {

    if (debug) System.out.printf("%nRingBufferMutantTest1.test86");


    at.fhhagenberg.sqe.exercise13.RingBufferMutant var1 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var1.enqueue((java.lang.Object)'#');
    java.util.Iterator var4 = var1.iterator();
    java.util.Iterator var5 = var1.iterator();
    var1.enqueue((java.lang.Object)false);
    int var8 = var1.size();
    boolean var9 = var1.isEmpty();
    boolean var10 = var1.isEmpty();
    var1.enqueue((java.lang.Object)(short)0);
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var14 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var14.enqueue((java.lang.Object)'#');
    java.util.Iterator var17 = var14.iterator();
    java.util.Iterator var18 = var14.iterator();
    java.util.Iterator var19 = var14.iterator();
    boolean var20 = var14.isEmpty();
    java.util.Iterator var21 = var14.iterator();
    boolean var22 = var14.isEmpty();
    var1.enqueue((java.lang.Object)var22);
    java.lang.Object var24 = var1.dequeue();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var26 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var27 = var26.isEmpty();
    boolean var28 = var26.isEmpty();
    java.util.Iterator var29 = var26.iterator();
    boolean var30 = var26.isEmpty();
    int var31 = var26.size();
    int var32 = var26.size();
    java.util.Iterator var33 = var26.iterator();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var35 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var35.enqueue((java.lang.Object)'#');
    java.util.Iterator var38 = var35.iterator();
    java.util.Iterator var39 = var35.iterator();
    java.util.Iterator var40 = var35.iterator();
    var26.enqueue((java.lang.Object)var35);
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var43 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var43.enqueue((java.lang.Object)'#');
    java.util.Iterator var46 = var43.iterator();
    java.util.Iterator var47 = var43.iterator();
    var43.enqueue((java.lang.Object)false);
    int var50 = var43.size();
    boolean var51 = var43.isEmpty();
    boolean var52 = var43.isEmpty();
    boolean var53 = var43.isEmpty();
    int var54 = var43.size();
    boolean var55 = var43.isEmpty();
    var26.enqueue((java.lang.Object)var55);
    int var57 = var26.size();
    var1.enqueue((java.lang.Object)var26);
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var60 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(100);
    int var61 = var60.size();
    int var62 = var60.size();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var64 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var65 = var64.isEmpty();
    boolean var66 = var64.isEmpty();
    java.util.Iterator var67 = var64.iterator();
    boolean var68 = var64.isEmpty();
    java.util.Iterator var69 = var64.iterator();
    var60.enqueue((java.lang.Object)var69);
    boolean var71 = var60.isEmpty();
    java.lang.Object var72 = var60.dequeue();
    var26.enqueue(var72);
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var75 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var75.enqueue((java.lang.Object)'#');
    var75.enqueue((java.lang.Object)' ');
    int var80 = var75.size();
    int var81 = var75.size();
    int var82 = var75.size();
    int var83 = var75.size();
    int var84 = var75.size();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var86 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var86.enqueue((java.lang.Object)'#');
    boolean var89 = var86.isEmpty();
    int var90 = var86.size();
    var75.enqueue((java.lang.Object)var90);
    java.util.Iterator var92 = var75.iterator();
    var26.enqueue((java.lang.Object)var92);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var24 + "' != '" + '#'+ "'", var24.equals('#'));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var80 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var81 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var82 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var83 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var84 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var89 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var90 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var92);

  }

  public void test87() throws Throwable {

    if (debug) System.out.printf("%nRingBufferMutantTest1.test87");


    at.fhhagenberg.sqe.exercise13.RingBufferMutant var1 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var2 = var1.isEmpty();
    boolean var3 = var1.isEmpty();
    java.util.Iterator var4 = var1.iterator();
    boolean var5 = var1.isEmpty();
    int var6 = var1.size();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var8 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var8.enqueue((java.lang.Object)'#');
    int var11 = var8.size();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var13 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var14 = var13.isEmpty();
    boolean var15 = var13.isEmpty();
    java.util.Iterator var16 = var13.iterator();
    boolean var17 = var13.isEmpty();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var19 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var19.enqueue((java.lang.Object)'#');
    java.util.Iterator var22 = var19.iterator();
    java.util.Iterator var23 = var19.iterator();
    var19.enqueue((java.lang.Object)false);
    int var26 = var19.size();
    var13.enqueue((java.lang.Object)var19);
    var8.enqueue((java.lang.Object)var19);
    java.util.Iterator var29 = var19.iterator();
    java.util.Iterator var30 = var19.iterator();
    java.util.Iterator var31 = var19.iterator();
    var1.enqueue((java.lang.Object)var19);
    java.util.Iterator var33 = var19.iterator();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var35 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var36 = var35.isEmpty();
    boolean var37 = var35.isEmpty();
    int var38 = var35.size();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var40 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var41 = var40.isEmpty();
    boolean var42 = var40.isEmpty();
    var35.enqueue((java.lang.Object)var42);
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var45 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var45.enqueue((java.lang.Object)'#');
    int var48 = var45.size();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var50 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var51 = var50.isEmpty();
    boolean var52 = var50.isEmpty();
    java.util.Iterator var53 = var50.iterator();
    boolean var54 = var50.isEmpty();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var56 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var56.enqueue((java.lang.Object)'#');
    java.util.Iterator var59 = var56.iterator();
    java.util.Iterator var60 = var56.iterator();
    var56.enqueue((java.lang.Object)false);
    int var63 = var56.size();
    var50.enqueue((java.lang.Object)var56);
    var45.enqueue((java.lang.Object)var56);
    java.util.Iterator var66 = var56.iterator();
    java.util.Iterator var67 = var56.iterator();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var69 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var70 = var69.isEmpty();
    boolean var71 = var69.isEmpty();
    java.util.Iterator var72 = var69.iterator();
    boolean var73 = var69.isEmpty();
    var69.enqueue((java.lang.Object)'#');
    int var76 = var69.size();
    var56.enqueue((java.lang.Object)var76);
    boolean var78 = var56.isEmpty();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var80 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var80.enqueue((java.lang.Object)'#');
    int var83 = var80.size();
    int var84 = var80.size();
    java.util.Iterator var85 = var80.iterator();
    java.util.Iterator var86 = var80.iterator();
    var56.enqueue((java.lang.Object)var80);
    java.util.Iterator var88 = var56.iterator();
    var35.enqueue((java.lang.Object)var56);
    var19.enqueue((java.lang.Object)var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var76 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var78 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var83 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var84 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var85);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var86);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var88);

  }

  public void test88() throws Throwable {

    if (debug) System.out.printf("%nRingBufferMutantTest1.test88");


    at.fhhagenberg.sqe.exercise13.RingBufferMutant var1 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(100);
    int var2 = var1.size();
    int var3 = var1.size();
    boolean var4 = var1.isEmpty();
    boolean var5 = var1.isEmpty();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var7 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var7.enqueue((java.lang.Object)'#');
    int var10 = var7.size();
    java.lang.Object var11 = var7.dequeue();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var13 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(0);
    int var14 = var13.size();
    var7.enqueue((java.lang.Object)var14);
    var1.enqueue((java.lang.Object)var14);
    boolean var17 = var1.isEmpty();
    boolean var18 = var1.isEmpty();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var20 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var20.enqueue((java.lang.Object)'#');
    int var23 = var20.size();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var25 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var26 = var25.isEmpty();
    boolean var27 = var25.isEmpty();
    java.util.Iterator var28 = var25.iterator();
    boolean var29 = var25.isEmpty();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var31 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var31.enqueue((java.lang.Object)'#');
    java.util.Iterator var34 = var31.iterator();
    java.util.Iterator var35 = var31.iterator();
    var31.enqueue((java.lang.Object)false);
    int var38 = var31.size();
    var25.enqueue((java.lang.Object)var31);
    var20.enqueue((java.lang.Object)var31);
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var42 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var42.enqueue((java.lang.Object)1.0d);
    java.util.Iterator var45 = var42.iterator();
    boolean var46 = var42.isEmpty();
    boolean var47 = var42.isEmpty();
    boolean var48 = var42.isEmpty();
    var20.enqueue((java.lang.Object)var42);
    int var50 = var20.size();
    var1.enqueue((java.lang.Object)var50);
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var53 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var54 = var53.isEmpty();
    boolean var55 = var53.isEmpty();
    java.util.Iterator var56 = var53.iterator();
    boolean var57 = var53.isEmpty();
    int var58 = var53.size();
    int var59 = var53.size();
    java.util.Iterator var60 = var53.iterator();
    java.util.Iterator var61 = var53.iterator();
    var1.enqueue((java.lang.Object)var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + '#'+ "'", var11.equals('#'));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);

  }

  public void test89() throws Throwable {

    if (debug) System.out.printf("%nRingBufferMutantTest1.test89");


    at.fhhagenberg.sqe.exercise13.RingBufferMutant var1 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var2 = var1.isEmpty();
    boolean var3 = var1.isEmpty();
    java.util.Iterator var4 = var1.iterator();
    boolean var5 = var1.isEmpty();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var7 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var7.enqueue((java.lang.Object)'#');
    java.util.Iterator var10 = var7.iterator();
    java.util.Iterator var11 = var7.iterator();
    var7.enqueue((java.lang.Object)false);
    int var14 = var7.size();
    var1.enqueue((java.lang.Object)var7);
    int var16 = var1.size();
    java.lang.Object var17 = var1.dequeue();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var19 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var19.enqueue((java.lang.Object)'#');
    java.util.Iterator var22 = var19.iterator();
    java.util.Iterator var23 = var19.iterator();
    java.util.Iterator var24 = var19.iterator();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var26 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var26.enqueue((java.lang.Object)'#');
    java.util.Iterator var29 = var26.iterator();
    java.util.Iterator var30 = var26.iterator();
    java.util.Iterator var31 = var26.iterator();
    boolean var32 = var26.isEmpty();
    int var33 = var26.size();
    var19.enqueue((java.lang.Object)var33);
    boolean var35 = var19.isEmpty();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var37 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var37.enqueue((java.lang.Object)1.0d);
    int var40 = var37.size();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var42 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var43 = var42.isEmpty();
    boolean var44 = var42.isEmpty();
    java.util.Iterator var45 = var42.iterator();
    boolean var46 = var42.isEmpty();
    java.util.Iterator var47 = var42.iterator();
    int var48 = var42.size();
    var37.enqueue((java.lang.Object)var42);
    var19.enqueue((java.lang.Object)var37);
    var1.enqueue((java.lang.Object)var37);
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var53 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var53.enqueue((java.lang.Object)'#');
    java.util.Iterator var56 = var53.iterator();
    java.util.Iterator var57 = var53.iterator();
    var53.enqueue((java.lang.Object)false);
    int var60 = var53.size();
    boolean var61 = var53.isEmpty();
    boolean var62 = var53.isEmpty();
    boolean var63 = var53.isEmpty();
    int var64 = var53.size();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var66 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(100);
    int var67 = var66.size();
    java.util.Iterator var68 = var66.iterator();
    var53.enqueue((java.lang.Object)var66);
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var71 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var72 = var71.isEmpty();
    boolean var73 = var71.isEmpty();
    boolean var74 = var71.isEmpty();
    int var75 = var71.size();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var77 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(1);
    var71.enqueue((java.lang.Object)var77);
    java.lang.Object var79 = var71.dequeue();
    var53.enqueue(var79);
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var82 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(1);
    java.util.Iterator var83 = var82.iterator();
    boolean var84 = var82.isEmpty();
    var53.enqueue((java.lang.Object)var82);
    int var86 = var53.size();
    var37.enqueue((java.lang.Object)var86);
    int var88 = var37.size();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var84 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var86 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var88 == 3);

  }

  public void test90() throws Throwable {

    if (debug) System.out.printf("%nRingBufferMutantTest1.test90");


    at.fhhagenberg.sqe.exercise13.RingBufferMutant var1 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var2 = var1.isEmpty();
    boolean var3 = var1.isEmpty();
    java.util.Iterator var4 = var1.iterator();
    boolean var5 = var1.isEmpty();
    var1.enqueue((java.lang.Object)'#');
    boolean var8 = var1.isEmpty();
    int var9 = var1.size();
    java.util.Iterator var10 = var1.iterator();
    boolean var11 = var1.isEmpty();
    java.util.Iterator var12 = var1.iterator();
    int var13 = var1.size();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var15 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var15.enqueue((java.lang.Object)'#');
    int var18 = var15.size();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var20 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var21 = var20.isEmpty();
    boolean var22 = var20.isEmpty();
    java.util.Iterator var23 = var20.iterator();
    boolean var24 = var20.isEmpty();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var26 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var26.enqueue((java.lang.Object)'#');
    java.util.Iterator var29 = var26.iterator();
    java.util.Iterator var30 = var26.iterator();
    var26.enqueue((java.lang.Object)false);
    int var33 = var26.size();
    var20.enqueue((java.lang.Object)var26);
    var15.enqueue((java.lang.Object)var26);
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var37 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var37.enqueue((java.lang.Object)1.0d);
    java.util.Iterator var40 = var37.iterator();
    boolean var41 = var37.isEmpty();
    boolean var42 = var37.isEmpty();
    boolean var43 = var37.isEmpty();
    var15.enqueue((java.lang.Object)var37);
    var1.enqueue((java.lang.Object)var15);
    int var46 = var15.size();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var48 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var48.enqueue((java.lang.Object)'#');
    var48.enqueue((java.lang.Object)' ');
    var48.enqueue((java.lang.Object)10.0f);
    java.util.Iterator var55 = var48.iterator();
    java.util.Iterator var56 = var48.iterator();
    var15.enqueue((java.lang.Object)var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);

  }

  public void test91() throws Throwable {

    if (debug) System.out.printf("%nRingBufferMutantTest1.test91");


    at.fhhagenberg.sqe.exercise13.RingBufferMutant var1 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var1.enqueue((java.lang.Object)'#');
    int var4 = var1.size();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var6 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var7 = var6.isEmpty();
    boolean var8 = var6.isEmpty();
    java.util.Iterator var9 = var6.iterator();
    boolean var10 = var6.isEmpty();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var12 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var12.enqueue((java.lang.Object)'#');
    java.util.Iterator var15 = var12.iterator();
    java.util.Iterator var16 = var12.iterator();
    var12.enqueue((java.lang.Object)false);
    int var19 = var12.size();
    var6.enqueue((java.lang.Object)var12);
    var1.enqueue((java.lang.Object)var12);
    java.util.Iterator var22 = var12.iterator();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var24 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(0);
    int var25 = var24.size();
    boolean var26 = var24.isEmpty();
    boolean var27 = var24.isEmpty();
    boolean var28 = var24.isEmpty();
    java.util.Iterator var29 = var24.iterator();
    var12.enqueue((java.lang.Object)var24);
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var32 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var32.enqueue((java.lang.Object)'#');
    int var35 = var32.size();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var37 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var38 = var37.isEmpty();
    boolean var39 = var37.isEmpty();
    java.util.Iterator var40 = var37.iterator();
    boolean var41 = var37.isEmpty();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var43 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var43.enqueue((java.lang.Object)'#');
    java.util.Iterator var46 = var43.iterator();
    java.util.Iterator var47 = var43.iterator();
    var43.enqueue((java.lang.Object)false);
    int var50 = var43.size();
    var37.enqueue((java.lang.Object)var43);
    var32.enqueue((java.lang.Object)var43);
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var54 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var54.enqueue((java.lang.Object)1.0d);
    java.util.Iterator var57 = var54.iterator();
    boolean var58 = var54.isEmpty();
    boolean var59 = var54.isEmpty();
    boolean var60 = var54.isEmpty();
    var32.enqueue((java.lang.Object)var54);
    int var62 = var32.size();
    int var63 = var32.size();
    var12.enqueue((java.lang.Object)var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == 3);

  }

  public void test92() throws Throwable {

    if (debug) System.out.printf("%nRingBufferMutantTest1.test92");


    at.fhhagenberg.sqe.exercise13.RingBufferMutant var1 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var1.enqueue((java.lang.Object)'#');
    java.util.Iterator var4 = var1.iterator();
    java.util.Iterator var5 = var1.iterator();
    var1.enqueue((java.lang.Object)false);
    java.lang.Object var8 = var1.dequeue();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var10 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var10.enqueue((java.lang.Object)'#');
    java.util.Iterator var13 = var10.iterator();
    java.util.Iterator var14 = var10.iterator();
    var10.enqueue((java.lang.Object)false);
    int var17 = var10.size();
    boolean var18 = var10.isEmpty();
    java.util.Iterator var19 = var10.iterator();
    var1.enqueue((java.lang.Object)var10);
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var22 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var22.enqueue((java.lang.Object)'#');
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var26 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var26.enqueue((java.lang.Object)'#');
    java.util.Iterator var29 = var26.iterator();
    java.util.Iterator var30 = var26.iterator();
    var26.enqueue((java.lang.Object)false);
    int var33 = var26.size();
    boolean var34 = var26.isEmpty();
    java.lang.Object var35 = var26.dequeue();
    java.util.Iterator var36 = var26.iterator();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var38 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var38.enqueue((java.lang.Object)'#');
    java.util.Iterator var41 = var38.iterator();
    java.util.Iterator var42 = var38.iterator();
    java.util.Iterator var43 = var38.iterator();
    var26.enqueue((java.lang.Object)var38);
    var22.enqueue((java.lang.Object)var38);
    java.util.Iterator var46 = var38.iterator();
    boolean var47 = var38.isEmpty();
    boolean var48 = var38.isEmpty();
    int var49 = var38.size();
    var10.enqueue((java.lang.Object)var38);
    java.util.Iterator var51 = var38.iterator();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + '#'+ "'", var8.equals('#'));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var35 + "' != '" + '#'+ "'", var35.equals('#'));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);

  }

  public void test93() throws Throwable {

    if (debug) System.out.printf("%nRingBufferMutantTest1.test93");


    at.fhhagenberg.sqe.exercise13.RingBufferMutant var1 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var2 = var1.isEmpty();
    boolean var3 = var1.isEmpty();
    java.util.Iterator var4 = var1.iterator();
    boolean var5 = var1.isEmpty();
    var1.enqueue((java.lang.Object)'#');
    boolean var8 = var1.isEmpty();
    int var9 = var1.size();
    java.util.Iterator var10 = var1.iterator();
    boolean var11 = var1.isEmpty();
    int var12 = var1.size();
    int var13 = var1.size();
    java.lang.Object var14 = var1.dequeue();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + '#'+ "'", var14.equals('#'));

  }

  public void test94() throws Throwable {

    if (debug) System.out.printf("%nRingBufferMutantTest1.test94");


    at.fhhagenberg.sqe.exercise13.RingBufferMutant var1 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(1);
    boolean var2 = var1.isEmpty();
    boolean var3 = var1.isEmpty();
    java.util.Iterator var4 = var1.iterator();
    boolean var5 = var1.isEmpty();
    int var6 = var1.size();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 0);

  }

  public void test95() throws Throwable {

    if (debug) System.out.printf("%nRingBufferMutantTest1.test95");


    at.fhhagenberg.sqe.exercise13.RingBufferMutant var1 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var2 = var1.isEmpty();
    boolean var3 = var1.isEmpty();
    java.util.Iterator var4 = var1.iterator();
    boolean var5 = var1.isEmpty();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var7 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var7.enqueue((java.lang.Object)'#');
    java.util.Iterator var10 = var7.iterator();
    java.util.Iterator var11 = var7.iterator();
    var7.enqueue((java.lang.Object)false);
    int var14 = var7.size();
    var1.enqueue((java.lang.Object)var7);
    int var16 = var1.size();
    java.lang.Object var17 = var1.dequeue();
    java.util.Iterator var18 = var1.iterator();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);

  }

  public void test96() throws Throwable {

    if (debug) System.out.printf("%nRingBufferMutantTest1.test96");


    at.fhhagenberg.sqe.exercise13.RingBufferMutant var1 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var1.enqueue((java.lang.Object)'#');
    var1.enqueue((java.lang.Object)' ');
    int var6 = var1.size();
    var1.enqueue((java.lang.Object)1);
    boolean var9 = var1.isEmpty();
    java.util.Iterator var10 = var1.iterator();
    int var11 = var1.size();
    java.util.Iterator var12 = var1.iterator();
    boolean var13 = var1.isEmpty();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);

  }

  public void test97() throws Throwable {

    if (debug) System.out.printf("%nRingBufferMutantTest1.test97");


    at.fhhagenberg.sqe.exercise13.RingBufferMutant var1 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var1.enqueue((java.lang.Object)'#');
    java.util.Iterator var4 = var1.iterator();
    java.util.Iterator var5 = var1.iterator();
    var1.enqueue((java.lang.Object)false);
    int var8 = var1.size();
    boolean var9 = var1.isEmpty();
    int var10 = var1.size();
    java.lang.Object var11 = new java.lang.Object();
    var1.enqueue(var11);
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var14 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var14.enqueue((java.lang.Object)'#');
    int var17 = var14.size();
    int var18 = var14.size();
    java.util.Iterator var19 = var14.iterator();
    java.util.Iterator var20 = var14.iterator();
    var1.enqueue((java.lang.Object)var20);
    java.util.Iterator var22 = var1.iterator();
    java.util.Iterator var23 = var1.iterator();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);

  }

  public void test98() throws Throwable {

    if (debug) System.out.printf("%nRingBufferMutantTest1.test98");


    at.fhhagenberg.sqe.exercise13.RingBufferMutant var1 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var1.enqueue((java.lang.Object)'#');
    java.util.Iterator var4 = var1.iterator();
    java.util.Iterator var5 = var1.iterator();
    boolean var6 = var1.isEmpty();
    int var7 = var1.size();
    java.util.Iterator var8 = var1.iterator();
    int var9 = var1.size();
    java.lang.Object var10 = var1.dequeue();
    java.util.Iterator var11 = var1.iterator();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + '#'+ "'", var10.equals('#'));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);

  }

  public void test99() throws Throwable {

    if (debug) System.out.printf("%nRingBufferMutantTest1.test99");


    at.fhhagenberg.sqe.exercise13.RingBufferMutant var1 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var1.enqueue((java.lang.Object)'#');
    int var4 = var1.size();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var6 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var7 = var6.isEmpty();
    boolean var8 = var6.isEmpty();
    java.util.Iterator var9 = var6.iterator();
    boolean var10 = var6.isEmpty();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var12 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var12.enqueue((java.lang.Object)'#');
    java.util.Iterator var15 = var12.iterator();
    java.util.Iterator var16 = var12.iterator();
    var12.enqueue((java.lang.Object)false);
    int var19 = var12.size();
    var6.enqueue((java.lang.Object)var12);
    var1.enqueue((java.lang.Object)var12);
    int var22 = var12.size();
    java.util.Iterator var23 = var12.iterator();
    int var24 = var12.size();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 2);

  }

  public void test100() throws Throwable {

    if (debug) System.out.printf("%nRingBufferMutantTest1.test100");


    at.fhhagenberg.sqe.exercise13.RingBufferMutant var1 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var2 = var1.isEmpty();
    boolean var3 = var1.isEmpty();
    java.util.Iterator var4 = var1.iterator();
    boolean var5 = var1.isEmpty();
    var1.enqueue((java.lang.Object)'#');
    java.util.Iterator var8 = var1.iterator();
    boolean var9 = var1.isEmpty();
    java.util.Iterator var10 = var1.iterator();
    java.util.Iterator var11 = var1.iterator();
    int var12 = var1.size();
    boolean var13 = var1.isEmpty();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var15 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var15.enqueue((java.lang.Object)'#');
    var15.enqueue((java.lang.Object)' ');
    int var20 = var15.size();
    var15.enqueue((java.lang.Object)1);
    boolean var23 = var15.isEmpty();
    java.util.Iterator var24 = var15.iterator();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var26 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var27 = var26.isEmpty();
    boolean var28 = var26.isEmpty();
    boolean var29 = var26.isEmpty();
    int var30 = var26.size();
    int var31 = var26.size();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var33 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var34 = var33.isEmpty();
    boolean var35 = var33.isEmpty();
    java.util.Iterator var36 = var33.iterator();
    boolean var37 = var33.isEmpty();
    int var38 = var33.size();
    java.util.Iterator var39 = var33.iterator();
    int var40 = var33.size();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var42 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var42.enqueue((java.lang.Object)'#');
    java.util.Iterator var45 = var42.iterator();
    java.util.Iterator var46 = var42.iterator();
    var42.enqueue((java.lang.Object)false);
    java.lang.Object var49 = var42.dequeue();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var51 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var52 = var51.isEmpty();
    boolean var53 = var51.isEmpty();
    java.util.Iterator var54 = var51.iterator();
    boolean var55 = var51.isEmpty();
    var51.enqueue((java.lang.Object)'#');
    boolean var58 = var51.isEmpty();
    int var59 = var51.size();
    java.util.Iterator var60 = var51.iterator();
    var42.enqueue((java.lang.Object)var51);
    int var62 = var51.size();
    int var63 = var51.size();
    var33.enqueue((java.lang.Object)var51);
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var66 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var67 = var66.isEmpty();
    boolean var68 = var66.isEmpty();
    int var69 = var66.size();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var71 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var72 = var71.isEmpty();
    boolean var73 = var71.isEmpty();
    var66.enqueue((java.lang.Object)var73);
    boolean var75 = var66.isEmpty();
    var51.enqueue((java.lang.Object)var75);
    boolean var77 = var51.isEmpty();
    var26.enqueue((java.lang.Object)var51);
    var15.enqueue((java.lang.Object)var26);
    java.util.Iterator var80 = var26.iterator();
    var1.enqueue((java.lang.Object)var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var49 + "' != '" + '#'+ "'", var49.equals('#'));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var77 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);

  }

  public void test101() throws Throwable {

    if (debug) System.out.printf("%nRingBufferMutantTest1.test101");


    at.fhhagenberg.sqe.exercise13.RingBufferMutant var1 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var2 = var1.isEmpty();
    boolean var3 = var1.isEmpty();
    java.util.Iterator var4 = var1.iterator();
    boolean var5 = var1.isEmpty();
    var1.enqueue((java.lang.Object)'#');
    boolean var8 = var1.isEmpty();
    int var9 = var1.size();
    int var10 = var1.size();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var12 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var12.enqueue((java.lang.Object)'#');
    boolean var15 = var12.isEmpty();
    int var16 = var12.size();
    var1.enqueue((java.lang.Object)var12);
    java.lang.Object var18 = var1.dequeue();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var18 + "' != '" + '#'+ "'", var18.equals('#'));

  }

  public void test102() throws Throwable {

    if (debug) System.out.printf("%nRingBufferMutantTest1.test102");


    at.fhhagenberg.sqe.exercise13.RingBufferMutant var1 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(100);
    int var2 = var1.size();
    boolean var3 = var1.isEmpty();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);

  }

  public void test103() throws Throwable {

    if (debug) System.out.printf("%nRingBufferMutantTest1.test103");


    at.fhhagenberg.sqe.exercise13.RingBufferMutant var1 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var2 = var1.isEmpty();
    boolean var3 = var1.isEmpty();
    java.util.Iterator var4 = var1.iterator();
    boolean var5 = var1.isEmpty();
    var1.enqueue((java.lang.Object)'#');
    java.util.Iterator var8 = var1.iterator();
    boolean var9 = var1.isEmpty();
    java.util.Iterator var10 = var1.iterator();
    java.util.Iterator var11 = var1.iterator();
    java.lang.Object var12 = var1.dequeue();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + '#'+ "'", var12.equals('#'));

  }

  public void test104() throws Throwable {

    if (debug) System.out.printf("%nRingBufferMutantTest1.test104");


    at.fhhagenberg.sqe.exercise13.RingBufferMutant var1 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var2 = var1.isEmpty();
    boolean var3 = var1.isEmpty();
    java.util.Iterator var4 = var1.iterator();
    boolean var5 = var1.isEmpty();
    var1.enqueue((java.lang.Object)'#');
    boolean var8 = var1.isEmpty();
    int var9 = var1.size();
    java.util.Iterator var10 = var1.iterator();
    java.util.Iterator var11 = var1.iterator();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);

  }

  public void test105() throws Throwable {

    if (debug) System.out.printf("%nRingBufferMutantTest1.test105");


    at.fhhagenberg.sqe.exercise13.RingBufferMutant var1 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var2 = var1.isEmpty();
    boolean var3 = var1.isEmpty();
    java.util.Iterator var4 = var1.iterator();
    boolean var5 = var1.isEmpty();
    int var6 = var1.size();
    int var7 = var1.size();
    java.util.Iterator var8 = var1.iterator();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var10 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var10.enqueue((java.lang.Object)'#');
    java.util.Iterator var13 = var10.iterator();
    java.util.Iterator var14 = var10.iterator();
    java.util.Iterator var15 = var10.iterator();
    var1.enqueue((java.lang.Object)var10);
    java.lang.Object var17 = var10.dequeue();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var19 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var20 = var19.isEmpty();
    boolean var21 = var19.isEmpty();
    java.util.Iterator var22 = var19.iterator();
    boolean var23 = var19.isEmpty();
    int var24 = var19.size();
    java.util.Iterator var25 = var19.iterator();
    int var26 = var19.size();
    int var27 = var19.size();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var29 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(0);
    int var30 = var29.size();
    boolean var31 = var29.isEmpty();
    var19.enqueue((java.lang.Object)var31);
    var10.enqueue((java.lang.Object)var19);
    int var34 = var19.size();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + '#'+ "'", var17.equals('#'));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == 1);

  }

  public void test106() throws Throwable {

    if (debug) System.out.printf("%nRingBufferMutantTest1.test106");


    at.fhhagenberg.sqe.exercise13.RingBufferMutant var1 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(100);
    int var2 = var1.size();
    int var3 = var1.size();
    boolean var4 = var1.isEmpty();
    boolean var5 = var1.isEmpty();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var7 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var7.enqueue((java.lang.Object)'#');
    int var10 = var7.size();
    java.lang.Object var11 = var7.dequeue();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var13 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(0);
    int var14 = var13.size();
    var7.enqueue((java.lang.Object)var14);
    var1.enqueue((java.lang.Object)var14);
    boolean var17 = var1.isEmpty();
    boolean var18 = var1.isEmpty();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var20 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var20.enqueue((java.lang.Object)'#');
    int var23 = var20.size();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var25 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var26 = var25.isEmpty();
    boolean var27 = var25.isEmpty();
    java.util.Iterator var28 = var25.iterator();
    boolean var29 = var25.isEmpty();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var31 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var31.enqueue((java.lang.Object)'#');
    java.util.Iterator var34 = var31.iterator();
    java.util.Iterator var35 = var31.iterator();
    var31.enqueue((java.lang.Object)false);
    int var38 = var31.size();
    var25.enqueue((java.lang.Object)var31);
    var20.enqueue((java.lang.Object)var31);
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var42 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var42.enqueue((java.lang.Object)1.0d);
    java.util.Iterator var45 = var42.iterator();
    boolean var46 = var42.isEmpty();
    boolean var47 = var42.isEmpty();
    boolean var48 = var42.isEmpty();
    var20.enqueue((java.lang.Object)var42);
    int var50 = var20.size();
    var1.enqueue((java.lang.Object)var50);
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var53 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(0);
    java.util.Iterator var54 = var53.iterator();
    int var55 = var53.size();
    java.util.Iterator var56 = var53.iterator();
    boolean var57 = var53.isEmpty();
    var1.enqueue((java.lang.Object)var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + '#'+ "'", var11.equals('#'));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == true);

  }

  public void test107() throws Throwable {

    if (debug) System.out.printf("%nRingBufferMutantTest1.test107");


    at.fhhagenberg.sqe.exercise13.RingBufferMutant var1 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var1.enqueue((java.lang.Object)'#');
    var1.enqueue((java.lang.Object)' ');
    int var6 = var1.size();
    int var7 = var1.size();
    int var8 = var1.size();
    java.util.Iterator var9 = var1.iterator();
    int var10 = var1.size();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var12 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var13 = var12.isEmpty();
    boolean var14 = var12.isEmpty();
    java.util.Iterator var15 = var12.iterator();
    boolean var16 = var12.isEmpty();
    var12.enqueue((java.lang.Object)'#');
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var20 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var21 = var20.isEmpty();
    boolean var22 = var20.isEmpty();
    java.util.Iterator var23 = var20.iterator();
    boolean var24 = var20.isEmpty();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var26 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var26.enqueue((java.lang.Object)'#');
    java.util.Iterator var29 = var26.iterator();
    java.util.Iterator var30 = var26.iterator();
    var26.enqueue((java.lang.Object)false);
    int var33 = var26.size();
    var20.enqueue((java.lang.Object)var26);
    int var35 = var20.size();
    var12.enqueue((java.lang.Object)var35);
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var38 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var38.enqueue((java.lang.Object)'#');
    java.util.Iterator var41 = var38.iterator();
    java.util.Iterator var42 = var38.iterator();
    var38.enqueue((java.lang.Object)false);
    java.lang.Object var45 = var38.dequeue();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var47 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var48 = var47.isEmpty();
    boolean var49 = var47.isEmpty();
    java.util.Iterator var50 = var47.iterator();
    boolean var51 = var47.isEmpty();
    var47.enqueue((java.lang.Object)'#');
    boolean var54 = var47.isEmpty();
    int var55 = var47.size();
    java.util.Iterator var56 = var47.iterator();
    var38.enqueue((java.lang.Object)var47);
    var47.enqueue((java.lang.Object)100);
    var12.enqueue((java.lang.Object)var47);
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var62 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var62.enqueue((java.lang.Object)'#');
    int var65 = var62.size();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var67 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var68 = var67.isEmpty();
    boolean var69 = var67.isEmpty();
    java.util.Iterator var70 = var67.iterator();
    boolean var71 = var67.isEmpty();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var73 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var73.enqueue((java.lang.Object)'#');
    java.util.Iterator var76 = var73.iterator();
    java.util.Iterator var77 = var73.iterator();
    var73.enqueue((java.lang.Object)false);
    int var80 = var73.size();
    var67.enqueue((java.lang.Object)var73);
    var62.enqueue((java.lang.Object)var73);
    java.util.Iterator var83 = var73.iterator();
    var47.enqueue((java.lang.Object)var83);
    var1.enqueue((java.lang.Object)var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var45 + "' != '" + '#'+ "'", var45.equals('#'));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var80 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);

  }

  public void test108() throws Throwable {

    if (debug) System.out.printf("%nRingBufferMutantTest1.test108");


    at.fhhagenberg.sqe.exercise13.RingBufferMutant var1 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var2 = var1.isEmpty();
    boolean var3 = var1.isEmpty();
    java.util.Iterator var4 = var1.iterator();
    boolean var5 = var1.isEmpty();
    int var6 = var1.size();
    int var7 = var1.size();
    java.util.Iterator var8 = var1.iterator();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var10 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var10.enqueue((java.lang.Object)'#');
    java.util.Iterator var13 = var10.iterator();
    java.util.Iterator var14 = var10.iterator();
    var10.enqueue((java.lang.Object)false);
    java.lang.Object var17 = var10.dequeue();
    var1.enqueue((java.lang.Object)var10);
    java.util.Iterator var19 = var1.iterator();
    boolean var20 = var1.isEmpty();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var22 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var23 = var22.isEmpty();
    boolean var24 = var22.isEmpty();
    int var25 = var22.size();
    java.util.Iterator var26 = var22.iterator();
    var1.enqueue((java.lang.Object)var22);
    boolean var28 = var1.isEmpty();
    java.util.Iterator var29 = var1.iterator();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + '#'+ "'", var17.equals('#'));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);

  }

  public void test109() throws Throwable {

    if (debug) System.out.printf("%nRingBufferMutantTest1.test109");


    at.fhhagenberg.sqe.exercise13.RingBufferMutant var1 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var1.enqueue((java.lang.Object)'#');
    var1.enqueue((java.lang.Object)' ');
    int var6 = var1.size();
    int var7 = var1.size();
    int var8 = var1.size();
    int var9 = var1.size();
    int var10 = var1.size();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var12 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var12.enqueue((java.lang.Object)'#');
    boolean var15 = var12.isEmpty();
    int var16 = var12.size();
    var1.enqueue((java.lang.Object)var16);
    int var18 = var1.size();
    java.util.Iterator var19 = var1.iterator();
    java.lang.Object var20 = var1.dequeue();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var22 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var22.enqueue((java.lang.Object)1.0d);
    java.util.Iterator var25 = var22.iterator();
    boolean var26 = var22.isEmpty();
    boolean var27 = var22.isEmpty();
    java.util.Iterator var28 = var22.iterator();
    var1.enqueue((java.lang.Object)var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var20 + "' != '" + '#'+ "'", var20.equals('#'));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);

  }

  public void test110() throws Throwable {

    if (debug) System.out.printf("%nRingBufferMutantTest1.test110");


    at.fhhagenberg.sqe.exercise13.RingBufferMutant var1 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var1.enqueue((java.lang.Object)'#');
    java.util.Iterator var4 = var1.iterator();
    java.util.Iterator var5 = var1.iterator();
    var1.enqueue((java.lang.Object)false);
    int var8 = var1.size();
    boolean var9 = var1.isEmpty();
    boolean var10 = var1.isEmpty();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var12 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var12.enqueue((java.lang.Object)'#');
    int var15 = var12.size();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var17 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var18 = var17.isEmpty();
    boolean var19 = var17.isEmpty();
    java.util.Iterator var20 = var17.iterator();
    boolean var21 = var17.isEmpty();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var23 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var23.enqueue((java.lang.Object)'#');
    java.util.Iterator var26 = var23.iterator();
    java.util.Iterator var27 = var23.iterator();
    var23.enqueue((java.lang.Object)false);
    int var30 = var23.size();
    var17.enqueue((java.lang.Object)var23);
    var12.enqueue((java.lang.Object)var23);
    java.util.Iterator var33 = var23.iterator();
    var1.enqueue((java.lang.Object)var23);
    boolean var35 = var1.isEmpty();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var37 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var38 = var37.isEmpty();
    boolean var39 = var37.isEmpty();
    int var40 = var37.size();
    java.util.Iterator var41 = var37.iterator();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var43 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var43.enqueue((java.lang.Object)'#');
    int var46 = var43.size();
    var43.enqueue((java.lang.Object)true);
    java.util.Iterator var49 = var43.iterator();
    var37.enqueue((java.lang.Object)var49);
    java.util.Iterator var51 = var37.iterator();
    int var52 = var37.size();
    java.lang.Object var53 = var37.dequeue();
    var1.enqueue((java.lang.Object)var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);

  }

  public void test111() throws Throwable {

    if (debug) System.out.printf("%nRingBufferMutantTest1.test111");


    at.fhhagenberg.sqe.exercise13.RingBufferMutant var1 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var1.enqueue((java.lang.Object)'#');
    int var4 = var1.size();
    int var5 = var1.size();
    int var6 = var1.size();
    int var7 = var1.size();
    java.util.Iterator var8 = var1.iterator();
    java.util.Iterator var9 = var1.iterator();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);

  }

  public void test112() throws Throwable {

    if (debug) System.out.printf("%nRingBufferMutantTest1.test112");


    at.fhhagenberg.sqe.exercise13.RingBufferMutant var1 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var2 = var1.isEmpty();
    boolean var3 = var1.isEmpty();
    java.util.Iterator var4 = var1.iterator();
    boolean var5 = var1.isEmpty();
    java.util.Iterator var6 = var1.iterator();
    int var7 = var1.size();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var9 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var9.enqueue((java.lang.Object)'#');
    int var12 = var9.size();
    int var13 = var9.size();
    java.util.Iterator var14 = var9.iterator();
    java.util.Iterator var15 = var9.iterator();
    var1.enqueue((java.lang.Object)var15);
    java.util.Iterator var17 = var1.iterator();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var19 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var19.enqueue((java.lang.Object)'#');
    var19.enqueue((java.lang.Object)' ');
    int var24 = var19.size();
    java.util.Iterator var25 = var19.iterator();
    boolean var26 = var19.isEmpty();
    java.util.Iterator var27 = var19.iterator();
    int var28 = var19.size();
    boolean var29 = var19.isEmpty();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var31 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var31.enqueue((java.lang.Object)'#');
    java.util.Iterator var34 = var31.iterator();
    java.util.Iterator var35 = var31.iterator();
    var31.enqueue((java.lang.Object)false);
    int var38 = var31.size();
    boolean var39 = var31.isEmpty();
    java.lang.Object var40 = var31.dequeue();
    java.util.Iterator var41 = var31.iterator();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var43 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var43.enqueue((java.lang.Object)'#');
    java.util.Iterator var46 = var43.iterator();
    java.util.Iterator var47 = var43.iterator();
    java.util.Iterator var48 = var43.iterator();
    var31.enqueue((java.lang.Object)var43);
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var51 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(0);
    int var52 = var51.size();
    boolean var53 = var51.isEmpty();
    boolean var54 = var51.isEmpty();
    boolean var55 = var51.isEmpty();
    var43.enqueue((java.lang.Object)var51);
    java.util.Iterator var57 = var43.iterator();
    boolean var58 = var43.isEmpty();
    var19.enqueue((java.lang.Object)var43);
    var1.enqueue((java.lang.Object)var19);
    java.util.Iterator var61 = var19.iterator();
    boolean var62 = var19.isEmpty();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var40 + "' != '" + '#'+ "'", var40.equals('#'));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == false);

  }

  public void test113() throws Throwable {

    if (debug) System.out.printf("%nRingBufferMutantTest1.test113");


    at.fhhagenberg.sqe.exercise13.RingBufferMutant var1 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var2 = var1.isEmpty();
    boolean var3 = var1.isEmpty();
    java.util.Iterator var4 = var1.iterator();
    boolean var5 = var1.isEmpty();
    var1.enqueue((java.lang.Object)'#');
    boolean var8 = var1.isEmpty();
    int var9 = var1.size();
    java.util.Iterator var10 = var1.iterator();
    boolean var11 = var1.isEmpty();
    java.util.Iterator var12 = var1.iterator();
    java.lang.Object var13 = var1.dequeue();
    java.util.Iterator var14 = var1.iterator();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var16 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var16.enqueue((java.lang.Object)'#');
    java.util.Iterator var19 = var16.iterator();
    var16.enqueue((java.lang.Object)100.0d);
    boolean var22 = var16.isEmpty();
    java.util.Iterator var23 = var16.iterator();
    int var24 = var16.size();
    int var25 = var16.size();
    java.lang.Object var26 = var16.dequeue();
    java.util.Iterator var27 = var16.iterator();
    var1.enqueue((java.lang.Object)var16);
    java.util.Iterator var29 = var1.iterator();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + '#'+ "'", var13.equals('#'));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var26 + "' != '" + '#'+ "'", var26.equals('#'));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);

  }

  public void test114() throws Throwable {

    if (debug) System.out.printf("%nRingBufferMutantTest1.test114");


    at.fhhagenberg.sqe.exercise13.RingBufferMutant var1 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var2 = var1.isEmpty();
    boolean var3 = var1.isEmpty();
    java.util.Iterator var4 = var1.iterator();
    boolean var5 = var1.isEmpty();
    int var6 = var1.size();
    java.util.Iterator var7 = var1.iterator();
    int var8 = var1.size();
    boolean var9 = var1.isEmpty();
    int var10 = var1.size();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var12 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var12.enqueue((java.lang.Object)'#');
    int var15 = var12.size();
    int var16 = var12.size();
    java.util.Iterator var17 = var12.iterator();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var19 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var20 = var19.isEmpty();
    boolean var21 = var19.isEmpty();
    java.util.Iterator var22 = var19.iterator();
    boolean var23 = var19.isEmpty();
    var19.enqueue((java.lang.Object)1.0d);
    java.util.Iterator var26 = var19.iterator();
    var12.enqueue((java.lang.Object)var26);
    var1.enqueue((java.lang.Object)var12);
    boolean var29 = var1.isEmpty();
    boolean var30 = var1.isEmpty();
    int var31 = var1.size();
    java.util.Iterator var32 = var1.iterator();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);

  }

  public void test115() throws Throwable {

    if (debug) System.out.printf("%nRingBufferMutantTest1.test115");


    at.fhhagenberg.sqe.exercise13.RingBufferMutant var1 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var1.enqueue((java.lang.Object)'#');
    int var4 = var1.size();
    var1.enqueue((java.lang.Object)true);
    java.util.Iterator var7 = var1.iterator();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var9 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(100);
    var1.enqueue((java.lang.Object)100);
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var12 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var13 = var12.isEmpty();
    boolean var14 = var12.isEmpty();
    java.util.Iterator var15 = var12.iterator();
    boolean var16 = var12.isEmpty();
    int var17 = var12.size();
    int var18 = var12.size();
    java.util.Iterator var19 = var12.iterator();
    var1.enqueue((java.lang.Object)var12);
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var22 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var23 = var22.isEmpty();
    boolean var24 = var22.isEmpty();
    java.util.Iterator var25 = var22.iterator();
    boolean var26 = var22.isEmpty();
    var22.enqueue((java.lang.Object)'#');
    boolean var29 = var22.isEmpty();
    int var30 = var22.size();
    var1.enqueue((java.lang.Object)var30);
    java.util.Iterator var32 = var1.iterator();
    boolean var33 = var1.isEmpty();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);

  }

  public void test116() throws Throwable {

    if (debug) System.out.printf("%nRingBufferMutantTest1.test116");


    at.fhhagenberg.sqe.exercise13.RingBufferMutant var1 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var1.enqueue((java.lang.Object)'#');
    java.util.Iterator var4 = var1.iterator();
    java.util.Iterator var5 = var1.iterator();
    java.util.Iterator var6 = var1.iterator();
    boolean var7 = var1.isEmpty();
    java.util.Iterator var8 = var1.iterator();
    boolean var9 = var1.isEmpty();
    java.util.Iterator var10 = var1.iterator();
    boolean var11 = var1.isEmpty();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);

  }

  public void test117() throws Throwable {

    if (debug) System.out.printf("%nRingBufferMutantTest1.test117");


    at.fhhagenberg.sqe.exercise13.RingBufferMutant var1 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var2 = var1.isEmpty();
    boolean var3 = var1.isEmpty();
    java.util.Iterator var4 = var1.iterator();
    boolean var5 = var1.isEmpty();
    var1.enqueue((java.lang.Object)'#');
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var9 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var10 = var9.isEmpty();
    boolean var11 = var9.isEmpty();
    java.util.Iterator var12 = var9.iterator();
    boolean var13 = var9.isEmpty();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var15 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var15.enqueue((java.lang.Object)'#');
    java.util.Iterator var18 = var15.iterator();
    java.util.Iterator var19 = var15.iterator();
    var15.enqueue((java.lang.Object)false);
    int var22 = var15.size();
    var9.enqueue((java.lang.Object)var15);
    int var24 = var9.size();
    var1.enqueue((java.lang.Object)var24);
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var27 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var27.enqueue((java.lang.Object)'#');
    java.util.Iterator var30 = var27.iterator();
    java.util.Iterator var31 = var27.iterator();
    var27.enqueue((java.lang.Object)false);
    java.lang.Object var34 = var27.dequeue();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var36 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var37 = var36.isEmpty();
    boolean var38 = var36.isEmpty();
    java.util.Iterator var39 = var36.iterator();
    boolean var40 = var36.isEmpty();
    var36.enqueue((java.lang.Object)'#');
    boolean var43 = var36.isEmpty();
    int var44 = var36.size();
    java.util.Iterator var45 = var36.iterator();
    var27.enqueue((java.lang.Object)var36);
    var36.enqueue((java.lang.Object)100);
    var1.enqueue((java.lang.Object)var36);
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var51 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var51.enqueue((java.lang.Object)'#');
    int var54 = var51.size();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var56 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var57 = var56.isEmpty();
    boolean var58 = var56.isEmpty();
    java.util.Iterator var59 = var56.iterator();
    boolean var60 = var56.isEmpty();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var62 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var62.enqueue((java.lang.Object)'#');
    java.util.Iterator var65 = var62.iterator();
    java.util.Iterator var66 = var62.iterator();
    var62.enqueue((java.lang.Object)false);
    int var69 = var62.size();
    var56.enqueue((java.lang.Object)var62);
    var51.enqueue((java.lang.Object)var62);
    java.util.Iterator var72 = var62.iterator();
    var36.enqueue((java.lang.Object)var72);
    int var74 = var36.size();
    boolean var75 = var36.isEmpty();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var34 + "' != '" + '#'+ "'", var34.equals('#'));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == false);

  }

  public void test118() throws Throwable {

    if (debug) System.out.printf("%nRingBufferMutantTest1.test118");


    at.fhhagenberg.sqe.exercise13.RingBufferMutant var1 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var1.enqueue((java.lang.Object)'#');
    boolean var4 = var1.isEmpty();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var6 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var7 = var6.isEmpty();
    boolean var8 = var6.isEmpty();
    int var9 = var6.size();
    java.util.Iterator var10 = var6.iterator();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var12 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var12.enqueue((java.lang.Object)'#');
    int var15 = var12.size();
    var12.enqueue((java.lang.Object)true);
    java.util.Iterator var18 = var12.iterator();
    var6.enqueue((java.lang.Object)var18);
    java.lang.Object var20 = var6.dequeue();
    var6.enqueue((java.lang.Object)10.0f);
    var1.enqueue((java.lang.Object)10.0f);
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var25 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var26 = var25.isEmpty();
    boolean var27 = var25.isEmpty();
    int var28 = var25.size();
    java.util.Iterator var29 = var25.iterator();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var31 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var31.enqueue((java.lang.Object)'#');
    int var34 = var31.size();
    var31.enqueue((java.lang.Object)true);
    java.util.Iterator var37 = var31.iterator();
    var25.enqueue((java.lang.Object)var37);
    java.util.Iterator var39 = var25.iterator();
    boolean var40 = var25.isEmpty();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var42 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var43 = var42.isEmpty();
    boolean var44 = var42.isEmpty();
    java.util.Iterator var45 = var42.iterator();
    boolean var46 = var42.isEmpty();
    var42.enqueue((java.lang.Object)'#');
    boolean var49 = var42.isEmpty();
    int var50 = var42.size();
    java.util.Iterator var51 = var42.iterator();
    boolean var52 = var42.isEmpty();
    java.util.Iterator var53 = var42.iterator();
    int var54 = var42.size();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var56 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var56.enqueue((java.lang.Object)'#');
    int var59 = var56.size();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var61 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var62 = var61.isEmpty();
    boolean var63 = var61.isEmpty();
    java.util.Iterator var64 = var61.iterator();
    boolean var65 = var61.isEmpty();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var67 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var67.enqueue((java.lang.Object)'#');
    java.util.Iterator var70 = var67.iterator();
    java.util.Iterator var71 = var67.iterator();
    var67.enqueue((java.lang.Object)false);
    int var74 = var67.size();
    var61.enqueue((java.lang.Object)var67);
    var56.enqueue((java.lang.Object)var67);
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var78 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var78.enqueue((java.lang.Object)1.0d);
    java.util.Iterator var81 = var78.iterator();
    boolean var82 = var78.isEmpty();
    boolean var83 = var78.isEmpty();
    boolean var84 = var78.isEmpty();
    var56.enqueue((java.lang.Object)var78);
    var42.enqueue((java.lang.Object)var56);
    boolean var87 = var42.isEmpty();
    int var88 = var42.size();
    var25.enqueue((java.lang.Object)var88);
    var1.enqueue((java.lang.Object)var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var82 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var83 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var84 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var87 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var88 == 2);

  }

  public void test119() throws Throwable {

    if (debug) System.out.printf("%nRingBufferMutantTest1.test119");


    at.fhhagenberg.sqe.exercise13.RingBufferMutant var1 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var1.enqueue((java.lang.Object)'#');
    java.util.Iterator var4 = var1.iterator();
    java.util.Iterator var5 = var1.iterator();
    var1.enqueue((java.lang.Object)false);
    int var8 = var1.size();
    boolean var9 = var1.isEmpty();
    boolean var10 = var1.isEmpty();
    boolean var11 = var1.isEmpty();
    int var12 = var1.size();
    boolean var13 = var1.isEmpty();
    int var14 = var1.size();
    int var15 = var1.size();
    int var16 = var1.size();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 2);

  }

  public void test120() throws Throwable {

    if (debug) System.out.printf("%nRingBufferMutantTest1.test120");


    at.fhhagenberg.sqe.exercise13.RingBufferMutant var1 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var2 = var1.isEmpty();
    boolean var3 = var1.isEmpty();
    java.util.Iterator var4 = var1.iterator();
    boolean var5 = var1.isEmpty();
    int var6 = var1.size();
    java.util.Iterator var7 = var1.iterator();
    int var8 = var1.size();
    boolean var9 = var1.isEmpty();
    int var10 = var1.size();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var12 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var12.enqueue((java.lang.Object)'#');
    int var15 = var12.size();
    int var16 = var12.size();
    java.util.Iterator var17 = var12.iterator();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var19 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var20 = var19.isEmpty();
    boolean var21 = var19.isEmpty();
    java.util.Iterator var22 = var19.iterator();
    boolean var23 = var19.isEmpty();
    var19.enqueue((java.lang.Object)1.0d);
    java.util.Iterator var26 = var19.iterator();
    var12.enqueue((java.lang.Object)var26);
    var1.enqueue((java.lang.Object)var12);
    java.util.Iterator var29 = var1.iterator();
    java.lang.Object var30 = var1.dequeue();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);

  }

  public void test121() throws Throwable {

    if (debug) System.out.printf("%nRingBufferMutantTest1.test121");


    at.fhhagenberg.sqe.exercise13.RingBufferMutant var1 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var1.enqueue((java.lang.Object)'#');
    java.util.Iterator var4 = var1.iterator();
    java.util.Iterator var5 = var1.iterator();
    var1.enqueue((java.lang.Object)false);
    int var8 = var1.size();
    boolean var9 = var1.isEmpty();
    java.lang.Object var10 = var1.dequeue();
    java.util.Iterator var11 = var1.iterator();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var13 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var13.enqueue((java.lang.Object)'#');
    java.util.Iterator var16 = var13.iterator();
    java.util.Iterator var17 = var13.iterator();
    java.util.Iterator var18 = var13.iterator();
    var1.enqueue((java.lang.Object)var13);
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var21 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var21.enqueue((java.lang.Object)'#');
    int var24 = var21.size();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var26 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var27 = var26.isEmpty();
    boolean var28 = var26.isEmpty();
    java.util.Iterator var29 = var26.iterator();
    boolean var30 = var26.isEmpty();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var32 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var32.enqueue((java.lang.Object)'#');
    java.util.Iterator var35 = var32.iterator();
    java.util.Iterator var36 = var32.iterator();
    var32.enqueue((java.lang.Object)false);
    int var39 = var32.size();
    var26.enqueue((java.lang.Object)var32);
    var21.enqueue((java.lang.Object)var32);
    java.util.Iterator var42 = var32.iterator();
    java.util.Iterator var43 = var32.iterator();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var45 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var46 = var45.isEmpty();
    boolean var47 = var45.isEmpty();
    java.util.Iterator var48 = var45.iterator();
    boolean var49 = var45.isEmpty();
    var45.enqueue((java.lang.Object)'#');
    int var52 = var45.size();
    var32.enqueue((java.lang.Object)var52);
    boolean var54 = var32.isEmpty();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var56 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var56.enqueue((java.lang.Object)'#');
    int var59 = var56.size();
    int var60 = var56.size();
    java.util.Iterator var61 = var56.iterator();
    java.util.Iterator var62 = var56.iterator();
    var32.enqueue((java.lang.Object)var56);
    boolean var64 = var32.isEmpty();
    boolean var65 = var32.isEmpty();
    var13.enqueue((java.lang.Object)var32);
    boolean var67 = var13.isEmpty();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + '#'+ "'", var10.equals('#'));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == false);

  }

  public void test122() throws Throwable {

    if (debug) System.out.printf("%nRingBufferMutantTest1.test122");


    at.fhhagenberg.sqe.exercise13.RingBufferMutant var1 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var1.enqueue((java.lang.Object)'#');
    int var4 = var1.size();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var6 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var7 = var6.isEmpty();
    boolean var8 = var6.isEmpty();
    java.util.Iterator var9 = var6.iterator();
    boolean var10 = var6.isEmpty();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var12 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var12.enqueue((java.lang.Object)'#');
    java.util.Iterator var15 = var12.iterator();
    java.util.Iterator var16 = var12.iterator();
    var12.enqueue((java.lang.Object)false);
    int var19 = var12.size();
    var6.enqueue((java.lang.Object)var12);
    var1.enqueue((java.lang.Object)var12);
    java.util.Iterator var22 = var12.iterator();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var24 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var25 = var24.isEmpty();
    boolean var26 = var24.isEmpty();
    java.util.Iterator var27 = var24.iterator();
    boolean var28 = var24.isEmpty();
    var24.enqueue((java.lang.Object)'#');
    boolean var31 = var24.isEmpty();
    int var32 = var24.size();
    java.util.Iterator var33 = var24.iterator();
    boolean var34 = var24.isEmpty();
    var12.enqueue((java.lang.Object)var34);
    boolean var36 = var12.isEmpty();
    int var37 = var12.size();
    java.util.Iterator var38 = var12.iterator();
    int var39 = var12.size();
    java.util.Iterator var40 = var12.iterator();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);

  }

  public void test123() throws Throwable {

    if (debug) System.out.printf("%nRingBufferMutantTest1.test123");


    at.fhhagenberg.sqe.exercise13.RingBufferMutant var1 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var2 = var1.isEmpty();
    boolean var3 = var1.isEmpty();
    java.util.Iterator var4 = var1.iterator();
    boolean var5 = var1.isEmpty();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var7 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var7.enqueue((java.lang.Object)'#');
    java.util.Iterator var10 = var7.iterator();
    java.util.Iterator var11 = var7.iterator();
    var7.enqueue((java.lang.Object)false);
    int var14 = var7.size();
    var1.enqueue((java.lang.Object)var7);
    int var16 = var1.size();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var18 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var19 = var18.isEmpty();
    boolean var20 = var18.isEmpty();
    java.util.Iterator var21 = var18.iterator();
    boolean var22 = var18.isEmpty();
    java.util.Iterator var23 = var18.iterator();
    int var24 = var18.size();
    var1.enqueue((java.lang.Object)var24);
    int var26 = var1.size();
    boolean var27 = var1.isEmpty();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);

  }

  public void test124() throws Throwable {

    if (debug) System.out.printf("%nRingBufferMutantTest1.test124");


    at.fhhagenberg.sqe.exercise13.RingBufferMutant var1 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var2 = var1.isEmpty();
    boolean var3 = var1.isEmpty();
    boolean var4 = var1.isEmpty();
    int var5 = var1.size();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var7 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(1);
    var1.enqueue((java.lang.Object)var7);
    int var9 = var7.size();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var11 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var11.enqueue((java.lang.Object)'#');
    java.util.Iterator var14 = var11.iterator();
    java.util.Iterator var15 = var11.iterator();
    var11.enqueue((java.lang.Object)false);
    int var18 = var11.size();
    boolean var19 = var11.isEmpty();
    boolean var20 = var11.isEmpty();
    boolean var21 = var11.isEmpty();
    java.util.Iterator var22 = var11.iterator();
    var7.enqueue((java.lang.Object)var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);

  }

  public void test125() throws Throwable {

    if (debug) System.out.printf("%nRingBufferMutantTest1.test125");


    at.fhhagenberg.sqe.exercise13.RingBufferMutant var1 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var1.enqueue((java.lang.Object)'#');
    java.util.Iterator var4 = var1.iterator();
    java.util.Iterator var5 = var1.iterator();
    var1.enqueue((java.lang.Object)false);
    int var8 = var1.size();
    boolean var9 = var1.isEmpty();
    boolean var10 = var1.isEmpty();
    boolean var11 = var1.isEmpty();
    int var12 = var1.size();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var14 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(100);
    int var15 = var14.size();
    java.util.Iterator var16 = var14.iterator();
    var1.enqueue((java.lang.Object)var14);
    int var18 = var14.size();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var20 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var21 = var20.isEmpty();
    boolean var22 = var20.isEmpty();
    boolean var23 = var20.isEmpty();
    int var24 = var20.size();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var26 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(1);
    var20.enqueue((java.lang.Object)var26);
    int var28 = var26.size();
    int var29 = var26.size();
    boolean var30 = var26.isEmpty();
    var14.enqueue((java.lang.Object)var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == true);

  }

  public void test126() throws Throwable {

    if (debug) System.out.printf("%nRingBufferMutantTest1.test126");


    at.fhhagenberg.sqe.exercise13.RingBufferMutant var1 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var2 = var1.isEmpty();
    boolean var3 = var1.isEmpty();
    java.util.Iterator var4 = var1.iterator();
    boolean var5 = var1.isEmpty();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var7 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var7.enqueue((java.lang.Object)'#');
    java.util.Iterator var10 = var7.iterator();
    java.util.Iterator var11 = var7.iterator();
    var7.enqueue((java.lang.Object)false);
    int var14 = var7.size();
    var1.enqueue((java.lang.Object)var7);
    int var16 = var1.size();
    java.lang.Object var17 = var1.dequeue();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var19 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var19.enqueue((java.lang.Object)'#');
    java.util.Iterator var22 = var19.iterator();
    java.util.Iterator var23 = var19.iterator();
    java.util.Iterator var24 = var19.iterator();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var26 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var26.enqueue((java.lang.Object)'#');
    java.util.Iterator var29 = var26.iterator();
    java.util.Iterator var30 = var26.iterator();
    java.util.Iterator var31 = var26.iterator();
    boolean var32 = var26.isEmpty();
    int var33 = var26.size();
    var19.enqueue((java.lang.Object)var33);
    boolean var35 = var19.isEmpty();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var37 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var37.enqueue((java.lang.Object)1.0d);
    int var40 = var37.size();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var42 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var43 = var42.isEmpty();
    boolean var44 = var42.isEmpty();
    java.util.Iterator var45 = var42.iterator();
    boolean var46 = var42.isEmpty();
    java.util.Iterator var47 = var42.iterator();
    int var48 = var42.size();
    var37.enqueue((java.lang.Object)var42);
    var19.enqueue((java.lang.Object)var37);
    var1.enqueue((java.lang.Object)var37);
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var53 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(0);
    int var54 = var53.size();
    boolean var55 = var53.isEmpty();
    boolean var56 = var53.isEmpty();
    var37.enqueue((java.lang.Object)var53);
    int var58 = var37.size();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var60 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(100);
    int var61 = var60.size();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var63 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var63.enqueue((java.lang.Object)'#');
    java.util.Iterator var66 = var63.iterator();
    java.util.Iterator var67 = var63.iterator();
    var63.enqueue((java.lang.Object)false);
    java.lang.Object var70 = var63.dequeue();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var72 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var73 = var72.isEmpty();
    boolean var74 = var72.isEmpty();
    java.util.Iterator var75 = var72.iterator();
    boolean var76 = var72.isEmpty();
    var72.enqueue((java.lang.Object)'#');
    boolean var79 = var72.isEmpty();
    int var80 = var72.size();
    java.util.Iterator var81 = var72.iterator();
    var63.enqueue((java.lang.Object)var72);
    int var83 = var72.size();
    int var84 = var72.size();
    var60.enqueue((java.lang.Object)var84);
    java.lang.Object var86 = var60.dequeue();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var88 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var89 = var88.isEmpty();
    boolean var90 = var88.isEmpty();
    java.util.Iterator var91 = var88.iterator();
    boolean var92 = var88.isEmpty();
    java.util.Iterator var93 = var88.iterator();
    var60.enqueue((java.lang.Object)var88);
    var37.enqueue((java.lang.Object)var60);
    java.util.Iterator var96 = var60.iterator();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var70 + "' != '" + '#'+ "'", var70.equals('#'));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var76 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var79 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var80 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var83 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var84 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var86 + "' != '" + 1+ "'", var86.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var89 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var90 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var91);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var92 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var93);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var96);

  }

  public void test127() throws Throwable {

    if (debug) System.out.printf("%nRingBufferMutantTest1.test127");


    at.fhhagenberg.sqe.exercise13.RingBufferMutant var1 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var1.enqueue((java.lang.Object)'#');
    int var4 = var1.size();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var6 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var7 = var6.isEmpty();
    boolean var8 = var6.isEmpty();
    java.util.Iterator var9 = var6.iterator();
    boolean var10 = var6.isEmpty();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var12 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var12.enqueue((java.lang.Object)'#');
    java.util.Iterator var15 = var12.iterator();
    java.util.Iterator var16 = var12.iterator();
    var12.enqueue((java.lang.Object)false);
    int var19 = var12.size();
    var6.enqueue((java.lang.Object)var12);
    var1.enqueue((java.lang.Object)var12);
    java.util.Iterator var22 = var12.iterator();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var24 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var25 = var24.isEmpty();
    boolean var26 = var24.isEmpty();
    java.util.Iterator var27 = var24.iterator();
    boolean var28 = var24.isEmpty();
    var24.enqueue((java.lang.Object)'#');
    boolean var31 = var24.isEmpty();
    int var32 = var24.size();
    java.util.Iterator var33 = var24.iterator();
    boolean var34 = var24.isEmpty();
    var12.enqueue((java.lang.Object)var34);
    boolean var36 = var12.isEmpty();
    int var37 = var12.size();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var39 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(2);
    var12.enqueue((java.lang.Object)2);
    java.lang.Object var41 = var12.dequeue();
    java.util.Iterator var42 = var12.iterator();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var41 + "' != '" + '#'+ "'", var41.equals('#'));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);

  }

  public void test128() throws Throwable {

    if (debug) System.out.printf("%nRingBufferMutantTest1.test128");


    at.fhhagenberg.sqe.exercise13.RingBufferMutant var1 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(100);
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var3 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var3.enqueue((java.lang.Object)'#');
    java.util.Iterator var6 = var3.iterator();
    java.util.Iterator var7 = var3.iterator();
    var3.enqueue((java.lang.Object)false);
    int var10 = var3.size();
    boolean var11 = var3.isEmpty();
    int var12 = var3.size();
    java.lang.Object var13 = new java.lang.Object();
    var3.enqueue(var13);
    var1.enqueue((java.lang.Object)var3);
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var17 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var17.enqueue((java.lang.Object)'#');
    java.util.Iterator var20 = var17.iterator();
    java.util.Iterator var21 = var17.iterator();
    var17.enqueue((java.lang.Object)false);
    int var24 = var17.size();
    boolean var25 = var17.isEmpty();
    boolean var26 = var17.isEmpty();
    boolean var27 = var17.isEmpty();
    int var28 = var17.size();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var30 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(100);
    int var31 = var30.size();
    java.util.Iterator var32 = var30.iterator();
    var17.enqueue((java.lang.Object)var30);
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var35 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var36 = var35.isEmpty();
    boolean var37 = var35.isEmpty();
    boolean var38 = var35.isEmpty();
    int var39 = var35.size();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var41 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(1);
    var35.enqueue((java.lang.Object)var41);
    java.lang.Object var43 = var35.dequeue();
    var17.enqueue(var43);
    int var45 = var17.size();
    boolean var46 = var17.isEmpty();
    var3.enqueue((java.lang.Object)var17);
    boolean var48 = var3.isEmpty();
    int var49 = var3.size();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == 4);

  }

  public void test129() throws Throwable {

    if (debug) System.out.printf("%nRingBufferMutantTest1.test129");


    at.fhhagenberg.sqe.exercise13.RingBufferMutant var1 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(5);
    java.util.Iterator var2 = var1.iterator();
    boolean var3 = var1.isEmpty();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);

  }

  public void test130() throws Throwable {

    if (debug) System.out.printf("%nRingBufferMutantTest1.test130");


    at.fhhagenberg.sqe.exercise13.RingBufferMutant var1 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var2 = var1.isEmpty();
    boolean var3 = var1.isEmpty();
    java.util.Iterator var4 = var1.iterator();
    boolean var5 = var1.isEmpty();
    int var6 = var1.size();
    java.util.Iterator var7 = var1.iterator();
    int var8 = var1.size();
    boolean var9 = var1.isEmpty();
    int var10 = var1.size();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var12 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var12.enqueue((java.lang.Object)'#');
    int var15 = var12.size();
    int var16 = var12.size();
    java.util.Iterator var17 = var12.iterator();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var19 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var20 = var19.isEmpty();
    boolean var21 = var19.isEmpty();
    java.util.Iterator var22 = var19.iterator();
    boolean var23 = var19.isEmpty();
    var19.enqueue((java.lang.Object)1.0d);
    java.util.Iterator var26 = var19.iterator();
    var12.enqueue((java.lang.Object)var26);
    var1.enqueue((java.lang.Object)var12);
    boolean var29 = var1.isEmpty();
    boolean var30 = var1.isEmpty();
    java.util.Iterator var31 = var1.iterator();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);

  }

  public void test131() throws Throwable {

    if (debug) System.out.printf("%nRingBufferMutantTest1.test131");


    at.fhhagenberg.sqe.exercise13.RingBufferMutant var1 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var2 = var1.isEmpty();
    boolean var3 = var1.isEmpty();
    int var4 = var1.size();
    java.util.Iterator var5 = var1.iterator();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var7 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var7.enqueue((java.lang.Object)'#');
    int var10 = var7.size();
    var7.enqueue((java.lang.Object)true);
    java.util.Iterator var13 = var7.iterator();
    var1.enqueue((java.lang.Object)var13);
    java.lang.Object var15 = var1.dequeue();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var17 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var17.enqueue((java.lang.Object)'#');
    int var20 = var17.size();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var22 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var23 = var22.isEmpty();
    boolean var24 = var22.isEmpty();
    java.util.Iterator var25 = var22.iterator();
    boolean var26 = var22.isEmpty();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var28 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var28.enqueue((java.lang.Object)'#');
    java.util.Iterator var31 = var28.iterator();
    java.util.Iterator var32 = var28.iterator();
    var28.enqueue((java.lang.Object)false);
    int var35 = var28.size();
    var22.enqueue((java.lang.Object)var28);
    var17.enqueue((java.lang.Object)var28);
    java.util.Iterator var38 = var17.iterator();
    java.util.Iterator var39 = var17.iterator();
    var1.enqueue((java.lang.Object)var17);
    boolean var41 = var17.isEmpty();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);

  }

  public void test132() throws Throwable {

    if (debug) System.out.printf("%nRingBufferMutantTest1.test132");


    at.fhhagenberg.sqe.exercise13.RingBufferMutant var1 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var2 = var1.isEmpty();
    boolean var3 = var1.isEmpty();
    int var4 = var1.size();
    java.util.Iterator var5 = var1.iterator();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var7 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var7.enqueue((java.lang.Object)'#');
    int var10 = var7.size();
    var7.enqueue((java.lang.Object)true);
    java.util.Iterator var13 = var7.iterator();
    var1.enqueue((java.lang.Object)var13);
    java.util.Iterator var15 = var1.iterator();
    int var16 = var1.size();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var18 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var19 = var18.isEmpty();
    boolean var20 = var18.isEmpty();
    int var21 = var18.size();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var23 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var24 = var23.isEmpty();
    boolean var25 = var23.isEmpty();
    var18.enqueue((java.lang.Object)var25);
    boolean var27 = var18.isEmpty();
    var1.enqueue((java.lang.Object)var27);
    java.util.Iterator var29 = var1.iterator();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var31 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var32 = var31.isEmpty();
    boolean var33 = var31.isEmpty();
    boolean var34 = var31.isEmpty();
    int var35 = var31.size();
    int var36 = var31.size();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var38 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var39 = var38.isEmpty();
    boolean var40 = var38.isEmpty();
    java.util.Iterator var41 = var38.iterator();
    boolean var42 = var38.isEmpty();
    int var43 = var38.size();
    java.util.Iterator var44 = var38.iterator();
    int var45 = var38.size();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var47 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var47.enqueue((java.lang.Object)'#');
    java.util.Iterator var50 = var47.iterator();
    java.util.Iterator var51 = var47.iterator();
    var47.enqueue((java.lang.Object)false);
    java.lang.Object var54 = var47.dequeue();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var56 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var57 = var56.isEmpty();
    boolean var58 = var56.isEmpty();
    java.util.Iterator var59 = var56.iterator();
    boolean var60 = var56.isEmpty();
    var56.enqueue((java.lang.Object)'#');
    boolean var63 = var56.isEmpty();
    int var64 = var56.size();
    java.util.Iterator var65 = var56.iterator();
    var47.enqueue((java.lang.Object)var56);
    int var67 = var56.size();
    int var68 = var56.size();
    var38.enqueue((java.lang.Object)var56);
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var71 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var72 = var71.isEmpty();
    boolean var73 = var71.isEmpty();
    int var74 = var71.size();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var76 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var77 = var76.isEmpty();
    boolean var78 = var76.isEmpty();
    var71.enqueue((java.lang.Object)var78);
    boolean var80 = var71.isEmpty();
    var56.enqueue((java.lang.Object)var80);
    boolean var82 = var56.isEmpty();
    var31.enqueue((java.lang.Object)var56);
    var1.enqueue((java.lang.Object)var56);
    java.util.Iterator var85 = var1.iterator();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var87 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(0);
    int var88 = var87.size();
    boolean var89 = var87.isEmpty();
    int var90 = var87.size();
    var1.enqueue((java.lang.Object)var87);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var54 + "' != '" + '#'+ "'", var54.equals('#'));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var77 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var78 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var80 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var82 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var85);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var88 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var89 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var90 == 0);

  }

  public void test133() throws Throwable {

    if (debug) System.out.printf("%nRingBufferMutantTest1.test133");


    at.fhhagenberg.sqe.exercise13.RingBufferMutant var1 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var1.enqueue((java.lang.Object)1.0d);
    java.util.Iterator var4 = var1.iterator();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var6 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(1);
    boolean var7 = var6.isEmpty();
    boolean var8 = var6.isEmpty();
    java.util.Iterator var9 = var6.iterator();
    var1.enqueue((java.lang.Object)var6);
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var12 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var12.enqueue((java.lang.Object)'#');
    java.util.Iterator var15 = var12.iterator();
    java.util.Iterator var16 = var12.iterator();
    var12.enqueue((java.lang.Object)false);
    int var19 = var12.size();
    boolean var20 = var12.isEmpty();
    boolean var21 = var12.isEmpty();
    boolean var22 = var12.isEmpty();
    java.lang.Object var23 = var12.dequeue();
    java.util.Iterator var24 = var12.iterator();
    var1.enqueue((java.lang.Object)var12);
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var27 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var28 = var27.isEmpty();
    boolean var29 = var27.isEmpty();
    int var30 = var27.size();
    java.util.Iterator var31 = var27.iterator();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var33 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var33.enqueue((java.lang.Object)'#');
    int var36 = var33.size();
    var33.enqueue((java.lang.Object)true);
    java.util.Iterator var39 = var33.iterator();
    var27.enqueue((java.lang.Object)var39);
    java.lang.Object var41 = var27.dequeue();
    java.util.Iterator var42 = var27.iterator();
    var1.enqueue((java.lang.Object)var27);
    java.util.Iterator var44 = var1.iterator();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + '#'+ "'", var23.equals('#'));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);

  }

  public void test134() throws Throwable {

    if (debug) System.out.printf("%nRingBufferMutantTest1.test134");


    at.fhhagenberg.sqe.exercise13.RingBufferMutant var1 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var1.enqueue((java.lang.Object)1.0d);
    java.util.Iterator var4 = var1.iterator();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var6 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(1);
    boolean var7 = var6.isEmpty();
    boolean var8 = var6.isEmpty();
    java.util.Iterator var9 = var6.iterator();
    var1.enqueue((java.lang.Object)var6);
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var12 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var12.enqueue((java.lang.Object)'#');
    java.util.Iterator var15 = var12.iterator();
    java.util.Iterator var16 = var12.iterator();
    var12.enqueue((java.lang.Object)false);
    int var19 = var12.size();
    boolean var20 = var12.isEmpty();
    boolean var21 = var12.isEmpty();
    boolean var22 = var12.isEmpty();
    java.lang.Object var23 = var12.dequeue();
    java.util.Iterator var24 = var12.iterator();
    var1.enqueue((java.lang.Object)var12);
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var27 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var27.enqueue((java.lang.Object)'#');
    int var30 = var27.size();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var32 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var33 = var32.isEmpty();
    boolean var34 = var32.isEmpty();
    java.util.Iterator var35 = var32.iterator();
    boolean var36 = var32.isEmpty();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var38 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var38.enqueue((java.lang.Object)'#');
    java.util.Iterator var41 = var38.iterator();
    java.util.Iterator var42 = var38.iterator();
    var38.enqueue((java.lang.Object)false);
    int var45 = var38.size();
    var32.enqueue((java.lang.Object)var38);
    var27.enqueue((java.lang.Object)var38);
    java.util.Iterator var48 = var27.iterator();
    java.util.Iterator var49 = var27.iterator();
    var1.enqueue((java.lang.Object)var27);
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var52 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var52.enqueue((java.lang.Object)'#');
    java.util.Iterator var55 = var52.iterator();
    java.util.Iterator var56 = var52.iterator();
    var52.enqueue((java.lang.Object)false);
    java.lang.Object var59 = var52.dequeue();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var61 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var62 = var61.isEmpty();
    boolean var63 = var61.isEmpty();
    java.util.Iterator var64 = var61.iterator();
    boolean var65 = var61.isEmpty();
    var61.enqueue((java.lang.Object)'#');
    boolean var68 = var61.isEmpty();
    int var69 = var61.size();
    java.util.Iterator var70 = var61.iterator();
    var52.enqueue((java.lang.Object)var61);
    var61.enqueue((java.lang.Object)100);
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var75 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var75.enqueue((java.lang.Object)'#');
    java.util.Iterator var78 = var75.iterator();
    var75.enqueue((java.lang.Object)100.0d);
    java.util.Iterator var81 = var75.iterator();
    var61.enqueue((java.lang.Object)var75);
    boolean var83 = var61.isEmpty();
    java.lang.Object var84 = var61.dequeue();
    var27.enqueue(var84);
    java.util.Iterator var86 = var27.iterator();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + '#'+ "'", var23.equals('#'));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var59 + "' != '" + '#'+ "'", var59.equals('#'));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var83 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var84 + "' != '" + '#'+ "'", var84.equals('#'));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var86);

  }

  public void test135() throws Throwable {

    if (debug) System.out.printf("%nRingBufferMutantTest1.test135");


    at.fhhagenberg.sqe.exercise13.RingBufferMutant var1 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var1.enqueue((java.lang.Object)1.0d);
    java.util.Iterator var4 = var1.iterator();
    boolean var5 = var1.isEmpty();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var7 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var8 = var7.isEmpty();
    boolean var9 = var7.isEmpty();
    java.util.Iterator var10 = var7.iterator();
    boolean var11 = var7.isEmpty();
    var7.enqueue((java.lang.Object)'#');
    boolean var14 = var7.isEmpty();
    int var15 = var7.size();
    java.util.Iterator var16 = var7.iterator();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var18 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var18.enqueue((java.lang.Object)'#');
    java.util.Iterator var21 = var18.iterator();
    var18.enqueue((java.lang.Object)100.0d);
    boolean var24 = var18.isEmpty();
    java.lang.Object var25 = var18.dequeue();
    var7.enqueue(var25);
    java.util.Iterator var27 = var7.iterator();
    var1.enqueue((java.lang.Object)var7);
    boolean var29 = var1.isEmpty();
    int var30 = var1.size();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var25 + "' != '" + '#'+ "'", var25.equals('#'));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == 2);

  }

  public void test136() throws Throwable {

    if (debug) System.out.printf("%nRingBufferMutantTest1.test136");


    at.fhhagenberg.sqe.exercise13.RingBufferMutant var1 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var1.enqueue((java.lang.Object)'#');
    int var4 = var1.size();
    var1.enqueue((java.lang.Object)true);
    int var7 = var1.size();
    boolean var8 = var1.isEmpty();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var10 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var10.enqueue((java.lang.Object)'#');
    java.util.Iterator var13 = var10.iterator();
    java.util.Iterator var14 = var10.iterator();
    java.util.Iterator var15 = var10.iterator();
    boolean var16 = var10.isEmpty();
    int var17 = var10.size();
    java.util.Iterator var18 = var10.iterator();
    var1.enqueue((java.lang.Object)var18);
    java.util.Iterator var20 = var1.iterator();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);

  }

  public void test137() throws Throwable {

    if (debug) System.out.printf("%nRingBufferMutantTest1.test137");


    at.fhhagenberg.sqe.exercise13.RingBufferMutant var1 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var1.enqueue((java.lang.Object)'#');
    java.util.Iterator var4 = var1.iterator();
    java.util.Iterator var5 = var1.iterator();
    java.util.Iterator var6 = var1.iterator();
    java.lang.Object var7 = var1.dequeue();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var9 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var10 = var9.isEmpty();
    boolean var11 = var9.isEmpty();
    java.util.Iterator var12 = var9.iterator();
    boolean var13 = var9.isEmpty();
    int var14 = var9.size();
    int var15 = var9.size();
    java.util.Iterator var16 = var9.iterator();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var18 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var18.enqueue((java.lang.Object)'#');
    java.util.Iterator var21 = var18.iterator();
    java.util.Iterator var22 = var18.iterator();
    var18.enqueue((java.lang.Object)false);
    java.lang.Object var25 = var18.dequeue();
    var9.enqueue((java.lang.Object)var18);
    java.util.Iterator var27 = var9.iterator();
    boolean var28 = var9.isEmpty();
    var1.enqueue((java.lang.Object)var9);
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var31 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var31.enqueue((java.lang.Object)'#');
    var31.enqueue((java.lang.Object)' ');
    int var36 = var31.size();
    int var37 = var31.size();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var39 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var40 = var39.isEmpty();
    boolean var41 = var39.isEmpty();
    java.util.Iterator var42 = var39.iterator();
    boolean var43 = var39.isEmpty();
    var39.enqueue((java.lang.Object)'#');
    boolean var46 = var39.isEmpty();
    var31.enqueue((java.lang.Object)var46);
    var9.enqueue((java.lang.Object)var31);
    int var49 = var31.size();
    java.util.Iterator var50 = var31.iterator();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + '#'+ "'", var7.equals('#'));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var25 + "' != '" + '#'+ "'", var25.equals('#'));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);

  }

  public void test138() throws Throwable {

    if (debug) System.out.printf("%nRingBufferMutantTest1.test138");


    at.fhhagenberg.sqe.exercise13.RingBufferMutant var1 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var2 = var1.isEmpty();
    boolean var3 = var1.isEmpty();
    java.util.Iterator var4 = var1.iterator();
    boolean var5 = var1.isEmpty();
    var1.enqueue((java.lang.Object)'#');
    java.util.Iterator var8 = var1.iterator();
    boolean var9 = var1.isEmpty();
    java.util.Iterator var10 = var1.iterator();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var12 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var12.enqueue((java.lang.Object)'#');
    java.util.Iterator var15 = var12.iterator();
    java.util.Iterator var16 = var12.iterator();
    java.util.Iterator var17 = var12.iterator();
    java.util.Iterator var18 = var12.iterator();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var20 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var20.enqueue((java.lang.Object)'#');
    var20.enqueue((java.lang.Object)' ');
    int var25 = var20.size();
    java.util.Iterator var26 = var20.iterator();
    boolean var27 = var20.isEmpty();
    java.util.Iterator var28 = var20.iterator();
    int var29 = var20.size();
    boolean var30 = var20.isEmpty();
    java.lang.Object var31 = var20.dequeue();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var33 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var34 = var33.isEmpty();
    boolean var35 = var33.isEmpty();
    java.util.Iterator var36 = var33.iterator();
    boolean var37 = var33.isEmpty();
    var33.enqueue((java.lang.Object)1.0d);
    java.util.Iterator var40 = var33.iterator();
    var20.enqueue((java.lang.Object)var40);
    var12.enqueue((java.lang.Object)var40);
    var1.enqueue((java.lang.Object)var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var31 + "' != '" + '#'+ "'", var31.equals('#'));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);

  }

  public void test139() throws Throwable {

    if (debug) System.out.printf("%nRingBufferMutantTest1.test139");


    at.fhhagenberg.sqe.exercise13.RingBufferMutant var1 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var2 = var1.isEmpty();
    boolean var3 = var1.isEmpty();
    java.util.Iterator var4 = var1.iterator();
    boolean var5 = var1.isEmpty();
    var1.enqueue((java.lang.Object)1.0d);
    java.util.Iterator var8 = var1.iterator();
    java.util.Iterator var9 = var1.iterator();
    java.util.Iterator var10 = var1.iterator();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var12 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var12.enqueue((java.lang.Object)'#');
    int var15 = var12.size();
    var12.enqueue((java.lang.Object)true);
    java.util.Iterator var18 = var12.iterator();
    java.lang.Object var19 = var12.dequeue();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var21 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var22 = var21.isEmpty();
    boolean var23 = var21.isEmpty();
    java.util.Iterator var24 = var21.iterator();
    boolean var25 = var21.isEmpty();
    var12.enqueue((java.lang.Object)var21);
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var28 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var29 = var28.isEmpty();
    boolean var30 = var28.isEmpty();
    java.util.Iterator var31 = var28.iterator();
    boolean var32 = var28.isEmpty();
    var28.enqueue((java.lang.Object)'#');
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var36 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var37 = var36.isEmpty();
    boolean var38 = var36.isEmpty();
    java.util.Iterator var39 = var36.iterator();
    boolean var40 = var36.isEmpty();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var42 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var42.enqueue((java.lang.Object)'#');
    java.util.Iterator var45 = var42.iterator();
    java.util.Iterator var46 = var42.iterator();
    var42.enqueue((java.lang.Object)false);
    int var49 = var42.size();
    var36.enqueue((java.lang.Object)var42);
    int var51 = var36.size();
    var28.enqueue((java.lang.Object)var51);
    var12.enqueue((java.lang.Object)var28);
    var1.enqueue((java.lang.Object)var28);
    java.util.Iterator var55 = var1.iterator();
    int var56 = var1.size();
    boolean var57 = var1.isEmpty();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + '#'+ "'", var19.equals('#'));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == false);

  }

  public void test140() throws Throwable {

    if (debug) System.out.printf("%nRingBufferMutantTest1.test140");


    at.fhhagenberg.sqe.exercise13.RingBufferMutant var1 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var2 = var1.isEmpty();
    boolean var3 = var1.isEmpty();
    java.util.Iterator var4 = var1.iterator();
    boolean var5 = var1.isEmpty();
    int var6 = var1.size();
    java.util.Iterator var7 = var1.iterator();
    int var8 = var1.size();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var10 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var10.enqueue((java.lang.Object)'#');
    java.util.Iterator var13 = var10.iterator();
    java.util.Iterator var14 = var10.iterator();
    var10.enqueue((java.lang.Object)false);
    java.lang.Object var17 = var10.dequeue();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var19 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var20 = var19.isEmpty();
    boolean var21 = var19.isEmpty();
    java.util.Iterator var22 = var19.iterator();
    boolean var23 = var19.isEmpty();
    var19.enqueue((java.lang.Object)'#');
    boolean var26 = var19.isEmpty();
    int var27 = var19.size();
    java.util.Iterator var28 = var19.iterator();
    var10.enqueue((java.lang.Object)var19);
    int var30 = var19.size();
    int var31 = var19.size();
    var1.enqueue((java.lang.Object)var19);
    int var33 = var1.size();
    int var34 = var1.size();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + '#'+ "'", var17.equals('#'));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == 1);

  }

  public void test141() throws Throwable {

    if (debug) System.out.printf("%nRingBufferMutantTest1.test141");


    at.fhhagenberg.sqe.exercise13.RingBufferMutant var1 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var2 = var1.isEmpty();
    boolean var3 = var1.isEmpty();
    java.util.Iterator var4 = var1.iterator();
    boolean var5 = var1.isEmpty();
    int var6 = var1.size();
    int var7 = var1.size();
    boolean var8 = var1.isEmpty();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var10 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(100);
    int var11 = var10.size();
    int var12 = var10.size();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var14 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var14.enqueue((java.lang.Object)1.0d);
    java.util.Iterator var17 = var14.iterator();
    boolean var18 = var14.isEmpty();
    boolean var19 = var14.isEmpty();
    boolean var20 = var14.isEmpty();
    java.util.Iterator var21 = var14.iterator();
    var14.enqueue((java.lang.Object)(short)0);
    var10.enqueue((java.lang.Object)var14);
    var1.enqueue((java.lang.Object)var14);
    boolean var26 = var1.isEmpty();
    boolean var27 = var1.isEmpty();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);

  }

  public void test142() throws Throwable {

    if (debug) System.out.printf("%nRingBufferMutantTest1.test142");


    at.fhhagenberg.sqe.exercise13.RingBufferMutant var1 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var1.enqueue((java.lang.Object)'#');
    java.util.Iterator var4 = var1.iterator();
    java.util.Iterator var5 = var1.iterator();
    var1.enqueue((java.lang.Object)false);
    int var8 = var1.size();
    boolean var9 = var1.isEmpty();
    boolean var10 = var1.isEmpty();
    boolean var11 = var1.isEmpty();
    int var12 = var1.size();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var14 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(100);
    int var15 = var14.size();
    java.util.Iterator var16 = var14.iterator();
    var1.enqueue((java.lang.Object)var14);
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var19 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var20 = var19.isEmpty();
    boolean var21 = var19.isEmpty();
    boolean var22 = var19.isEmpty();
    int var23 = var19.size();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var25 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(1);
    var19.enqueue((java.lang.Object)var25);
    java.lang.Object var27 = var19.dequeue();
    var1.enqueue(var27);
    java.util.Iterator var29 = var1.iterator();
    boolean var30 = var1.isEmpty();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);

  }

  public void test143() throws Throwable {

    if (debug) System.out.printf("%nRingBufferMutantTest1.test143");


    at.fhhagenberg.sqe.exercise13.RingBufferMutant var1 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var1.enqueue((java.lang.Object)1.0d);
    int var4 = var1.size();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var6 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var7 = var6.isEmpty();
    boolean var8 = var6.isEmpty();
    java.util.Iterator var9 = var6.iterator();
    boolean var10 = var6.isEmpty();
    java.util.Iterator var11 = var6.iterator();
    int var12 = var6.size();
    var1.enqueue((java.lang.Object)var6);
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var15 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var15.enqueue((java.lang.Object)'#');
    java.util.Iterator var18 = var15.iterator();
    java.util.Iterator var19 = var15.iterator();
    var15.enqueue((java.lang.Object)false);
    int var22 = var15.size();
    boolean var23 = var15.isEmpty();
    java.lang.Object var24 = var15.dequeue();
    java.util.Iterator var25 = var15.iterator();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var27 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var27.enqueue((java.lang.Object)'#');
    java.util.Iterator var30 = var27.iterator();
    java.util.Iterator var31 = var27.iterator();
    java.util.Iterator var32 = var27.iterator();
    var15.enqueue((java.lang.Object)var27);
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var35 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(0);
    int var36 = var35.size();
    boolean var37 = var35.isEmpty();
    boolean var38 = var35.isEmpty();
    boolean var39 = var35.isEmpty();
    var27.enqueue((java.lang.Object)var35);
    java.util.Iterator var41 = var27.iterator();
    boolean var42 = var27.isEmpty();
    var6.enqueue((java.lang.Object)var42);
    java.lang.Object var44 = var6.dequeue();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var24 + "' != '" + '#'+ "'", var24.equals('#'));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var44 + "' != '" + false+ "'", var44.equals(false));

  }

  public void test144() throws Throwable {

    if (debug) System.out.printf("%nRingBufferMutantTest1.test144");


    at.fhhagenberg.sqe.exercise13.RingBufferMutant var1 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var1.enqueue((java.lang.Object)'#');
    var1.enqueue((java.lang.Object)' ');
    int var6 = var1.size();
    java.util.Iterator var7 = var1.iterator();
    boolean var8 = var1.isEmpty();
    java.util.Iterator var9 = var1.iterator();
    int var10 = var1.size();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var12 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var12.enqueue((java.lang.Object)'#');
    int var15 = var12.size();
    var12.enqueue((java.lang.Object)true);
    var1.enqueue((java.lang.Object)true);
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var20 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var20.enqueue((java.lang.Object)'#');
    java.util.Iterator var23 = var20.iterator();
    java.util.Iterator var24 = var20.iterator();
    var20.enqueue((java.lang.Object)false);
    int var27 = var20.size();
    boolean var28 = var20.isEmpty();
    boolean var29 = var20.isEmpty();
    boolean var30 = var20.isEmpty();
    int var31 = var20.size();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var33 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var34 = var33.isEmpty();
    boolean var35 = var33.isEmpty();
    java.util.Iterator var36 = var33.iterator();
    boolean var37 = var33.isEmpty();
    int var38 = var33.size();
    int var39 = var33.size();
    var20.enqueue((java.lang.Object)var33);
    var1.enqueue((java.lang.Object)var20);
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var43 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var43.enqueue((java.lang.Object)'#');
    int var46 = var43.size();
    java.lang.Object var47 = var43.dequeue();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var49 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var49.enqueue((java.lang.Object)'#');
    var49.enqueue((java.lang.Object)' ');
    int var54 = var49.size();
    int var55 = var49.size();
    java.util.Iterator var56 = var49.iterator();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var58 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(0);
    java.util.Iterator var59 = var58.iterator();
    var49.enqueue((java.lang.Object)var59);
    var43.enqueue((java.lang.Object)var49);
    boolean var62 = var49.isEmpty();
    boolean var63 = var49.isEmpty();
    java.lang.Object var64 = var49.dequeue();
    var20.enqueue((java.lang.Object)var49);
    java.lang.Object var66 = var20.dequeue();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var47 + "' != '" + '#'+ "'", var47.equals('#'));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var64 + "' != '" + '#'+ "'", var64.equals('#'));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var66 + "' != '" + '#'+ "'", var66.equals('#'));

  }

  public void test145() throws Throwable {

    if (debug) System.out.printf("%nRingBufferMutantTest1.test145");


    at.fhhagenberg.sqe.exercise13.RingBufferMutant var1 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var1.enqueue((java.lang.Object)1.0d);
    java.util.Iterator var4 = var1.iterator();
    boolean var5 = var1.isEmpty();
    boolean var6 = var1.isEmpty();
    java.util.Iterator var7 = var1.iterator();
    int var8 = var1.size();
    java.util.Iterator var9 = var1.iterator();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);

  }

  public void test146() throws Throwable {

    if (debug) System.out.printf("%nRingBufferMutantTest1.test146");


    at.fhhagenberg.sqe.exercise13.RingBufferMutant var1 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var2 = var1.isEmpty();
    boolean var3 = var1.isEmpty();
    int var4 = var1.size();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var6 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var7 = var6.isEmpty();
    boolean var8 = var6.isEmpty();
    var1.enqueue((java.lang.Object)var8);
    boolean var10 = var1.isEmpty();
    java.util.Iterator var11 = var1.iterator();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);

  }

  public void test147() throws Throwable {

    if (debug) System.out.printf("%nRingBufferMutantTest1.test147");


    at.fhhagenberg.sqe.exercise13.RingBufferMutant var1 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var2 = var1.isEmpty();
    boolean var3 = var1.isEmpty();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var5 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var5.enqueue((java.lang.Object)'#');
    java.util.Iterator var8 = var5.iterator();
    java.util.Iterator var9 = var5.iterator();
    var5.enqueue((java.lang.Object)false);
    int var12 = var5.size();
    boolean var13 = var5.isEmpty();
    java.lang.Object var14 = var5.dequeue();
    java.util.Iterator var15 = var5.iterator();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var17 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var17.enqueue((java.lang.Object)'#');
    java.util.Iterator var20 = var17.iterator();
    java.util.Iterator var21 = var17.iterator();
    java.util.Iterator var22 = var17.iterator();
    var5.enqueue((java.lang.Object)var17);
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var25 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(0);
    int var26 = var25.size();
    boolean var27 = var25.isEmpty();
    boolean var28 = var25.isEmpty();
    boolean var29 = var25.isEmpty();
    var17.enqueue((java.lang.Object)var25);
    var1.enqueue((java.lang.Object)var25);
    java.util.Iterator var32 = var25.iterator();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + '#'+ "'", var14.equals('#'));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);

  }

  public void test148() throws Throwable {

    if (debug) System.out.printf("%nRingBufferMutantTest1.test148");


    at.fhhagenberg.sqe.exercise13.RingBufferMutant var1 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(5);
    int var2 = var1.size();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 0);

  }

  public void test149() throws Throwable {

    if (debug) System.out.printf("%nRingBufferMutantTest1.test149");


    at.fhhagenberg.sqe.exercise13.RingBufferMutant var1 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var1.enqueue((java.lang.Object)'#');
    var1.enqueue((java.lang.Object)' ');
    int var6 = var1.size();
    var1.enqueue((java.lang.Object)1);
    boolean var9 = var1.isEmpty();
    java.util.Iterator var10 = var1.iterator();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var12 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var13 = var12.isEmpty();
    boolean var14 = var12.isEmpty();
    boolean var15 = var12.isEmpty();
    int var16 = var12.size();
    int var17 = var12.size();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var19 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var20 = var19.isEmpty();
    boolean var21 = var19.isEmpty();
    java.util.Iterator var22 = var19.iterator();
    boolean var23 = var19.isEmpty();
    int var24 = var19.size();
    java.util.Iterator var25 = var19.iterator();
    int var26 = var19.size();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var28 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var28.enqueue((java.lang.Object)'#');
    java.util.Iterator var31 = var28.iterator();
    java.util.Iterator var32 = var28.iterator();
    var28.enqueue((java.lang.Object)false);
    java.lang.Object var35 = var28.dequeue();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var37 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var38 = var37.isEmpty();
    boolean var39 = var37.isEmpty();
    java.util.Iterator var40 = var37.iterator();
    boolean var41 = var37.isEmpty();
    var37.enqueue((java.lang.Object)'#');
    boolean var44 = var37.isEmpty();
    int var45 = var37.size();
    java.util.Iterator var46 = var37.iterator();
    var28.enqueue((java.lang.Object)var37);
    int var48 = var37.size();
    int var49 = var37.size();
    var19.enqueue((java.lang.Object)var37);
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var52 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var53 = var52.isEmpty();
    boolean var54 = var52.isEmpty();
    int var55 = var52.size();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var57 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var58 = var57.isEmpty();
    boolean var59 = var57.isEmpty();
    var52.enqueue((java.lang.Object)var59);
    boolean var61 = var52.isEmpty();
    var37.enqueue((java.lang.Object)var61);
    boolean var63 = var37.isEmpty();
    var12.enqueue((java.lang.Object)var37);
    var1.enqueue((java.lang.Object)var12);
    int var66 = var1.size();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var35 + "' != '" + '#'+ "'", var35.equals('#'));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == 4);

  }

  public void test150() throws Throwable {

    if (debug) System.out.printf("%nRingBufferMutantTest1.test150");


    at.fhhagenberg.sqe.exercise13.RingBufferMutant var1 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var1.enqueue((java.lang.Object)'#');
    java.util.Iterator var4 = var1.iterator();
    java.util.Iterator var5 = var1.iterator();
    var1.enqueue((java.lang.Object)false);
    int var8 = var1.size();
    boolean var9 = var1.isEmpty();
    boolean var10 = var1.isEmpty();
    var1.enqueue((java.lang.Object)(short)0);
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var14 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var14.enqueue((java.lang.Object)'#');
    java.util.Iterator var17 = var14.iterator();
    java.util.Iterator var18 = var14.iterator();
    java.util.Iterator var19 = var14.iterator();
    boolean var20 = var14.isEmpty();
    java.util.Iterator var21 = var14.iterator();
    boolean var22 = var14.isEmpty();
    var1.enqueue((java.lang.Object)var22);
    java.lang.Object var24 = var1.dequeue();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var26 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var27 = var26.isEmpty();
    boolean var28 = var26.isEmpty();
    java.util.Iterator var29 = var26.iterator();
    boolean var30 = var26.isEmpty();
    int var31 = var26.size();
    int var32 = var26.size();
    java.util.Iterator var33 = var26.iterator();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var35 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var35.enqueue((java.lang.Object)'#');
    java.util.Iterator var38 = var35.iterator();
    java.util.Iterator var39 = var35.iterator();
    java.util.Iterator var40 = var35.iterator();
    var26.enqueue((java.lang.Object)var35);
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var43 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var43.enqueue((java.lang.Object)'#');
    java.util.Iterator var46 = var43.iterator();
    java.util.Iterator var47 = var43.iterator();
    var43.enqueue((java.lang.Object)false);
    int var50 = var43.size();
    boolean var51 = var43.isEmpty();
    boolean var52 = var43.isEmpty();
    boolean var53 = var43.isEmpty();
    int var54 = var43.size();
    boolean var55 = var43.isEmpty();
    var26.enqueue((java.lang.Object)var55);
    int var57 = var26.size();
    var1.enqueue((java.lang.Object)var26);
    java.util.Iterator var59 = var26.iterator();
    java.util.Iterator var60 = var26.iterator();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var24 + "' != '" + '#'+ "'", var24.equals('#'));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);

  }

  public void test151() throws Throwable {

    if (debug) System.out.printf("%nRingBufferMutantTest1.test151");


    at.fhhagenberg.sqe.exercise13.RingBufferMutant var1 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var1.enqueue((java.lang.Object)1.0d);
    java.util.Iterator var4 = var1.iterator();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var6 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(1);
    boolean var7 = var6.isEmpty();
    boolean var8 = var6.isEmpty();
    java.util.Iterator var9 = var6.iterator();
    var1.enqueue((java.lang.Object)var6);
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var12 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var12.enqueue((java.lang.Object)'#');
    java.util.Iterator var15 = var12.iterator();
    java.util.Iterator var16 = var12.iterator();
    var12.enqueue((java.lang.Object)false);
    int var19 = var12.size();
    boolean var20 = var12.isEmpty();
    boolean var21 = var12.isEmpty();
    boolean var22 = var12.isEmpty();
    java.lang.Object var23 = var12.dequeue();
    java.util.Iterator var24 = var12.iterator();
    var1.enqueue((java.lang.Object)var12);
    boolean var26 = var1.isEmpty();
    boolean var27 = var1.isEmpty();
    java.util.Iterator var28 = var1.iterator();
    java.lang.Object var29 = var1.dequeue();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + '#'+ "'", var23.equals('#'));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var29 + "' != '" + 1.0d+ "'", var29.equals(1.0d));

  }

  public void test152() throws Throwable {

    if (debug) System.out.printf("%nRingBufferMutantTest1.test152");


    at.fhhagenberg.sqe.exercise13.RingBufferMutant var1 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var1.enqueue((java.lang.Object)1.0d);
    java.util.Iterator var4 = var1.iterator();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var6 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(1);
    boolean var7 = var6.isEmpty();
    boolean var8 = var6.isEmpty();
    java.util.Iterator var9 = var6.iterator();
    var1.enqueue((java.lang.Object)var6);
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var12 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var12.enqueue((java.lang.Object)'#');
    java.util.Iterator var15 = var12.iterator();
    java.util.Iterator var16 = var12.iterator();
    var12.enqueue((java.lang.Object)false);
    int var19 = var12.size();
    boolean var20 = var12.isEmpty();
    boolean var21 = var12.isEmpty();
    boolean var22 = var12.isEmpty();
    java.lang.Object var23 = var12.dequeue();
    java.util.Iterator var24 = var12.iterator();
    var1.enqueue((java.lang.Object)var12);
    boolean var26 = var1.isEmpty();
    boolean var27 = var1.isEmpty();
    boolean var28 = var1.isEmpty();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var30 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(2);
    java.util.Iterator var31 = var30.iterator();
    java.util.Iterator var32 = var30.iterator();
    var1.enqueue((java.lang.Object)var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + '#'+ "'", var23.equals('#'));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);

  }

  public void test153() throws Throwable {

    if (debug) System.out.printf("%nRingBufferMutantTest1.test153");


    at.fhhagenberg.sqe.exercise13.RingBufferMutant var1 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var1.enqueue((java.lang.Object)'#');
    java.util.Iterator var4 = var1.iterator();
    java.util.Iterator var5 = var1.iterator();
    var1.enqueue((java.lang.Object)false);
    int var8 = var1.size();
    boolean var9 = var1.isEmpty();
    boolean var10 = var1.isEmpty();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var12 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var12.enqueue((java.lang.Object)'#');
    int var15 = var12.size();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var17 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var18 = var17.isEmpty();
    boolean var19 = var17.isEmpty();
    java.util.Iterator var20 = var17.iterator();
    boolean var21 = var17.isEmpty();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var23 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var23.enqueue((java.lang.Object)'#');
    java.util.Iterator var26 = var23.iterator();
    java.util.Iterator var27 = var23.iterator();
    var23.enqueue((java.lang.Object)false);
    int var30 = var23.size();
    var17.enqueue((java.lang.Object)var23);
    var12.enqueue((java.lang.Object)var23);
    java.util.Iterator var33 = var23.iterator();
    var1.enqueue((java.lang.Object)var23);
    var23.enqueue((java.lang.Object)false);
    java.util.Iterator var37 = var23.iterator();
    boolean var38 = var23.isEmpty();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);

  }

  public void test154() throws Throwable {

    if (debug) System.out.printf("%nRingBufferMutantTest1.test154");


    at.fhhagenberg.sqe.exercise13.RingBufferMutant var1 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var1.enqueue((java.lang.Object)'#');
    var1.enqueue((java.lang.Object)' ');
    int var6 = var1.size();
    java.util.Iterator var7 = var1.iterator();
    boolean var8 = var1.isEmpty();
    java.util.Iterator var9 = var1.iterator();
    int var10 = var1.size();
    int var11 = var1.size();
    int var12 = var1.size();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 2);

  }

  public void test155() throws Throwable {

    if (debug) System.out.printf("%nRingBufferMutantTest1.test155");


    at.fhhagenberg.sqe.exercise13.RingBufferMutant var1 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var1.enqueue((java.lang.Object)'#');
    var1.enqueue((java.lang.Object)' ');
    var1.enqueue((java.lang.Object)10.0f);
    java.util.Iterator var8 = var1.iterator();
    int var9 = var1.size();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 3);

  }

  public void test156() throws Throwable {

    if (debug) System.out.printf("%nRingBufferMutantTest1.test156");


    at.fhhagenberg.sqe.exercise13.RingBufferMutant var1 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var2 = var1.isEmpty();
    boolean var3 = var1.isEmpty();
    java.util.Iterator var4 = var1.iterator();
    boolean var5 = var1.isEmpty();
    var1.enqueue((java.lang.Object)1.0d);
    java.util.Iterator var8 = var1.iterator();
    java.util.Iterator var9 = var1.iterator();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var11 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var11.enqueue((java.lang.Object)'#');
    java.util.Iterator var14 = var11.iterator();
    java.util.Iterator var15 = var11.iterator();
    var11.enqueue((java.lang.Object)false);
    int var18 = var11.size();
    boolean var19 = var11.isEmpty();
    int var20 = var11.size();
    java.lang.Object var21 = new java.lang.Object();
    var11.enqueue(var21);
    var1.enqueue(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 2);

  }

  public void test157() throws Throwable {

    if (debug) System.out.printf("%nRingBufferMutantTest1.test157");


    at.fhhagenberg.sqe.exercise13.RingBufferMutant var1 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var2 = var1.isEmpty();
    boolean var3 = var1.isEmpty();
    java.util.Iterator var4 = var1.iterator();
    boolean var5 = var1.isEmpty();
    int var6 = var1.size();
    int var7 = var1.size();
    java.util.Iterator var8 = var1.iterator();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var10 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var10.enqueue((java.lang.Object)'#');
    java.util.Iterator var13 = var10.iterator();
    java.util.Iterator var14 = var10.iterator();
    java.util.Iterator var15 = var10.iterator();
    var1.enqueue((java.lang.Object)var10);
    int var17 = var10.size();
    boolean var18 = var10.isEmpty();
    boolean var19 = var10.isEmpty();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var21 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var22 = var21.isEmpty();
    boolean var23 = var21.isEmpty();
    java.util.Iterator var24 = var21.iterator();
    boolean var25 = var21.isEmpty();
    var21.enqueue((java.lang.Object)'#');
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var29 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var30 = var29.isEmpty();
    boolean var31 = var29.isEmpty();
    java.util.Iterator var32 = var29.iterator();
    boolean var33 = var29.isEmpty();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var35 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var35.enqueue((java.lang.Object)'#');
    java.util.Iterator var38 = var35.iterator();
    java.util.Iterator var39 = var35.iterator();
    var35.enqueue((java.lang.Object)false);
    int var42 = var35.size();
    var29.enqueue((java.lang.Object)var35);
    int var44 = var29.size();
    var21.enqueue((java.lang.Object)var44);
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var47 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var47.enqueue((java.lang.Object)'#');
    java.util.Iterator var50 = var47.iterator();
    java.util.Iterator var51 = var47.iterator();
    var47.enqueue((java.lang.Object)false);
    java.lang.Object var54 = var47.dequeue();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var56 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var57 = var56.isEmpty();
    boolean var58 = var56.isEmpty();
    java.util.Iterator var59 = var56.iterator();
    boolean var60 = var56.isEmpty();
    var56.enqueue((java.lang.Object)'#');
    boolean var63 = var56.isEmpty();
    int var64 = var56.size();
    java.util.Iterator var65 = var56.iterator();
    var47.enqueue((java.lang.Object)var56);
    var56.enqueue((java.lang.Object)100);
    var21.enqueue((java.lang.Object)var56);
    var10.enqueue((java.lang.Object)var56);
    java.util.Iterator var71 = var56.iterator();
    int var72 = var56.size();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var54 + "' != '" + '#'+ "'", var54.equals('#'));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == 2);

  }

  public void test158() throws Throwable {

    if (debug) System.out.printf("%nRingBufferMutantTest1.test158");


    at.fhhagenberg.sqe.exercise13.RingBufferMutant var1 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var1.enqueue((java.lang.Object)'#');
    java.util.Iterator var4 = var1.iterator();
    java.util.Iterator var5 = var1.iterator();
    var1.enqueue((java.lang.Object)false);
    java.lang.Object var8 = var1.dequeue();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var10 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var10.enqueue((java.lang.Object)'#');
    java.util.Iterator var13 = var10.iterator();
    java.util.Iterator var14 = var10.iterator();
    var10.enqueue((java.lang.Object)false);
    int var17 = var10.size();
    boolean var18 = var10.isEmpty();
    java.util.Iterator var19 = var10.iterator();
    var1.enqueue((java.lang.Object)var10);
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var22 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var22.enqueue((java.lang.Object)'#');
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var26 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var26.enqueue((java.lang.Object)'#');
    java.util.Iterator var29 = var26.iterator();
    java.util.Iterator var30 = var26.iterator();
    var26.enqueue((java.lang.Object)false);
    int var33 = var26.size();
    boolean var34 = var26.isEmpty();
    java.lang.Object var35 = var26.dequeue();
    java.util.Iterator var36 = var26.iterator();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var38 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var38.enqueue((java.lang.Object)'#');
    java.util.Iterator var41 = var38.iterator();
    java.util.Iterator var42 = var38.iterator();
    java.util.Iterator var43 = var38.iterator();
    var26.enqueue((java.lang.Object)var38);
    var22.enqueue((java.lang.Object)var38);
    java.util.Iterator var46 = var38.iterator();
    boolean var47 = var38.isEmpty();
    boolean var48 = var38.isEmpty();
    int var49 = var38.size();
    var10.enqueue((java.lang.Object)var38);
    boolean var51 = var38.isEmpty();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + '#'+ "'", var8.equals('#'));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var35 + "' != '" + '#'+ "'", var35.equals('#'));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);

  }

  public void test159() throws Throwable {

    if (debug) System.out.printf("%nRingBufferMutantTest1.test159");


    at.fhhagenberg.sqe.exercise13.RingBufferMutant var1 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var2 = var1.isEmpty();
    boolean var3 = var1.isEmpty();
    java.util.Iterator var4 = var1.iterator();
    boolean var5 = var1.isEmpty();
    var1.enqueue((java.lang.Object)'#');
    boolean var8 = var1.isEmpty();
    int var9 = var1.size();
    java.util.Iterator var10 = var1.iterator();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var12 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var12.enqueue((java.lang.Object)'#');
    java.util.Iterator var15 = var12.iterator();
    var12.enqueue((java.lang.Object)100.0d);
    boolean var18 = var12.isEmpty();
    java.lang.Object var19 = var12.dequeue();
    var1.enqueue(var19);
    java.util.Iterator var21 = var1.iterator();
    java.util.Iterator var22 = var1.iterator();
    int var23 = var1.size();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + '#'+ "'", var19.equals('#'));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 2);

  }

  public void test160() throws Throwable {

    if (debug) System.out.printf("%nRingBufferMutantTest1.test160");


    at.fhhagenberg.sqe.exercise13.RingBufferMutant var1 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var1.enqueue((java.lang.Object)'#');
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var5 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var5.enqueue((java.lang.Object)'#');
    java.util.Iterator var8 = var5.iterator();
    java.util.Iterator var9 = var5.iterator();
    var5.enqueue((java.lang.Object)false);
    int var12 = var5.size();
    boolean var13 = var5.isEmpty();
    java.lang.Object var14 = var5.dequeue();
    java.util.Iterator var15 = var5.iterator();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var17 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var17.enqueue((java.lang.Object)'#');
    java.util.Iterator var20 = var17.iterator();
    java.util.Iterator var21 = var17.iterator();
    java.util.Iterator var22 = var17.iterator();
    var5.enqueue((java.lang.Object)var17);
    var1.enqueue((java.lang.Object)var17);
    java.lang.Object var25 = var1.dequeue();
    java.util.Iterator var26 = var1.iterator();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + '#'+ "'", var14.equals('#'));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var25 + "' != '" + '#'+ "'", var25.equals('#'));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);

  }

  public void test161() throws Throwable {

    if (debug) System.out.printf("%nRingBufferMutantTest1.test161");


    at.fhhagenberg.sqe.exercise13.RingBufferMutant var1 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var1.enqueue((java.lang.Object)'#');
    java.util.Iterator var4 = var1.iterator();
    java.util.Iterator var5 = var1.iterator();
    java.util.Iterator var6 = var1.iterator();
    boolean var7 = var1.isEmpty();
    java.util.Iterator var8 = var1.iterator();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var10 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var11 = var10.isEmpty();
    boolean var12 = var10.isEmpty();
    java.util.Iterator var13 = var10.iterator();
    boolean var14 = var10.isEmpty();
    int var15 = var10.size();
    int var16 = var10.size();
    java.util.Iterator var17 = var10.iterator();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var19 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var19.enqueue((java.lang.Object)'#');
    java.util.Iterator var22 = var19.iterator();
    java.util.Iterator var23 = var19.iterator();
    java.util.Iterator var24 = var19.iterator();
    var10.enqueue((java.lang.Object)var19);
    java.util.Iterator var26 = var10.iterator();
    java.util.Iterator var27 = var10.iterator();
    java.lang.Object var28 = var10.dequeue();
    var1.enqueue((java.lang.Object)var10);
    boolean var30 = var1.isEmpty();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);

  }

  public void test162() throws Throwable {

    if (debug) System.out.printf("%nRingBufferMutantTest1.test162");


    at.fhhagenberg.sqe.exercise13.RingBufferMutant var1 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var1.enqueue((java.lang.Object)'#');
    java.util.Iterator var4 = var1.iterator();
    java.util.Iterator var5 = var1.iterator();
    var1.enqueue((java.lang.Object)false);
    int var8 = var1.size();
    boolean var9 = var1.isEmpty();
    boolean var10 = var1.isEmpty();
    boolean var11 = var1.isEmpty();
    int var12 = var1.size();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var14 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(100);
    int var15 = var14.size();
    java.util.Iterator var16 = var14.iterator();
    var1.enqueue((java.lang.Object)var14);
    boolean var18 = var1.isEmpty();
    int var19 = var1.size();
    java.util.Iterator var20 = var1.iterator();
    java.util.Iterator var21 = var1.iterator();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);

  }

  public void test163() throws Throwable {

    if (debug) System.out.printf("%nRingBufferMutantTest1.test163");


    at.fhhagenberg.sqe.exercise13.RingBufferMutant var1 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var2 = var1.isEmpty();
    boolean var3 = var1.isEmpty();
    int var4 = var1.size();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var6 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var7 = var6.isEmpty();
    boolean var8 = var6.isEmpty();
    var1.enqueue((java.lang.Object)var8);
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var11 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var11.enqueue((java.lang.Object)'#');
    int var14 = var11.size();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var16 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var17 = var16.isEmpty();
    boolean var18 = var16.isEmpty();
    java.util.Iterator var19 = var16.iterator();
    boolean var20 = var16.isEmpty();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var22 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var22.enqueue((java.lang.Object)'#');
    java.util.Iterator var25 = var22.iterator();
    java.util.Iterator var26 = var22.iterator();
    var22.enqueue((java.lang.Object)false);
    int var29 = var22.size();
    var16.enqueue((java.lang.Object)var22);
    var11.enqueue((java.lang.Object)var22);
    java.util.Iterator var32 = var22.iterator();
    java.util.Iterator var33 = var22.iterator();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var35 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var36 = var35.isEmpty();
    boolean var37 = var35.isEmpty();
    java.util.Iterator var38 = var35.iterator();
    boolean var39 = var35.isEmpty();
    var35.enqueue((java.lang.Object)'#');
    int var42 = var35.size();
    var22.enqueue((java.lang.Object)var42);
    boolean var44 = var22.isEmpty();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var46 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var46.enqueue((java.lang.Object)'#');
    int var49 = var46.size();
    int var50 = var46.size();
    java.util.Iterator var51 = var46.iterator();
    java.util.Iterator var52 = var46.iterator();
    var22.enqueue((java.lang.Object)var46);
    java.util.Iterator var54 = var22.iterator();
    var1.enqueue((java.lang.Object)var22);
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var57 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var58 = var57.isEmpty();
    boolean var59 = var57.isEmpty();
    java.util.Iterator var60 = var57.iterator();
    boolean var61 = var57.isEmpty();
    int var62 = var57.size();
    int var63 = var57.size();
    java.util.Iterator var64 = var57.iterator();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var66 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var66.enqueue((java.lang.Object)'#');
    java.util.Iterator var69 = var66.iterator();
    java.util.Iterator var70 = var66.iterator();
    java.util.Iterator var71 = var66.iterator();
    var57.enqueue((java.lang.Object)var66);
    int var73 = var66.size();
    boolean var74 = var66.isEmpty();
    java.util.Iterator var75 = var66.iterator();
    var22.enqueue((java.lang.Object)var75);
    java.util.Iterator var77 = var22.iterator();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);

  }

  public void test164() throws Throwable {

    if (debug) System.out.printf("%nRingBufferMutantTest1.test164");


    at.fhhagenberg.sqe.exercise13.RingBufferMutant var1 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(100);
    int var2 = var1.size();
    int var3 = var1.size();
    boolean var4 = var1.isEmpty();
    boolean var5 = var1.isEmpty();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var7 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var7.enqueue((java.lang.Object)'#');
    int var10 = var7.size();
    java.lang.Object var11 = var7.dequeue();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var13 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(0);
    int var14 = var13.size();
    var7.enqueue((java.lang.Object)var14);
    var1.enqueue((java.lang.Object)var14);
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var18 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var18.enqueue((java.lang.Object)'#');
    java.util.Iterator var21 = var18.iterator();
    java.util.Iterator var22 = var18.iterator();
    boolean var23 = var18.isEmpty();
    int var24 = var18.size();
    var18.enqueue((java.lang.Object)1.0d);
    boolean var27 = var18.isEmpty();
    int var28 = var18.size();
    java.util.Iterator var29 = var18.iterator();
    java.lang.Object var30 = var18.dequeue();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var32 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var33 = var32.isEmpty();
    boolean var34 = var32.isEmpty();
    java.util.Iterator var35 = var32.iterator();
    boolean var36 = var32.isEmpty();
    var32.enqueue((java.lang.Object)'#');
    java.util.Iterator var39 = var32.iterator();
    boolean var40 = var32.isEmpty();
    java.util.Iterator var41 = var32.iterator();
    var18.enqueue((java.lang.Object)var41);
    java.util.Iterator var43 = var18.iterator();
    var1.enqueue((java.lang.Object)var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + '#'+ "'", var11.equals('#'));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var30 + "' != '" + '#'+ "'", var30.equals('#'));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);

  }

  public void test165() throws Throwable {

    if (debug) System.out.printf("%nRingBufferMutantTest1.test165");


    at.fhhagenberg.sqe.exercise13.RingBufferMutant var1 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var2 = var1.isEmpty();
    boolean var3 = var1.isEmpty();
    int var4 = var1.size();
    java.util.Iterator var5 = var1.iterator();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var7 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var7.enqueue((java.lang.Object)'#');
    int var10 = var7.size();
    var7.enqueue((java.lang.Object)true);
    java.util.Iterator var13 = var7.iterator();
    var1.enqueue((java.lang.Object)var13);
    java.util.Iterator var15 = var1.iterator();
    int var16 = var1.size();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var18 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var19 = var18.isEmpty();
    boolean var20 = var18.isEmpty();
    int var21 = var18.size();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var23 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var24 = var23.isEmpty();
    boolean var25 = var23.isEmpty();
    var18.enqueue((java.lang.Object)var25);
    boolean var27 = var18.isEmpty();
    var1.enqueue((java.lang.Object)var27);
    java.util.Iterator var29 = var1.iterator();
    int var30 = var1.size();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var32 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var32.enqueue((java.lang.Object)'#');
    java.util.Iterator var35 = var32.iterator();
    java.util.Iterator var36 = var32.iterator();
    var32.enqueue((java.lang.Object)false);
    int var39 = var32.size();
    boolean var40 = var32.isEmpty();
    java.lang.Object var41 = var32.dequeue();
    java.util.Iterator var42 = var32.iterator();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var44 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var44.enqueue((java.lang.Object)'#');
    java.util.Iterator var47 = var44.iterator();
    java.util.Iterator var48 = var44.iterator();
    java.util.Iterator var49 = var44.iterator();
    var32.enqueue((java.lang.Object)var44);
    var44.enqueue((java.lang.Object)(-1.0d));
    java.lang.Object var53 = var44.dequeue();
    var1.enqueue((java.lang.Object)var44);
    java.util.Iterator var55 = var44.iterator();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var41 + "' != '" + '#'+ "'", var41.equals('#'));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var53 + "' != '" + '#'+ "'", var53.equals('#'));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);

  }

  public void test166() throws Throwable {

    if (debug) System.out.printf("%nRingBufferMutantTest1.test166");


    at.fhhagenberg.sqe.exercise13.RingBufferMutant var1 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var1.enqueue((java.lang.Object)'#');
    java.util.Iterator var4 = var1.iterator();
    var1.enqueue((java.lang.Object)100.0d);
    java.util.Iterator var7 = var1.iterator();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var9 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var9.enqueue((java.lang.Object)'#');
    java.util.Iterator var12 = var9.iterator();
    java.util.Iterator var13 = var9.iterator();
    var9.enqueue((java.lang.Object)false);
    java.lang.Object var16 = var9.dequeue();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var18 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var19 = var18.isEmpty();
    boolean var20 = var18.isEmpty();
    java.util.Iterator var21 = var18.iterator();
    boolean var22 = var18.isEmpty();
    var18.enqueue((java.lang.Object)'#');
    boolean var25 = var18.isEmpty();
    int var26 = var18.size();
    java.util.Iterator var27 = var18.iterator();
    var9.enqueue((java.lang.Object)var18);
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var30 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var30.enqueue((java.lang.Object)'#');
    java.util.Iterator var33 = var30.iterator();
    java.util.Iterator var34 = var30.iterator();
    java.util.Iterator var35 = var30.iterator();
    boolean var36 = var30.isEmpty();
    int var37 = var30.size();
    var9.enqueue((java.lang.Object)var37);
    var1.enqueue((java.lang.Object)var9);
    boolean var40 = var1.isEmpty();
    boolean var41 = var1.isEmpty();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + '#'+ "'", var16.equals('#'));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);

  }

  public void test167() throws Throwable {

    if (debug) System.out.printf("%nRingBufferMutantTest1.test167");


    at.fhhagenberg.sqe.exercise13.RingBufferMutant var1 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var1.enqueue((java.lang.Object)'#');
    var1.enqueue((java.lang.Object)' ');
    int var6 = var1.size();
    int var7 = var1.size();
    java.util.Iterator var8 = var1.iterator();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var10 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(0);
    java.util.Iterator var11 = var10.iterator();
    var1.enqueue((java.lang.Object)var11);
    boolean var13 = var1.isEmpty();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var15 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(1);
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var17 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var17.enqueue((java.lang.Object)'#');
    java.util.Iterator var20 = var17.iterator();
    java.util.Iterator var21 = var17.iterator();
    var17.enqueue((java.lang.Object)false);
    int var24 = var17.size();
    boolean var25 = var17.isEmpty();
    int var26 = var17.size();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var28 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var28.enqueue((java.lang.Object)'#');
    java.util.Iterator var31 = var28.iterator();
    java.util.Iterator var32 = var28.iterator();
    var28.enqueue((java.lang.Object)false);
    java.lang.Object var35 = var28.dequeue();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var37 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var38 = var37.isEmpty();
    boolean var39 = var37.isEmpty();
    java.util.Iterator var40 = var37.iterator();
    boolean var41 = var37.isEmpty();
    var37.enqueue((java.lang.Object)'#');
    boolean var44 = var37.isEmpty();
    int var45 = var37.size();
    java.util.Iterator var46 = var37.iterator();
    var28.enqueue((java.lang.Object)var37);
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var49 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var49.enqueue((java.lang.Object)'#');
    java.util.Iterator var52 = var49.iterator();
    java.util.Iterator var53 = var49.iterator();
    java.util.Iterator var54 = var49.iterator();
    boolean var55 = var49.isEmpty();
    int var56 = var49.size();
    var28.enqueue((java.lang.Object)var56);
    var17.enqueue((java.lang.Object)var56);
    int var59 = var17.size();
    var15.enqueue((java.lang.Object)var59);
    var1.enqueue((java.lang.Object)var59);
    java.util.Iterator var62 = var1.iterator();
    boolean var63 = var1.isEmpty();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var35 + "' != '" + '#'+ "'", var35.equals('#'));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == false);

  }

  public void test168() throws Throwable {

    if (debug) System.out.printf("%nRingBufferMutantTest1.test168");


    at.fhhagenberg.sqe.exercise13.RingBufferMutant var1 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var1.enqueue((java.lang.Object)'#');
    java.util.Iterator var4 = var1.iterator();
    java.util.Iterator var5 = var1.iterator();
    var1.enqueue((java.lang.Object)false);
    java.lang.Object var8 = var1.dequeue();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var10 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var11 = var10.isEmpty();
    boolean var12 = var10.isEmpty();
    java.util.Iterator var13 = var10.iterator();
    boolean var14 = var10.isEmpty();
    var10.enqueue((java.lang.Object)'#');
    boolean var17 = var10.isEmpty();
    int var18 = var10.size();
    java.util.Iterator var19 = var10.iterator();
    var1.enqueue((java.lang.Object)var10);
    var10.enqueue((java.lang.Object)100);
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var24 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var24.enqueue((java.lang.Object)'#');
    java.util.Iterator var27 = var24.iterator();
    var24.enqueue((java.lang.Object)100.0d);
    java.util.Iterator var30 = var24.iterator();
    var10.enqueue((java.lang.Object)var24);
    java.lang.Object var32 = var24.dequeue();
    java.util.Iterator var33 = var24.iterator();
    java.util.Iterator var34 = var24.iterator();
    java.util.Iterator var35 = var24.iterator();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + '#'+ "'", var8.equals('#'));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var32 + "' != '" + '#'+ "'", var32.equals('#'));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);

  }

  public void test169() throws Throwable {

    if (debug) System.out.printf("%nRingBufferMutantTest1.test169");


    at.fhhagenberg.sqe.exercise13.RingBufferMutant var1 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var1.enqueue((java.lang.Object)'#');
    java.util.Iterator var4 = var1.iterator();
    java.util.Iterator var5 = var1.iterator();
    java.util.Iterator var6 = var1.iterator();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var8 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var8.enqueue((java.lang.Object)'#');
    java.util.Iterator var11 = var8.iterator();
    java.util.Iterator var12 = var8.iterator();
    java.util.Iterator var13 = var8.iterator();
    boolean var14 = var8.isEmpty();
    int var15 = var8.size();
    var1.enqueue((java.lang.Object)var15);
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var18 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(3);
    var1.enqueue((java.lang.Object)3);
    java.util.Iterator var20 = var1.iterator();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);

  }

  public void test170() throws Throwable {

    if (debug) System.out.printf("%nRingBufferMutantTest1.test170");


    at.fhhagenberg.sqe.exercise13.RingBufferMutant var1 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var1.enqueue((java.lang.Object)1.0d);
    java.util.Iterator var4 = var1.iterator();
    boolean var5 = var1.isEmpty();
    int var6 = var1.size();
    java.util.Iterator var7 = var1.iterator();
    boolean var8 = var1.isEmpty();
    boolean var9 = var1.isEmpty();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var11 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var11.enqueue((java.lang.Object)'#');
    var11.enqueue((java.lang.Object)' ');
    int var16 = var11.size();
    java.util.Iterator var17 = var11.iterator();
    boolean var18 = var11.isEmpty();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var20 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var21 = var20.isEmpty();
    boolean var22 = var20.isEmpty();
    java.util.Iterator var23 = var20.iterator();
    boolean var24 = var20.isEmpty();
    java.util.Iterator var25 = var20.iterator();
    int var26 = var20.size();
    var11.enqueue((java.lang.Object)var26);
    java.util.Iterator var28 = var11.iterator();
    var1.enqueue((java.lang.Object)var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);

  }

  public void test171() throws Throwable {

    if (debug) System.out.printf("%nRingBufferMutantTest1.test171");


    at.fhhagenberg.sqe.exercise13.RingBufferMutant var1 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var2 = var1.isEmpty();
    boolean var3 = var1.isEmpty();
    java.util.Iterator var4 = var1.iterator();
    boolean var5 = var1.isEmpty();
    int var6 = var1.size();
    int var7 = var1.size();
    boolean var8 = var1.isEmpty();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var10 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(100);
    int var11 = var10.size();
    int var12 = var10.size();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var14 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var14.enqueue((java.lang.Object)1.0d);
    java.util.Iterator var17 = var14.iterator();
    boolean var18 = var14.isEmpty();
    boolean var19 = var14.isEmpty();
    boolean var20 = var14.isEmpty();
    java.util.Iterator var21 = var14.iterator();
    var14.enqueue((java.lang.Object)(short)0);
    var10.enqueue((java.lang.Object)var14);
    var1.enqueue((java.lang.Object)var14);
    java.util.Iterator var26 = var14.iterator();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);

  }

  public void test172() throws Throwable {

    if (debug) System.out.printf("%nRingBufferMutantTest1.test172");


    at.fhhagenberg.sqe.exercise13.RingBufferMutant var1 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var1.enqueue((java.lang.Object)'#');
    int var4 = var1.size();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var6 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var7 = var6.isEmpty();
    boolean var8 = var6.isEmpty();
    java.util.Iterator var9 = var6.iterator();
    boolean var10 = var6.isEmpty();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var12 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var12.enqueue((java.lang.Object)'#');
    java.util.Iterator var15 = var12.iterator();
    java.util.Iterator var16 = var12.iterator();
    var12.enqueue((java.lang.Object)false);
    int var19 = var12.size();
    var6.enqueue((java.lang.Object)var12);
    var1.enqueue((java.lang.Object)var12);
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var23 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var23.enqueue((java.lang.Object)1.0d);
    java.util.Iterator var26 = var23.iterator();
    boolean var27 = var23.isEmpty();
    boolean var28 = var23.isEmpty();
    boolean var29 = var23.isEmpty();
    var1.enqueue((java.lang.Object)var23);
    int var31 = var1.size();
    java.lang.Object var32 = var1.dequeue();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var34 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var34.enqueue((java.lang.Object)'#');
    int var37 = var34.size();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var39 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var40 = var39.isEmpty();
    boolean var41 = var39.isEmpty();
    java.util.Iterator var42 = var39.iterator();
    boolean var43 = var39.isEmpty();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var45 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var45.enqueue((java.lang.Object)'#');
    java.util.Iterator var48 = var45.iterator();
    java.util.Iterator var49 = var45.iterator();
    var45.enqueue((java.lang.Object)false);
    int var52 = var45.size();
    var39.enqueue((java.lang.Object)var45);
    var34.enqueue((java.lang.Object)var45);
    java.util.Iterator var55 = var45.iterator();
    java.util.Iterator var56 = var45.iterator();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var58 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var59 = var58.isEmpty();
    boolean var60 = var58.isEmpty();
    java.util.Iterator var61 = var58.iterator();
    boolean var62 = var58.isEmpty();
    var58.enqueue((java.lang.Object)'#');
    int var65 = var58.size();
    var45.enqueue((java.lang.Object)var65);
    var1.enqueue((java.lang.Object)var45);
    java.util.Iterator var68 = var1.iterator();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var32 + "' != '" + '#'+ "'", var32.equals('#'));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);

  }

  public void test173() throws Throwable {

    if (debug) System.out.printf("%nRingBufferMutantTest1.test173");


    at.fhhagenberg.sqe.exercise13.RingBufferMutant var1 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var1.enqueue((java.lang.Object)'#');
    java.util.Iterator var4 = var1.iterator();
    java.util.Iterator var5 = var1.iterator();
    var1.enqueue((java.lang.Object)false);
    int var8 = var1.size();
    boolean var9 = var1.isEmpty();
    boolean var10 = var1.isEmpty();
    boolean var11 = var1.isEmpty();
    int var12 = var1.size();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var14 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(100);
    int var15 = var14.size();
    java.util.Iterator var16 = var14.iterator();
    var1.enqueue((java.lang.Object)var14);
    boolean var18 = var1.isEmpty();
    java.lang.Object var19 = var1.dequeue();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var21 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var21.enqueue((java.lang.Object)'#');
    var21.enqueue((java.lang.Object)' ');
    int var26 = var21.size();
    java.util.Iterator var27 = var21.iterator();
    boolean var28 = var21.isEmpty();
    java.util.Iterator var29 = var21.iterator();
    int var30 = var21.size();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var32 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var32.enqueue((java.lang.Object)'#');
    int var35 = var32.size();
    var32.enqueue((java.lang.Object)true);
    var21.enqueue((java.lang.Object)true);
    java.util.Iterator var39 = var21.iterator();
    var1.enqueue((java.lang.Object)var39);
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var42 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var42.enqueue((java.lang.Object)'#');
    int var45 = var42.size();
    var42.enqueue((java.lang.Object)true);
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var49 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var49.enqueue((java.lang.Object)'#');
    java.util.Iterator var52 = var49.iterator();
    java.util.Iterator var53 = var49.iterator();
    var49.enqueue((java.lang.Object)false);
    int var56 = var49.size();
    boolean var57 = var49.isEmpty();
    boolean var58 = var49.isEmpty();
    var49.enqueue((java.lang.Object)(short)0);
    var42.enqueue((java.lang.Object)(short)0);
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var63 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var63.enqueue((java.lang.Object)'#');
    java.util.Iterator var66 = var63.iterator();
    var63.enqueue((java.lang.Object)100.0d);
    java.util.Iterator var69 = var63.iterator();
    var42.enqueue((java.lang.Object)var63);
    java.lang.Object var71 = var42.dequeue();
    var1.enqueue(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + '#'+ "'", var19.equals('#'));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var71 + "' != '" + '#'+ "'", var71.equals('#'));

  }

  public void test174() throws Throwable {

    if (debug) System.out.printf("%nRingBufferMutantTest1.test174");


    at.fhhagenberg.sqe.exercise13.RingBufferMutant var1 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var1.enqueue((java.lang.Object)'#');
    java.util.Iterator var4 = var1.iterator();
    java.util.Iterator var5 = var1.iterator();
    var1.enqueue((java.lang.Object)false);
    int var8 = var1.size();
    boolean var9 = var1.isEmpty();
    boolean var10 = var1.isEmpty();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var12 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var12.enqueue((java.lang.Object)'#');
    int var15 = var12.size();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var17 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var18 = var17.isEmpty();
    boolean var19 = var17.isEmpty();
    java.util.Iterator var20 = var17.iterator();
    boolean var21 = var17.isEmpty();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var23 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var23.enqueue((java.lang.Object)'#');
    java.util.Iterator var26 = var23.iterator();
    java.util.Iterator var27 = var23.iterator();
    var23.enqueue((java.lang.Object)false);
    int var30 = var23.size();
    var17.enqueue((java.lang.Object)var23);
    var12.enqueue((java.lang.Object)var23);
    java.util.Iterator var33 = var23.iterator();
    var1.enqueue((java.lang.Object)var23);
    var23.enqueue((java.lang.Object)false);
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var38 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var39 = var38.isEmpty();
    boolean var40 = var38.isEmpty();
    java.util.Iterator var41 = var38.iterator();
    boolean var42 = var38.isEmpty();
    int var43 = var38.size();
    int var44 = var38.size();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var46 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var46.enqueue((java.lang.Object)'#');
    int var49 = var46.size();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var51 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var52 = var51.isEmpty();
    boolean var53 = var51.isEmpty();
    java.util.Iterator var54 = var51.iterator();
    boolean var55 = var51.isEmpty();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var57 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var57.enqueue((java.lang.Object)'#');
    java.util.Iterator var60 = var57.iterator();
    java.util.Iterator var61 = var57.iterator();
    var57.enqueue((java.lang.Object)false);
    int var64 = var57.size();
    var51.enqueue((java.lang.Object)var57);
    var46.enqueue((java.lang.Object)var57);
    java.util.Iterator var67 = var57.iterator();
    java.util.Iterator var68 = var57.iterator();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var70 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var71 = var70.isEmpty();
    boolean var72 = var70.isEmpty();
    java.util.Iterator var73 = var70.iterator();
    boolean var74 = var70.isEmpty();
    var70.enqueue((java.lang.Object)'#');
    int var77 = var70.size();
    var57.enqueue((java.lang.Object)var77);
    boolean var79 = var57.isEmpty();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var81 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var81.enqueue((java.lang.Object)'#');
    int var84 = var81.size();
    int var85 = var81.size();
    java.util.Iterator var86 = var81.iterator();
    java.util.Iterator var87 = var81.iterator();
    var57.enqueue((java.lang.Object)var81);
    var38.enqueue((java.lang.Object)var57);
    java.lang.Object var90 = var57.dequeue();
    var23.enqueue((java.lang.Object)var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var77 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var79 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var84 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var85 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var86);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var87);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var90 + "' != '" + '#'+ "'", var90.equals('#'));

  }

  public void test175() throws Throwable {

    if (debug) System.out.printf("%nRingBufferMutantTest1.test175");


    at.fhhagenberg.sqe.exercise13.RingBufferMutant var1 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var1.enqueue((java.lang.Object)1.0d);
    java.util.Iterator var4 = var1.iterator();
    boolean var5 = var1.isEmpty();
    int var6 = var1.size();
    java.util.Iterator var7 = var1.iterator();
    int var8 = var1.size();
    java.lang.Object var9 = var1.dequeue();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + 1.0d+ "'", var9.equals(1.0d));

  }

  public void test176() throws Throwable {

    if (debug) System.out.printf("%nRingBufferMutantTest1.test176");


    at.fhhagenberg.sqe.exercise13.RingBufferMutant var1 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var1.enqueue((java.lang.Object)'#');
    var1.enqueue((java.lang.Object)' ');
    int var6 = var1.size();
    java.util.Iterator var7 = var1.iterator();
    boolean var8 = var1.isEmpty();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var10 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var11 = var10.isEmpty();
    boolean var12 = var10.isEmpty();
    java.util.Iterator var13 = var10.iterator();
    boolean var14 = var10.isEmpty();
    java.util.Iterator var15 = var10.iterator();
    int var16 = var10.size();
    var1.enqueue((java.lang.Object)var16);
    java.util.Iterator var18 = var1.iterator();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var20 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var21 = var20.isEmpty();
    boolean var22 = var20.isEmpty();
    java.util.Iterator var23 = var20.iterator();
    boolean var24 = var20.isEmpty();
    int var25 = var20.size();
    int var26 = var20.size();
    java.util.Iterator var27 = var20.iterator();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var29 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var29.enqueue((java.lang.Object)'#');
    java.util.Iterator var32 = var29.iterator();
    java.util.Iterator var33 = var29.iterator();
    java.util.Iterator var34 = var29.iterator();
    var20.enqueue((java.lang.Object)var29);
    int var36 = var29.size();
    boolean var37 = var29.isEmpty();
    boolean var38 = var29.isEmpty();
    var1.enqueue((java.lang.Object)var29);
    java.util.Iterator var40 = var1.iterator();
    java.lang.Object var41 = var1.dequeue();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var41 + "' != '" + '#'+ "'", var41.equals('#'));

  }

  public void test177() throws Throwable {

    if (debug) System.out.printf("%nRingBufferMutantTest1.test177");


    at.fhhagenberg.sqe.exercise13.RingBufferMutant var1 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var2 = var1.isEmpty();
    boolean var3 = var1.isEmpty();
    java.util.Iterator var4 = var1.iterator();
    boolean var5 = var1.isEmpty();
    var1.enqueue((java.lang.Object)'#');
    boolean var8 = var1.isEmpty();
    int var9 = var1.size();
    java.util.Iterator var10 = var1.iterator();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var12 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var12.enqueue((java.lang.Object)'#');
    java.util.Iterator var15 = var12.iterator();
    var12.enqueue((java.lang.Object)100.0d);
    boolean var18 = var12.isEmpty();
    java.lang.Object var19 = var12.dequeue();
    var1.enqueue(var19);
    var1.enqueue((java.lang.Object)'4');
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var24 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var24.enqueue((java.lang.Object)'#');
    int var27 = var24.size();
    var24.enqueue((java.lang.Object)true);
    java.util.Iterator var30 = var24.iterator();
    var1.enqueue((java.lang.Object)var24);
    java.util.Iterator var32 = var24.iterator();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var34 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var34.enqueue((java.lang.Object)1.0d);
    java.util.Iterator var37 = var34.iterator();
    java.lang.Object var38 = var34.dequeue();
    java.util.Iterator var39 = var34.iterator();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var41 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var42 = var41.isEmpty();
    boolean var43 = var41.isEmpty();
    int var44 = var41.size();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var46 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var47 = var46.isEmpty();
    boolean var48 = var46.isEmpty();
    var41.enqueue((java.lang.Object)var48);
    boolean var50 = var41.isEmpty();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var52 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var52.enqueue((java.lang.Object)'#');
    java.util.Iterator var55 = var52.iterator();
    java.util.Iterator var56 = var52.iterator();
    java.util.Iterator var57 = var52.iterator();
    boolean var58 = var52.isEmpty();
    java.util.Iterator var59 = var52.iterator();
    int var60 = var52.size();
    int var61 = var52.size();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var63 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var63.enqueue((java.lang.Object)'#');
    int var66 = var63.size();
    var63.enqueue((java.lang.Object)true);
    java.util.Iterator var69 = var63.iterator();
    var52.enqueue((java.lang.Object)var63);
    java.util.Iterator var71 = var52.iterator();
    var41.enqueue((java.lang.Object)var52);
    var34.enqueue((java.lang.Object)var52);
    var24.enqueue((java.lang.Object)var34);
    java.util.Iterator var75 = var24.iterator();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + '#'+ "'", var19.equals('#'));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var38 + "' != '" + 1.0d+ "'", var38.equals(1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);

  }

  public void test178() throws Throwable {

    if (debug) System.out.printf("%nRingBufferMutantTest1.test178");


    at.fhhagenberg.sqe.exercise13.RingBufferMutant var1 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var1.enqueue((java.lang.Object)'#');
    var1.enqueue((java.lang.Object)' ');
    int var6 = var1.size();
    java.util.Iterator var7 = var1.iterator();
    boolean var8 = var1.isEmpty();
    java.util.Iterator var9 = var1.iterator();
    int var10 = var1.size();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var12 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var12.enqueue((java.lang.Object)'#');
    int var15 = var12.size();
    var12.enqueue((java.lang.Object)true);
    var1.enqueue((java.lang.Object)true);
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var20 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var20.enqueue((java.lang.Object)'#');
    java.util.Iterator var23 = var20.iterator();
    java.util.Iterator var24 = var20.iterator();
    var20.enqueue((java.lang.Object)false);
    int var27 = var20.size();
    boolean var28 = var20.isEmpty();
    boolean var29 = var20.isEmpty();
    boolean var30 = var20.isEmpty();
    int var31 = var20.size();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var33 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var34 = var33.isEmpty();
    boolean var35 = var33.isEmpty();
    java.util.Iterator var36 = var33.iterator();
    boolean var37 = var33.isEmpty();
    int var38 = var33.size();
    int var39 = var33.size();
    var20.enqueue((java.lang.Object)var33);
    var1.enqueue((java.lang.Object)var20);
    java.util.Iterator var42 = var20.iterator();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);

  }

  public void test179() throws Throwable {

    if (debug) System.out.printf("%nRingBufferMutantTest1.test179");


    at.fhhagenberg.sqe.exercise13.RingBufferMutant var1 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var1.enqueue((java.lang.Object)'#');
    java.util.Iterator var4 = var1.iterator();
    java.util.Iterator var5 = var1.iterator();
    boolean var6 = var1.isEmpty();
    int var7 = var1.size();
    var1.enqueue((java.lang.Object)1.0d);
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var11 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var11.enqueue((java.lang.Object)'#');
    java.util.Iterator var14 = var11.iterator();
    java.util.Iterator var15 = var11.iterator();
    var11.enqueue((java.lang.Object)false);
    int var18 = var11.size();
    boolean var19 = var11.isEmpty();
    int var20 = var11.size();
    var1.enqueue((java.lang.Object)var20);
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var23 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var24 = var23.isEmpty();
    boolean var25 = var23.isEmpty();
    boolean var26 = var23.isEmpty();
    int var27 = var23.size();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var29 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(1);
    var23.enqueue((java.lang.Object)var29);
    java.lang.Object var31 = var23.dequeue();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var33 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var34 = var33.isEmpty();
    boolean var35 = var33.isEmpty();
    boolean var36 = var33.isEmpty();
    int var37 = var33.size();
    java.util.Iterator var38 = var33.iterator();
    var23.enqueue((java.lang.Object)var38);
    var1.enqueue((java.lang.Object)var38);
    java.util.Iterator var41 = var1.iterator();
    boolean var42 = var1.isEmpty();
    java.util.Iterator var43 = var1.iterator();
    boolean var44 = var1.isEmpty();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);

  }

  public void test180() throws Throwable {

    if (debug) System.out.printf("%nRingBufferMutantTest1.test180");


    at.fhhagenberg.sqe.exercise13.RingBufferMutant var1 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var2 = var1.isEmpty();
    boolean var3 = var1.isEmpty();
    java.util.Iterator var4 = var1.iterator();
    boolean var5 = var1.isEmpty();
    int var6 = var1.size();
    int var7 = var1.size();
    java.util.Iterator var8 = var1.iterator();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var10 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var10.enqueue((java.lang.Object)'#');
    java.util.Iterator var13 = var10.iterator();
    java.util.Iterator var14 = var10.iterator();
    java.util.Iterator var15 = var10.iterator();
    var1.enqueue((java.lang.Object)var10);
    int var17 = var10.size();
    boolean var18 = var10.isEmpty();
    int var19 = var10.size();
    java.lang.Object var20 = var10.dequeue();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var20 + "' != '" + '#'+ "'", var20.equals('#'));

  }

  public void test181() throws Throwable {

    if (debug) System.out.printf("%nRingBufferMutantTest1.test181");


    at.fhhagenberg.sqe.exercise13.RingBufferMutant var1 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var1.enqueue((java.lang.Object)'#');
    var1.enqueue((java.lang.Object)' ');
    int var6 = var1.size();
    var1.enqueue((java.lang.Object)1);
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var10 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var10.enqueue((java.lang.Object)'#');
    java.util.Iterator var13 = var10.iterator();
    java.util.Iterator var14 = var10.iterator();
    var10.enqueue((java.lang.Object)false);
    int var17 = var10.size();
    boolean var18 = var10.isEmpty();
    int var19 = var10.size();
    java.lang.Object var20 = new java.lang.Object();
    var10.enqueue(var20);
    var1.enqueue((java.lang.Object)var10);
    int var23 = var10.size();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var25 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var25.enqueue((java.lang.Object)'#');
    var25.enqueue((java.lang.Object)' ');
    int var30 = var25.size();
    java.util.Iterator var31 = var25.iterator();
    boolean var32 = var25.isEmpty();
    java.util.Iterator var33 = var25.iterator();
    java.util.Iterator var34 = var25.iterator();
    var10.enqueue((java.lang.Object)var34);
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var37 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var37.enqueue((java.lang.Object)'#');
    var37.enqueue((java.lang.Object)' ');
    int var42 = var37.size();
    java.util.Iterator var43 = var37.iterator();
    boolean var44 = var37.isEmpty();
    java.util.Iterator var45 = var37.iterator();
    java.util.Iterator var46 = var37.iterator();
    java.lang.Object var47 = var37.dequeue();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var49 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var49.enqueue((java.lang.Object)'#');
    java.util.Iterator var52 = var49.iterator();
    java.util.Iterator var53 = var49.iterator();
    var49.enqueue((java.lang.Object)false);
    int var56 = var49.size();
    boolean var57 = var49.isEmpty();
    boolean var58 = var49.isEmpty();
    boolean var59 = var49.isEmpty();
    int var60 = var49.size();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var62 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(100);
    int var63 = var62.size();
    java.util.Iterator var64 = var62.iterator();
    var49.enqueue((java.lang.Object)var62);
    boolean var66 = var49.isEmpty();
    java.lang.Object var67 = var49.dequeue();
    java.util.Iterator var68 = var49.iterator();
    java.util.Iterator var69 = var49.iterator();
    var37.enqueue((java.lang.Object)var49);
    java.util.Iterator var71 = var37.iterator();
    var10.enqueue((java.lang.Object)var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var47 + "' != '" + '#'+ "'", var47.equals('#'));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var67 + "' != '" + '#'+ "'", var67.equals('#'));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);

  }

  public void test182() throws Throwable {

    if (debug) System.out.printf("%nRingBufferMutantTest1.test182");


    at.fhhagenberg.sqe.exercise13.RingBufferMutant var1 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var2 = var1.isEmpty();
    boolean var3 = var1.isEmpty();
    boolean var4 = var1.isEmpty();
    int var5 = var1.size();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var7 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(1);
    var1.enqueue((java.lang.Object)var7);
    java.lang.Object var9 = var1.dequeue();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var11 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var12 = var11.isEmpty();
    boolean var13 = var11.isEmpty();
    boolean var14 = var11.isEmpty();
    int var15 = var11.size();
    java.util.Iterator var16 = var11.iterator();
    var1.enqueue((java.lang.Object)var16);
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var19 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var19.enqueue((java.lang.Object)'#');
    java.util.Iterator var22 = var19.iterator();
    java.util.Iterator var23 = var19.iterator();
    var19.enqueue((java.lang.Object)false);
    int var26 = var19.size();
    boolean var27 = var19.isEmpty();
    boolean var28 = var19.isEmpty();
    boolean var29 = var19.isEmpty();
    int var30 = var19.size();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var32 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(100);
    int var33 = var32.size();
    java.util.Iterator var34 = var32.iterator();
    var19.enqueue((java.lang.Object)var32);
    int var36 = var32.size();
    var1.enqueue((java.lang.Object)var32);
    java.util.Iterator var38 = var32.iterator();
    int var39 = var32.size();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.Object var40 = var32.dequeue();
      fail("Expected exception of type java.lang.RuntimeException");
    } catch (java.lang.RuntimeException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == 0);

  }

  public void test183() throws Throwable {

    if (debug) System.out.printf("%nRingBufferMutantTest1.test183");


    at.fhhagenberg.sqe.exercise13.RingBufferMutant var1 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(100);
    int var2 = var1.size();
    int var3 = var1.size();
    boolean var4 = var1.isEmpty();
    boolean var5 = var1.isEmpty();
    boolean var6 = var1.isEmpty();
    int var7 = var1.size();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0);

  }

  public void test184() throws Throwable {

    if (debug) System.out.printf("%nRingBufferMutantTest1.test184");


    at.fhhagenberg.sqe.exercise13.RingBufferMutant var1 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var1.enqueue((java.lang.Object)'#');
    java.util.Iterator var4 = var1.iterator();
    java.util.Iterator var5 = var1.iterator();
    var1.enqueue((java.lang.Object)false);
    int var8 = var1.size();
    boolean var9 = var1.isEmpty();
    boolean var10 = var1.isEmpty();
    var1.enqueue((java.lang.Object)(short)0);
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var14 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var14.enqueue((java.lang.Object)'#');
    java.util.Iterator var17 = var14.iterator();
    java.util.Iterator var18 = var14.iterator();
    java.util.Iterator var19 = var14.iterator();
    boolean var20 = var14.isEmpty();
    java.util.Iterator var21 = var14.iterator();
    boolean var22 = var14.isEmpty();
    var1.enqueue((java.lang.Object)var22);
    java.lang.Object var24 = var1.dequeue();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var26 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var27 = var26.isEmpty();
    boolean var28 = var26.isEmpty();
    java.util.Iterator var29 = var26.iterator();
    boolean var30 = var26.isEmpty();
    int var31 = var26.size();
    int var32 = var26.size();
    java.util.Iterator var33 = var26.iterator();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var35 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var35.enqueue((java.lang.Object)'#');
    java.util.Iterator var38 = var35.iterator();
    java.util.Iterator var39 = var35.iterator();
    java.util.Iterator var40 = var35.iterator();
    var26.enqueue((java.lang.Object)var35);
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var43 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var43.enqueue((java.lang.Object)'#');
    java.util.Iterator var46 = var43.iterator();
    java.util.Iterator var47 = var43.iterator();
    var43.enqueue((java.lang.Object)false);
    int var50 = var43.size();
    boolean var51 = var43.isEmpty();
    boolean var52 = var43.isEmpty();
    boolean var53 = var43.isEmpty();
    int var54 = var43.size();
    boolean var55 = var43.isEmpty();
    var26.enqueue((java.lang.Object)var55);
    int var57 = var26.size();
    var1.enqueue((java.lang.Object)var26);
    java.util.Iterator var59 = var26.iterator();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var61 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var62 = var61.isEmpty();
    boolean var63 = var61.isEmpty();
    java.util.Iterator var64 = var61.iterator();
    boolean var65 = var61.isEmpty();
    var61.enqueue((java.lang.Object)'#');
    int var68 = var61.size();
    java.util.Iterator var69 = var61.iterator();
    java.lang.Object var70 = var61.dequeue();
    var26.enqueue((java.lang.Object)var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var24 + "' != '" + '#'+ "'", var24.equals('#'));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var70 + "' != '" + '#'+ "'", var70.equals('#'));

  }

  public void test185() throws Throwable {

    if (debug) System.out.printf("%nRingBufferMutantTest1.test185");


    at.fhhagenberg.sqe.exercise13.RingBufferMutant var1 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var1.enqueue((java.lang.Object)'#');
    java.util.Iterator var4 = var1.iterator();
    java.util.Iterator var5 = var1.iterator();
    java.util.Iterator var6 = var1.iterator();
    java.util.Iterator var7 = var1.iterator();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var9 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var9.enqueue((java.lang.Object)'#');
    var9.enqueue((java.lang.Object)' ');
    int var14 = var9.size();
    java.util.Iterator var15 = var9.iterator();
    boolean var16 = var9.isEmpty();
    java.util.Iterator var17 = var9.iterator();
    int var18 = var9.size();
    boolean var19 = var9.isEmpty();
    java.lang.Object var20 = var9.dequeue();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var22 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var23 = var22.isEmpty();
    boolean var24 = var22.isEmpty();
    java.util.Iterator var25 = var22.iterator();
    boolean var26 = var22.isEmpty();
    var22.enqueue((java.lang.Object)1.0d);
    java.util.Iterator var29 = var22.iterator();
    var9.enqueue((java.lang.Object)var29);
    var1.enqueue((java.lang.Object)var29);
    java.util.Iterator var32 = var1.iterator();
    java.util.Iterator var33 = var1.iterator();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var20 + "' != '" + '#'+ "'", var20.equals('#'));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);

  }

  public void test186() throws Throwable {

    if (debug) System.out.printf("%nRingBufferMutantTest1.test186");


    at.fhhagenberg.sqe.exercise13.RingBufferMutant var1 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var1.enqueue((java.lang.Object)'#');
    var1.enqueue((java.lang.Object)' ');
    int var6 = var1.size();
    java.util.Iterator var7 = var1.iterator();
    boolean var8 = var1.isEmpty();
    java.util.Iterator var9 = var1.iterator();
    java.util.Iterator var10 = var1.iterator();
    int var11 = var1.size();
    int var12 = var1.size();
    boolean var13 = var1.isEmpty();
    java.lang.Object var14 = var1.dequeue();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var16 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var16.enqueue((java.lang.Object)'#');
    java.util.Iterator var19 = var16.iterator();
    java.util.Iterator var20 = var16.iterator();
    boolean var21 = var16.isEmpty();
    int var22 = var16.size();
    java.util.Iterator var23 = var16.iterator();
    var1.enqueue((java.lang.Object)var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + '#'+ "'", var14.equals('#'));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);

  }

  public void test187() throws Throwable {

    if (debug) System.out.printf("%nRingBufferMutantTest1.test187");


    at.fhhagenberg.sqe.exercise13.RingBufferMutant var1 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var2 = var1.isEmpty();
    boolean var3 = var1.isEmpty();
    int var4 = var1.size();
    java.util.Iterator var5 = var1.iterator();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var7 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var7.enqueue((java.lang.Object)'#');
    var7.enqueue((java.lang.Object)' ');
    int var12 = var7.size();
    int var13 = var7.size();
    java.lang.Object var14 = var7.dequeue();
    var1.enqueue(var14);
    int var16 = var1.size();
    int var17 = var1.size();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var19 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var19.enqueue((java.lang.Object)'#');
    int var22 = var19.size();
    int var23 = var19.size();
    java.util.Iterator var24 = var19.iterator();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var26 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var27 = var26.isEmpty();
    boolean var28 = var26.isEmpty();
    java.util.Iterator var29 = var26.iterator();
    boolean var30 = var26.isEmpty();
    var26.enqueue((java.lang.Object)1.0d);
    java.util.Iterator var33 = var26.iterator();
    var19.enqueue((java.lang.Object)var33);
    int var35 = var19.size();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var37 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var37.enqueue((java.lang.Object)'#');
    int var40 = var37.size();
    java.lang.Object var41 = var37.dequeue();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var43 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var43.enqueue((java.lang.Object)'#');
    var43.enqueue((java.lang.Object)' ');
    int var48 = var43.size();
    int var49 = var43.size();
    java.util.Iterator var50 = var43.iterator();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var52 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(0);
    java.util.Iterator var53 = var52.iterator();
    var43.enqueue((java.lang.Object)var53);
    var37.enqueue((java.lang.Object)var43);
    boolean var56 = var43.isEmpty();
    java.lang.Object var57 = var43.dequeue();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var59 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(100);
    boolean var60 = var59.isEmpty();
    boolean var61 = var59.isEmpty();
    java.util.Iterator var62 = var59.iterator();
    var43.enqueue((java.lang.Object)var62);
    java.util.Iterator var64 = var43.iterator();
    var19.enqueue((java.lang.Object)var43);
    var1.enqueue((java.lang.Object)var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + '#'+ "'", var14.equals('#'));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var41 + "' != '" + '#'+ "'", var41.equals('#'));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var57 + "' != '" + '#'+ "'", var57.equals('#'));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);

  }

  public void test188() throws Throwable {

    if (debug) System.out.printf("%nRingBufferMutantTest1.test188");


    at.fhhagenberg.sqe.exercise13.RingBufferMutant var1 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(100);
    java.util.Iterator var2 = var1.iterator();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var4 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var4.enqueue((java.lang.Object)'#');
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var8 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var8.enqueue((java.lang.Object)'#');
    java.util.Iterator var11 = var8.iterator();
    java.util.Iterator var12 = var8.iterator();
    var8.enqueue((java.lang.Object)false);
    int var15 = var8.size();
    boolean var16 = var8.isEmpty();
    java.lang.Object var17 = var8.dequeue();
    java.util.Iterator var18 = var8.iterator();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var20 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var20.enqueue((java.lang.Object)'#');
    java.util.Iterator var23 = var20.iterator();
    java.util.Iterator var24 = var20.iterator();
    java.util.Iterator var25 = var20.iterator();
    var8.enqueue((java.lang.Object)var20);
    var4.enqueue((java.lang.Object)var20);
    java.util.Iterator var28 = var20.iterator();
    boolean var29 = var20.isEmpty();
    boolean var30 = var20.isEmpty();
    boolean var31 = var20.isEmpty();
    var1.enqueue((java.lang.Object)var20);
    boolean var33 = var1.isEmpty();
    java.util.Iterator var34 = var1.iterator();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + '#'+ "'", var17.equals('#'));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);

  }

  public void test189() throws Throwable {

    if (debug) System.out.printf("%nRingBufferMutantTest1.test189");


    at.fhhagenberg.sqe.exercise13.RingBufferMutant var1 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var1.enqueue((java.lang.Object)1.0d);
    java.util.Iterator var4 = var1.iterator();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var6 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(1);
    boolean var7 = var6.isEmpty();
    boolean var8 = var6.isEmpty();
    java.util.Iterator var9 = var6.iterator();
    var1.enqueue((java.lang.Object)var6);
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var12 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var12.enqueue((java.lang.Object)'#');
    java.util.Iterator var15 = var12.iterator();
    java.util.Iterator var16 = var12.iterator();
    var12.enqueue((java.lang.Object)false);
    int var19 = var12.size();
    boolean var20 = var12.isEmpty();
    boolean var21 = var12.isEmpty();
    boolean var22 = var12.isEmpty();
    java.lang.Object var23 = var12.dequeue();
    java.util.Iterator var24 = var12.iterator();
    var1.enqueue((java.lang.Object)var12);
    boolean var26 = var1.isEmpty();
    boolean var27 = var1.isEmpty();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var29 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var30 = var29.isEmpty();
    boolean var31 = var29.isEmpty();
    java.util.Iterator var32 = var29.iterator();
    boolean var33 = var29.isEmpty();
    var29.enqueue((java.lang.Object)'#');
    boolean var36 = var29.isEmpty();
    int var37 = var29.size();
    java.util.Iterator var38 = var29.iterator();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var40 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var40.enqueue((java.lang.Object)'#');
    java.util.Iterator var43 = var40.iterator();
    var40.enqueue((java.lang.Object)100.0d);
    boolean var46 = var40.isEmpty();
    java.lang.Object var47 = var40.dequeue();
    var29.enqueue(var47);
    var29.enqueue((java.lang.Object)'4');
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var52 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var52.enqueue((java.lang.Object)'#');
    int var55 = var52.size();
    var52.enqueue((java.lang.Object)true);
    java.util.Iterator var58 = var52.iterator();
    var29.enqueue((java.lang.Object)var52);
    java.lang.Object var60 = var29.dequeue();
    var1.enqueue((java.lang.Object)var29);
    boolean var62 = var1.isEmpty();
    int var63 = var1.size();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + '#'+ "'", var23.equals('#'));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var47 + "' != '" + '#'+ "'", var47.equals('#'));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var60 + "' != '" + '#'+ "'", var60.equals('#'));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == 4);

  }

  public void test190() throws Throwable {

    if (debug) System.out.printf("%nRingBufferMutantTest1.test190");


    at.fhhagenberg.sqe.exercise13.RingBufferMutant var1 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var1.enqueue((java.lang.Object)1.0d);
    java.util.Iterator var4 = var1.iterator();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var6 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(1);
    boolean var7 = var6.isEmpty();
    boolean var8 = var6.isEmpty();
    java.util.Iterator var9 = var6.iterator();
    var1.enqueue((java.lang.Object)var6);
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var12 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var12.enqueue((java.lang.Object)'#');
    java.util.Iterator var15 = var12.iterator();
    java.util.Iterator var16 = var12.iterator();
    var12.enqueue((java.lang.Object)false);
    int var19 = var12.size();
    boolean var20 = var12.isEmpty();
    boolean var21 = var12.isEmpty();
    boolean var22 = var12.isEmpty();
    java.lang.Object var23 = var12.dequeue();
    java.util.Iterator var24 = var12.iterator();
    var1.enqueue((java.lang.Object)var12);
    boolean var26 = var1.isEmpty();
    boolean var27 = var1.isEmpty();
    boolean var28 = var1.isEmpty();
    java.util.Iterator var29 = var1.iterator();
    int var30 = var1.size();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + '#'+ "'", var23.equals('#'));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == 3);

  }

  public void test191() throws Throwable {

    if (debug) System.out.printf("%nRingBufferMutantTest1.test191");


    at.fhhagenberg.sqe.exercise13.RingBufferMutant var1 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var1.enqueue((java.lang.Object)'#');
    java.util.Iterator var4 = var1.iterator();
    java.util.Iterator var5 = var1.iterator();
    boolean var6 = var1.isEmpty();
    int var7 = var1.size();
    var1.enqueue((java.lang.Object)1.0d);
    boolean var10 = var1.isEmpty();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var12 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var12.enqueue((java.lang.Object)'#');
    java.util.Iterator var15 = var12.iterator();
    java.util.Iterator var16 = var12.iterator();
    var12.enqueue((java.lang.Object)false);
    java.lang.Object var19 = var12.dequeue();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var21 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var22 = var21.isEmpty();
    boolean var23 = var21.isEmpty();
    java.util.Iterator var24 = var21.iterator();
    boolean var25 = var21.isEmpty();
    var21.enqueue((java.lang.Object)'#');
    boolean var28 = var21.isEmpty();
    int var29 = var21.size();
    java.util.Iterator var30 = var21.iterator();
    var12.enqueue((java.lang.Object)var21);
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var33 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var33.enqueue((java.lang.Object)'#');
    java.util.Iterator var36 = var33.iterator();
    java.util.Iterator var37 = var33.iterator();
    java.util.Iterator var38 = var33.iterator();
    boolean var39 = var33.isEmpty();
    int var40 = var33.size();
    var12.enqueue((java.lang.Object)var40);
    java.util.Iterator var42 = var12.iterator();
    var1.enqueue((java.lang.Object)var12);
    java.lang.Object var44 = var1.dequeue();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + '#'+ "'", var19.equals('#'));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var44 + "' != '" + '#'+ "'", var44.equals('#'));

  }

  public void test192() throws Throwable {

    if (debug) System.out.printf("%nRingBufferMutantTest1.test192");


    at.fhhagenberg.sqe.exercise13.RingBufferMutant var1 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var1.enqueue((java.lang.Object)'#');
    int var4 = var1.size();
    int var5 = var1.size();
    java.util.Iterator var6 = var1.iterator();
    java.util.Iterator var7 = var1.iterator();
    java.lang.Object var8 = var1.dequeue();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var10 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(1);
    java.util.Iterator var11 = var10.iterator();
    java.util.Iterator var12 = var10.iterator();
    java.util.Iterator var13 = var10.iterator();
    int var14 = var10.size();
    int var15 = var10.size();
    var1.enqueue((java.lang.Object)var10);
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var18 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var18.enqueue((java.lang.Object)'#');
    int var21 = var18.size();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var23 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var24 = var23.isEmpty();
    boolean var25 = var23.isEmpty();
    java.util.Iterator var26 = var23.iterator();
    boolean var27 = var23.isEmpty();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var29 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var29.enqueue((java.lang.Object)'#');
    java.util.Iterator var32 = var29.iterator();
    java.util.Iterator var33 = var29.iterator();
    var29.enqueue((java.lang.Object)false);
    int var36 = var29.size();
    var23.enqueue((java.lang.Object)var29);
    var18.enqueue((java.lang.Object)var29);
    java.util.Iterator var39 = var29.iterator();
    java.util.Iterator var40 = var29.iterator();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var42 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var43 = var42.isEmpty();
    boolean var44 = var42.isEmpty();
    java.util.Iterator var45 = var42.iterator();
    boolean var46 = var42.isEmpty();
    var42.enqueue((java.lang.Object)'#');
    int var49 = var42.size();
    var29.enqueue((java.lang.Object)var49);
    boolean var51 = var29.isEmpty();
    var1.enqueue((java.lang.Object)var29);
    boolean var53 = var29.isEmpty();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + '#'+ "'", var8.equals('#'));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);

  }

  public void test193() throws Throwable {

    if (debug) System.out.printf("%nRingBufferMutantTest1.test193");


    at.fhhagenberg.sqe.exercise13.RingBufferMutant var1 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var1.enqueue((java.lang.Object)'#');
    int var4 = var1.size();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var6 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var7 = var6.isEmpty();
    boolean var8 = var6.isEmpty();
    java.util.Iterator var9 = var6.iterator();
    boolean var10 = var6.isEmpty();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var12 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var12.enqueue((java.lang.Object)'#');
    java.util.Iterator var15 = var12.iterator();
    java.util.Iterator var16 = var12.iterator();
    var12.enqueue((java.lang.Object)false);
    int var19 = var12.size();
    var6.enqueue((java.lang.Object)var12);
    var1.enqueue((java.lang.Object)var12);
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var23 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var23.enqueue((java.lang.Object)1.0d);
    java.util.Iterator var26 = var23.iterator();
    boolean var27 = var23.isEmpty();
    boolean var28 = var23.isEmpty();
    boolean var29 = var23.isEmpty();
    var1.enqueue((java.lang.Object)var23);
    int var31 = var23.size();
    boolean var32 = var23.isEmpty();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);

  }

  public void test194() throws Throwable {

    if (debug) System.out.printf("%nRingBufferMutantTest1.test194");


    at.fhhagenberg.sqe.exercise13.RingBufferMutant var1 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var1.enqueue((java.lang.Object)'#');
    java.util.Iterator var4 = var1.iterator();
    java.util.Iterator var5 = var1.iterator();
    var1.enqueue((java.lang.Object)false);
    int var8 = var1.size();
    boolean var9 = var1.isEmpty();
    boolean var10 = var1.isEmpty();
    boolean var11 = var1.isEmpty();
    int var12 = var1.size();
    boolean var13 = var1.isEmpty();
    int var14 = var1.size();
    int var15 = var1.size();
    java.util.Iterator var16 = var1.iterator();
    int var17 = var1.size();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 2);

  }

  public void test195() throws Throwable {

    if (debug) System.out.printf("%nRingBufferMutantTest1.test195");


    at.fhhagenberg.sqe.exercise13.RingBufferMutant var1 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var2 = var1.isEmpty();
    boolean var3 = var1.isEmpty();
    java.util.Iterator var4 = var1.iterator();
    boolean var5 = var1.isEmpty();
    int var6 = var1.size();
    java.util.Iterator var7 = var1.iterator();
    int var8 = var1.size();
    boolean var9 = var1.isEmpty();
    int var10 = var1.size();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var12 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var12.enqueue((java.lang.Object)'#');
    var12.enqueue((java.lang.Object)' ');
    var12.enqueue((java.lang.Object)10.0f);
    java.util.Iterator var19 = var12.iterator();
    java.util.Iterator var20 = var12.iterator();
    var1.enqueue((java.lang.Object)var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);

  }

  public void test196() throws Throwable {

    if (debug) System.out.printf("%nRingBufferMutantTest1.test196");


    at.fhhagenberg.sqe.exercise13.RingBufferMutant var1 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var2 = var1.isEmpty();
    boolean var3 = var1.isEmpty();
    java.util.Iterator var4 = var1.iterator();
    boolean var5 = var1.isEmpty();
    var1.enqueue((java.lang.Object)'#');
    boolean var8 = var1.isEmpty();
    int var9 = var1.size();
    boolean var10 = var1.isEmpty();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var12 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var13 = var12.isEmpty();
    boolean var14 = var12.isEmpty();
    int var15 = var12.size();
    java.util.Iterator var16 = var12.iterator();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var18 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var18.enqueue((java.lang.Object)'#');
    int var21 = var18.size();
    var18.enqueue((java.lang.Object)true);
    java.util.Iterator var24 = var18.iterator();
    var12.enqueue((java.lang.Object)var24);
    java.util.Iterator var26 = var12.iterator();
    int var27 = var12.size();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var29 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var30 = var29.isEmpty();
    boolean var31 = var29.isEmpty();
    int var32 = var29.size();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var34 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var35 = var34.isEmpty();
    boolean var36 = var34.isEmpty();
    var29.enqueue((java.lang.Object)var36);
    boolean var38 = var29.isEmpty();
    var12.enqueue((java.lang.Object)var38);
    java.lang.Object var40 = var12.dequeue();
    var1.enqueue(var40);
    java.util.Iterator var42 = var1.iterator();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var44 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var44.enqueue((java.lang.Object)'#');
    java.util.Iterator var47 = var44.iterator();
    java.util.Iterator var48 = var44.iterator();
    java.util.Iterator var49 = var44.iterator();
    java.util.Iterator var50 = var44.iterator();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var52 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var52.enqueue((java.lang.Object)'#');
    var52.enqueue((java.lang.Object)' ');
    int var57 = var52.size();
    java.util.Iterator var58 = var52.iterator();
    boolean var59 = var52.isEmpty();
    java.util.Iterator var60 = var52.iterator();
    int var61 = var52.size();
    boolean var62 = var52.isEmpty();
    java.lang.Object var63 = var52.dequeue();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var65 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var66 = var65.isEmpty();
    boolean var67 = var65.isEmpty();
    java.util.Iterator var68 = var65.iterator();
    boolean var69 = var65.isEmpty();
    var65.enqueue((java.lang.Object)1.0d);
    java.util.Iterator var72 = var65.iterator();
    var52.enqueue((java.lang.Object)var72);
    var44.enqueue((java.lang.Object)var72);
    java.util.Iterator var75 = var44.iterator();
    var1.enqueue((java.lang.Object)var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var63 + "' != '" + '#'+ "'", var63.equals('#'));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);

  }

  public void test197() throws Throwable {

    if (debug) System.out.printf("%nRingBufferMutantTest1.test197");


    at.fhhagenberg.sqe.exercise13.RingBufferMutant var1 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(100);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.Object var2 = var1.dequeue();
      fail("Expected exception of type java.lang.RuntimeException");
    } catch (java.lang.RuntimeException e) {
      // Expected exception.
    }

  }

  public void test198() throws Throwable {

    if (debug) System.out.printf("%nRingBufferMutantTest1.test198");


    at.fhhagenberg.sqe.exercise13.RingBufferMutant var1 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(1);
    boolean var2 = var1.isEmpty();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.Object var3 = var1.dequeue();
      fail("Expected exception of type java.lang.RuntimeException");
    } catch (java.lang.RuntimeException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);

  }

  public void test199() throws Throwable {

    if (debug) System.out.printf("%nRingBufferMutantTest1.test199");


    at.fhhagenberg.sqe.exercise13.RingBufferMutant var1 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var1.enqueue((java.lang.Object)'#');
    java.util.Iterator var4 = var1.iterator();
    java.util.Iterator var5 = var1.iterator();
    boolean var6 = var1.isEmpty();
    int var7 = var1.size();
    var1.enqueue((java.lang.Object)1.0d);
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var11 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var11.enqueue((java.lang.Object)'#');
    java.util.Iterator var14 = var11.iterator();
    java.util.Iterator var15 = var11.iterator();
    var11.enqueue((java.lang.Object)false);
    int var18 = var11.size();
    boolean var19 = var11.isEmpty();
    int var20 = var11.size();
    var1.enqueue((java.lang.Object)var20);
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var23 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var24 = var23.isEmpty();
    boolean var25 = var23.isEmpty();
    boolean var26 = var23.isEmpty();
    int var27 = var23.size();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var29 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(1);
    var23.enqueue((java.lang.Object)var29);
    java.lang.Object var31 = var23.dequeue();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var33 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var34 = var33.isEmpty();
    boolean var35 = var33.isEmpty();
    boolean var36 = var33.isEmpty();
    int var37 = var33.size();
    java.util.Iterator var38 = var33.iterator();
    var23.enqueue((java.lang.Object)var38);
    var1.enqueue((java.lang.Object)var38);
    java.util.Iterator var41 = var1.iterator();
    boolean var42 = var1.isEmpty();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var44 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(1);
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var46 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var47 = var46.isEmpty();
    boolean var48 = var46.isEmpty();
    java.util.Iterator var49 = var46.iterator();
    boolean var50 = var46.isEmpty();
    java.util.Iterator var51 = var46.iterator();
    int var52 = var46.size();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var54 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var55 = var54.isEmpty();
    boolean var56 = var54.isEmpty();
    java.util.Iterator var57 = var54.iterator();
    boolean var58 = var54.isEmpty();
    var54.enqueue((java.lang.Object)'#');
    boolean var61 = var54.isEmpty();
    int var62 = var54.size();
    java.util.Iterator var63 = var54.iterator();
    boolean var64 = var54.isEmpty();
    java.util.Iterator var65 = var54.iterator();
    var46.enqueue((java.lang.Object)var65);
    var44.enqueue((java.lang.Object)var65);
    var1.enqueue((java.lang.Object)var44);
    boolean var69 = var1.isEmpty();
    boolean var70 = var1.isEmpty();
    java.util.Iterator var71 = var1.iterator();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);

  }

  public void test200() throws Throwable {

    if (debug) System.out.printf("%nRingBufferMutantTest1.test200");


    at.fhhagenberg.sqe.exercise13.RingBufferMutant var1 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(0);
    int var2 = var1.size();
    boolean var3 = var1.isEmpty();
    int var4 = var1.size();
    boolean var5 = var1.isEmpty();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.Object var6 = var1.dequeue();
      fail("Expected exception of type java.lang.RuntimeException");
    } catch (java.lang.RuntimeException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);

  }

  public void test201() throws Throwable {

    if (debug) System.out.printf("%nRingBufferMutantTest1.test201");


    at.fhhagenberg.sqe.exercise13.RingBufferMutant var1 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var2 = var1.isEmpty();
    boolean var3 = var1.isEmpty();
    java.util.Iterator var4 = var1.iterator();
    boolean var5 = var1.isEmpty();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var7 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var7.enqueue((java.lang.Object)'#');
    java.util.Iterator var10 = var7.iterator();
    java.util.Iterator var11 = var7.iterator();
    var7.enqueue((java.lang.Object)false);
    int var14 = var7.size();
    var1.enqueue((java.lang.Object)var7);
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var17 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var17.enqueue((java.lang.Object)'#');
    var17.enqueue((java.lang.Object)' ');
    int var22 = var17.size();
    java.util.Iterator var23 = var17.iterator();
    boolean var24 = var17.isEmpty();
    java.util.Iterator var25 = var17.iterator();
    var7.enqueue((java.lang.Object)var17);
    java.util.Iterator var27 = var7.iterator();
    boolean var28 = var7.isEmpty();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);

  }

  public void test202() throws Throwable {

    if (debug) System.out.printf("%nRingBufferMutantTest1.test202");


    at.fhhagenberg.sqe.exercise13.RingBufferMutant var1 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var2 = var1.isEmpty();
    boolean var3 = var1.isEmpty();
    int var4 = var1.size();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var6 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var7 = var6.isEmpty();
    boolean var8 = var6.isEmpty();
    var1.enqueue((java.lang.Object)var8);
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var11 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(0);
    java.util.Iterator var12 = var11.iterator();
    int var13 = var11.size();
    var1.enqueue((java.lang.Object)var11);
    java.lang.Object var15 = var1.dequeue();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var15 + "' != '" + true+ "'", var15.equals(true));

  }

  public void test203() throws Throwable {

    if (debug) System.out.printf("%nRingBufferMutantTest1.test203");


    at.fhhagenberg.sqe.exercise13.RingBufferMutant var1 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var2 = var1.isEmpty();
    boolean var3 = var1.isEmpty();
    int var4 = var1.size();
    java.util.Iterator var5 = var1.iterator();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var7 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var7.enqueue((java.lang.Object)'#');
    int var10 = var7.size();
    var7.enqueue((java.lang.Object)true);
    java.util.Iterator var13 = var7.iterator();
    var1.enqueue((java.lang.Object)var13);
    java.util.Iterator var15 = var1.iterator();
    int var16 = var1.size();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var18 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var19 = var18.isEmpty();
    boolean var20 = var18.isEmpty();
    int var21 = var18.size();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var23 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var24 = var23.isEmpty();
    boolean var25 = var23.isEmpty();
    var18.enqueue((java.lang.Object)var25);
    boolean var27 = var18.isEmpty();
    var1.enqueue((java.lang.Object)var27);
    java.util.Iterator var29 = var1.iterator();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var31 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var32 = var31.isEmpty();
    boolean var33 = var31.isEmpty();
    boolean var34 = var31.isEmpty();
    int var35 = var31.size();
    int var36 = var31.size();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var38 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var39 = var38.isEmpty();
    boolean var40 = var38.isEmpty();
    java.util.Iterator var41 = var38.iterator();
    boolean var42 = var38.isEmpty();
    int var43 = var38.size();
    java.util.Iterator var44 = var38.iterator();
    int var45 = var38.size();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var47 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var47.enqueue((java.lang.Object)'#');
    java.util.Iterator var50 = var47.iterator();
    java.util.Iterator var51 = var47.iterator();
    var47.enqueue((java.lang.Object)false);
    java.lang.Object var54 = var47.dequeue();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var56 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var57 = var56.isEmpty();
    boolean var58 = var56.isEmpty();
    java.util.Iterator var59 = var56.iterator();
    boolean var60 = var56.isEmpty();
    var56.enqueue((java.lang.Object)'#');
    boolean var63 = var56.isEmpty();
    int var64 = var56.size();
    java.util.Iterator var65 = var56.iterator();
    var47.enqueue((java.lang.Object)var56);
    int var67 = var56.size();
    int var68 = var56.size();
    var38.enqueue((java.lang.Object)var56);
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var71 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var72 = var71.isEmpty();
    boolean var73 = var71.isEmpty();
    int var74 = var71.size();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var76 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var77 = var76.isEmpty();
    boolean var78 = var76.isEmpty();
    var71.enqueue((java.lang.Object)var78);
    boolean var80 = var71.isEmpty();
    var56.enqueue((java.lang.Object)var80);
    boolean var82 = var56.isEmpty();
    var31.enqueue((java.lang.Object)var56);
    var1.enqueue((java.lang.Object)var56);
    int var85 = var1.size();
    int var86 = var1.size();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var54 + "' != '" + '#'+ "'", var54.equals('#'));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var77 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var78 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var80 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var82 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var85 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var86 == 3);

  }

  public void test204() throws Throwable {

    if (debug) System.out.printf("%nRingBufferMutantTest1.test204");


    at.fhhagenberg.sqe.exercise13.RingBufferMutant var1 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var1.enqueue((java.lang.Object)'#');
    var1.enqueue((java.lang.Object)' ');
    int var6 = var1.size();
    var1.enqueue((java.lang.Object)1);
    boolean var9 = var1.isEmpty();
    java.util.Iterator var10 = var1.iterator();
    boolean var11 = var1.isEmpty();
    boolean var12 = var1.isEmpty();
    java.lang.Object var13 = var1.dequeue();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + '#'+ "'", var13.equals('#'));

  }

  public void test205() throws Throwable {

    if (debug) System.out.printf("%nRingBufferMutantTest1.test205");


    at.fhhagenberg.sqe.exercise13.RingBufferMutant var1 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var2 = var1.isEmpty();
    boolean var3 = var1.isEmpty();
    java.util.Iterator var4 = var1.iterator();
    boolean var5 = var1.isEmpty();
    var1.enqueue((java.lang.Object)'#');
    boolean var8 = var1.isEmpty();
    int var9 = var1.size();
    java.util.Iterator var10 = var1.iterator();
    boolean var11 = var1.isEmpty();
    java.util.Iterator var12 = var1.iterator();
    int var13 = var1.size();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var15 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var15.enqueue((java.lang.Object)'#');
    int var18 = var15.size();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var20 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var21 = var20.isEmpty();
    boolean var22 = var20.isEmpty();
    java.util.Iterator var23 = var20.iterator();
    boolean var24 = var20.isEmpty();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var26 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var26.enqueue((java.lang.Object)'#');
    java.util.Iterator var29 = var26.iterator();
    java.util.Iterator var30 = var26.iterator();
    var26.enqueue((java.lang.Object)false);
    int var33 = var26.size();
    var20.enqueue((java.lang.Object)var26);
    var15.enqueue((java.lang.Object)var26);
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var37 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var37.enqueue((java.lang.Object)1.0d);
    java.util.Iterator var40 = var37.iterator();
    boolean var41 = var37.isEmpty();
    boolean var42 = var37.isEmpty();
    boolean var43 = var37.isEmpty();
    var15.enqueue((java.lang.Object)var37);
    var1.enqueue((java.lang.Object)var15);
    int var46 = var15.size();
    java.lang.Object var47 = var15.dequeue();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var47 + "' != '" + '#'+ "'", var47.equals('#'));

  }

  public void test206() throws Throwable {

    if (debug) System.out.printf("%nRingBufferMutantTest1.test206");


    at.fhhagenberg.sqe.exercise13.RingBufferMutant var1 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(4);
    java.util.Iterator var2 = var1.iterator();
    boolean var3 = var1.isEmpty();
    java.util.Iterator var4 = var1.iterator();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.Object var5 = var1.dequeue();
      fail("Expected exception of type java.lang.RuntimeException");
    } catch (java.lang.RuntimeException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);

  }

  public void test207() throws Throwable {

    if (debug) System.out.printf("%nRingBufferMutantTest1.test207");


    at.fhhagenberg.sqe.exercise13.RingBufferMutant var1 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var2 = var1.isEmpty();
    boolean var3 = var1.isEmpty();
    java.util.Iterator var4 = var1.iterator();
    boolean var5 = var1.isEmpty();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var7 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var7.enqueue((java.lang.Object)'#');
    java.util.Iterator var10 = var7.iterator();
    java.util.Iterator var11 = var7.iterator();
    var7.enqueue((java.lang.Object)false);
    int var14 = var7.size();
    var1.enqueue((java.lang.Object)var7);
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var17 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var17.enqueue((java.lang.Object)'#');
    var17.enqueue((java.lang.Object)' ');
    int var22 = var17.size();
    java.util.Iterator var23 = var17.iterator();
    boolean var24 = var17.isEmpty();
    java.util.Iterator var25 = var17.iterator();
    var7.enqueue((java.lang.Object)var17);
    boolean var27 = var7.isEmpty();
    int var28 = var7.size();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var30 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var30.enqueue((java.lang.Object)'#');
    int var33 = var30.size();
    int var34 = var30.size();
    java.util.Iterator var35 = var30.iterator();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var37 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var38 = var37.isEmpty();
    boolean var39 = var37.isEmpty();
    java.util.Iterator var40 = var37.iterator();
    boolean var41 = var37.isEmpty();
    var37.enqueue((java.lang.Object)1.0d);
    java.util.Iterator var44 = var37.iterator();
    var30.enqueue((java.lang.Object)var44);
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var47 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var48 = var47.isEmpty();
    boolean var49 = var47.isEmpty();
    int var50 = var47.size();
    java.util.Iterator var51 = var47.iterator();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var53 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var53.enqueue((java.lang.Object)'#');
    int var56 = var53.size();
    var53.enqueue((java.lang.Object)true);
    java.util.Iterator var59 = var53.iterator();
    var47.enqueue((java.lang.Object)var59);
    java.lang.Object var61 = var47.dequeue();
    var47.enqueue((java.lang.Object)10.0f);
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var65 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var65.enqueue((java.lang.Object)'#');
    int var68 = var65.size();
    java.lang.Object var69 = var65.dequeue();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var71 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var71.enqueue((java.lang.Object)'#');
    var71.enqueue((java.lang.Object)' ');
    int var76 = var71.size();
    int var77 = var71.size();
    java.util.Iterator var78 = var71.iterator();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var80 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(0);
    java.util.Iterator var81 = var80.iterator();
    var71.enqueue((java.lang.Object)var81);
    var65.enqueue((java.lang.Object)var71);
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var85 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var86 = var85.isEmpty();
    boolean var87 = var85.isEmpty();
    java.util.Iterator var88 = var85.iterator();
    boolean var89 = var85.isEmpty();
    int var90 = var85.size();
    java.util.Iterator var91 = var85.iterator();
    int var92 = var85.size();
    int var93 = var85.size();
    java.util.Iterator var94 = var85.iterator();
    var65.enqueue((java.lang.Object)var94);
    var47.enqueue((java.lang.Object)var94);
    var30.enqueue((java.lang.Object)var47);
    var7.enqueue((java.lang.Object)var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var69 + "' != '" + '#'+ "'", var69.equals('#'));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var76 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var77 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var86 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var87 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var88);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var89 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var90 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var91);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var92 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var93 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var94);

  }

  public void test208() throws Throwable {

    if (debug) System.out.printf("%nRingBufferMutantTest1.test208");


    at.fhhagenberg.sqe.exercise13.RingBufferMutant var1 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var2 = var1.isEmpty();
    boolean var3 = var1.isEmpty();
    java.util.Iterator var4 = var1.iterator();
    boolean var5 = var1.isEmpty();
    var1.enqueue((java.lang.Object)'#');
    boolean var8 = var1.isEmpty();
    int var9 = var1.size();
    java.util.Iterator var10 = var1.iterator();
    boolean var11 = var1.isEmpty();
    int var12 = var1.size();
    int var13 = var1.size();
    int var14 = var1.size();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 1);

  }

  public void test209() throws Throwable {

    if (debug) System.out.printf("%nRingBufferMutantTest1.test209");


    at.fhhagenberg.sqe.exercise13.RingBufferMutant var1 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var2 = var1.isEmpty();
    boolean var3 = var1.isEmpty();
    java.util.Iterator var4 = var1.iterator();
    boolean var5 = var1.isEmpty();
    var1.enqueue((java.lang.Object)'#');
    boolean var8 = var1.isEmpty();
    boolean var9 = var1.isEmpty();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var11 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(4);
    java.util.Iterator var12 = var11.iterator();
    java.util.Iterator var13 = var11.iterator();
    var1.enqueue((java.lang.Object)var11);
    java.util.Iterator var15 = var1.iterator();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);

  }

  public void test210() throws Throwable {

    if (debug) System.out.printf("%nRingBufferMutantTest1.test210");


    at.fhhagenberg.sqe.exercise13.RingBufferMutant var1 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var1.enqueue((java.lang.Object)'#');
    var1.enqueue((java.lang.Object)' ');
    int var6 = var1.size();
    java.util.Iterator var7 = var1.iterator();
    boolean var8 = var1.isEmpty();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var10 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var11 = var10.isEmpty();
    boolean var12 = var10.isEmpty();
    java.util.Iterator var13 = var10.iterator();
    boolean var14 = var10.isEmpty();
    java.util.Iterator var15 = var10.iterator();
    int var16 = var10.size();
    var1.enqueue((java.lang.Object)var16);
    int var18 = var1.size();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var20 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var20.enqueue((java.lang.Object)'#');
    java.util.Iterator var23 = var20.iterator();
    java.util.Iterator var24 = var20.iterator();
    var20.enqueue((java.lang.Object)false);
    int var27 = var20.size();
    boolean var28 = var20.isEmpty();
    boolean var29 = var20.isEmpty();
    boolean var30 = var20.isEmpty();
    int var31 = var20.size();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var33 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(100);
    int var34 = var33.size();
    java.util.Iterator var35 = var33.iterator();
    var20.enqueue((java.lang.Object)var33);
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var38 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var39 = var38.isEmpty();
    boolean var40 = var38.isEmpty();
    boolean var41 = var38.isEmpty();
    int var42 = var38.size();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var44 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(1);
    var38.enqueue((java.lang.Object)var44);
    java.lang.Object var46 = var38.dequeue();
    var20.enqueue(var46);
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var49 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var49.enqueue((java.lang.Object)'#');
    var49.enqueue((java.lang.Object)' ');
    int var54 = var49.size();
    java.util.Iterator var55 = var49.iterator();
    boolean var56 = var49.isEmpty();
    java.util.Iterator var57 = var49.iterator();
    int var58 = var49.size();
    java.util.Iterator var59 = var49.iterator();
    java.util.Iterator var60 = var49.iterator();
    var20.enqueue((java.lang.Object)var60);
    var1.enqueue((java.lang.Object)var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);

  }

  public void test211() throws Throwable {

    if (debug) System.out.printf("%nRingBufferMutantTest1.test211");


    at.fhhagenberg.sqe.exercise13.RingBufferMutant var1 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var1.enqueue((java.lang.Object)1.0d);
    int var4 = var1.size();
    boolean var5 = var1.isEmpty();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var7 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var7.enqueue((java.lang.Object)'#');
    java.util.Iterator var10 = var7.iterator();
    java.util.Iterator var11 = var7.iterator();
    java.util.Iterator var12 = var7.iterator();
    java.lang.Object var13 = var7.dequeue();
    java.util.Iterator var14 = var7.iterator();
    var1.enqueue((java.lang.Object)var7);
    java.util.Iterator var16 = var1.iterator();
    java.util.Iterator var17 = var1.iterator();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + '#'+ "'", var13.equals('#'));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);

  }

  public void test212() throws Throwable {

    if (debug) System.out.printf("%nRingBufferMutantTest1.test212");


    at.fhhagenberg.sqe.exercise13.RingBufferMutant var1 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var1.enqueue((java.lang.Object)'#');
    java.util.Iterator var4 = var1.iterator();
    var1.enqueue((java.lang.Object)100.0d);
    boolean var7 = var1.isEmpty();
    java.util.Iterator var8 = var1.iterator();
    java.util.Iterator var9 = var1.iterator();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);

  }

  public void test213() throws Throwable {

    if (debug) System.out.printf("%nRingBufferMutantTest1.test213");


    at.fhhagenberg.sqe.exercise13.RingBufferMutant var1 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var1.enqueue((java.lang.Object)'#');
    java.util.Iterator var4 = var1.iterator();
    java.util.Iterator var5 = var1.iterator();
    var1.enqueue((java.lang.Object)false);
    int var8 = var1.size();
    boolean var9 = var1.isEmpty();
    java.util.Iterator var10 = var1.iterator();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var12 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var13 = var12.isEmpty();
    boolean var14 = var12.isEmpty();
    java.util.Iterator var15 = var12.iterator();
    boolean var16 = var12.isEmpty();
    int var17 = var12.size();
    java.util.Iterator var18 = var12.iterator();
    var1.enqueue((java.lang.Object)var18);
    var1.enqueue((java.lang.Object)100L);
    java.lang.Object var22 = var1.dequeue();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var22 + "' != '" + '#'+ "'", var22.equals('#'));

  }

  public void test214() throws Throwable {

    if (debug) System.out.printf("%nRingBufferMutantTest1.test214");


    at.fhhagenberg.sqe.exercise13.RingBufferMutant var1 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var1.enqueue((java.lang.Object)'#');
    java.util.Iterator var4 = var1.iterator();
    java.util.Iterator var5 = var1.iterator();
    java.util.Iterator var6 = var1.iterator();
    boolean var7 = var1.isEmpty();
    java.util.Iterator var8 = var1.iterator();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var10 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var11 = var10.isEmpty();
    boolean var12 = var10.isEmpty();
    java.util.Iterator var13 = var10.iterator();
    boolean var14 = var10.isEmpty();
    int var15 = var10.size();
    int var16 = var10.size();
    java.util.Iterator var17 = var10.iterator();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var19 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var19.enqueue((java.lang.Object)'#');
    java.util.Iterator var22 = var19.iterator();
    java.util.Iterator var23 = var19.iterator();
    java.util.Iterator var24 = var19.iterator();
    var10.enqueue((java.lang.Object)var19);
    java.util.Iterator var26 = var10.iterator();
    java.util.Iterator var27 = var10.iterator();
    java.lang.Object var28 = var10.dequeue();
    var1.enqueue((java.lang.Object)var10);
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var31 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var31.enqueue((java.lang.Object)'#');
    int var34 = var31.size();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var36 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var37 = var36.isEmpty();
    boolean var38 = var36.isEmpty();
    java.util.Iterator var39 = var36.iterator();
    boolean var40 = var36.isEmpty();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var42 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var42.enqueue((java.lang.Object)'#');
    java.util.Iterator var45 = var42.iterator();
    java.util.Iterator var46 = var42.iterator();
    var42.enqueue((java.lang.Object)false);
    int var49 = var42.size();
    var36.enqueue((java.lang.Object)var42);
    var31.enqueue((java.lang.Object)var42);
    java.util.Iterator var52 = var42.iterator();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var54 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(0);
    int var55 = var54.size();
    boolean var56 = var54.isEmpty();
    boolean var57 = var54.isEmpty();
    boolean var58 = var54.isEmpty();
    java.util.Iterator var59 = var54.iterator();
    var42.enqueue((java.lang.Object)var54);
    var1.enqueue((java.lang.Object)var54);
    java.util.Iterator var62 = var1.iterator();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);

  }

  public void test215() throws Throwable {

    if (debug) System.out.printf("%nRingBufferMutantTest1.test215");


    at.fhhagenberg.sqe.exercise13.RingBufferMutant var1 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(0);
    java.util.Iterator var2 = var1.iterator();
    java.util.Iterator var3 = var1.iterator();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.Object var4 = var1.dequeue();
      fail("Expected exception of type java.lang.RuntimeException");
    } catch (java.lang.RuntimeException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);

  }

  public void test216() throws Throwable {

    if (debug) System.out.printf("%nRingBufferMutantTest1.test216");


    at.fhhagenberg.sqe.exercise13.RingBufferMutant var1 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var1.enqueue((java.lang.Object)'#');
    java.util.Iterator var4 = var1.iterator();
    java.util.Iterator var5 = var1.iterator();
    var1.enqueue((java.lang.Object)false);
    int var8 = var1.size();
    boolean var9 = var1.isEmpty();
    boolean var10 = var1.isEmpty();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var12 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var12.enqueue((java.lang.Object)'#');
    int var15 = var12.size();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var17 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var18 = var17.isEmpty();
    boolean var19 = var17.isEmpty();
    java.util.Iterator var20 = var17.iterator();
    boolean var21 = var17.isEmpty();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var23 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var23.enqueue((java.lang.Object)'#');
    java.util.Iterator var26 = var23.iterator();
    java.util.Iterator var27 = var23.iterator();
    var23.enqueue((java.lang.Object)false);
    int var30 = var23.size();
    var17.enqueue((java.lang.Object)var23);
    var12.enqueue((java.lang.Object)var23);
    java.util.Iterator var33 = var23.iterator();
    var1.enqueue((java.lang.Object)var23);
    var23.enqueue((java.lang.Object)false);
    java.util.Iterator var37 = var23.iterator();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var39 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(100);
    int var40 = var39.size();
    int var41 = var39.size();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var43 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var44 = var43.isEmpty();
    boolean var45 = var43.isEmpty();
    java.util.Iterator var46 = var43.iterator();
    boolean var47 = var43.isEmpty();
    java.util.Iterator var48 = var43.iterator();
    var39.enqueue((java.lang.Object)var48);
    java.util.Iterator var50 = var39.iterator();
    java.util.Iterator var51 = var39.iterator();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var53 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(0);
    java.util.Iterator var54 = var53.iterator();
    java.util.Iterator var55 = var53.iterator();
    var39.enqueue((java.lang.Object)var53);
    boolean var57 = var39.isEmpty();
    java.lang.Object var58 = var39.dequeue();
    java.util.Iterator var59 = var39.iterator();
    var23.enqueue((java.lang.Object)var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);

  }

  public void test217() throws Throwable {

    if (debug) System.out.printf("%nRingBufferMutantTest1.test217");


    at.fhhagenberg.sqe.exercise13.RingBufferMutant var1 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var1.enqueue((java.lang.Object)'#');
    java.util.Iterator var4 = var1.iterator();
    java.util.Iterator var5 = var1.iterator();
    java.util.Iterator var6 = var1.iterator();
    java.lang.Object var7 = var1.dequeue();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var9 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var10 = var9.isEmpty();
    boolean var11 = var9.isEmpty();
    java.util.Iterator var12 = var9.iterator();
    boolean var13 = var9.isEmpty();
    int var14 = var9.size();
    int var15 = var9.size();
    java.util.Iterator var16 = var9.iterator();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var18 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var18.enqueue((java.lang.Object)'#');
    java.util.Iterator var21 = var18.iterator();
    java.util.Iterator var22 = var18.iterator();
    var18.enqueue((java.lang.Object)false);
    java.lang.Object var25 = var18.dequeue();
    var9.enqueue((java.lang.Object)var18);
    java.util.Iterator var27 = var9.iterator();
    boolean var28 = var9.isEmpty();
    var1.enqueue((java.lang.Object)var9);
    java.lang.Object var30 = var9.dequeue();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var32 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(1);
    java.util.Iterator var33 = var32.iterator();
    boolean var34 = var32.isEmpty();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var36 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var36.enqueue((java.lang.Object)'#');
    java.util.Iterator var39 = var36.iterator();
    java.util.Iterator var40 = var36.iterator();
    var36.enqueue((java.lang.Object)false);
    java.lang.Object var43 = var36.dequeue();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var45 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var46 = var45.isEmpty();
    boolean var47 = var45.isEmpty();
    java.util.Iterator var48 = var45.iterator();
    boolean var49 = var45.isEmpty();
    var45.enqueue((java.lang.Object)'#');
    boolean var52 = var45.isEmpty();
    int var53 = var45.size();
    java.util.Iterator var54 = var45.iterator();
    var36.enqueue((java.lang.Object)var45);
    int var56 = var45.size();
    java.lang.Object var57 = var45.dequeue();
    java.util.Iterator var58 = var45.iterator();
    var32.enqueue((java.lang.Object)var58);
    java.util.Iterator var60 = var32.iterator();
    var9.enqueue((java.lang.Object)var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + '#'+ "'", var7.equals('#'));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var25 + "' != '" + '#'+ "'", var25.equals('#'));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var43 + "' != '" + '#'+ "'", var43.equals('#'));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var57 + "' != '" + '#'+ "'", var57.equals('#'));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);

  }

  public void test218() throws Throwable {

    if (debug) System.out.printf("%nRingBufferMutantTest1.test218");


    at.fhhagenberg.sqe.exercise13.RingBufferMutant var1 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var2 = var1.isEmpty();
    boolean var3 = var1.isEmpty();
    java.util.Iterator var4 = var1.iterator();
    boolean var5 = var1.isEmpty();
    var1.enqueue((java.lang.Object)'#');
    int var8 = var1.size();
    java.util.Iterator var9 = var1.iterator();
    java.lang.Object var10 = var1.dequeue();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var12 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var12.enqueue((java.lang.Object)'#');
    java.util.Iterator var15 = var12.iterator();
    java.util.Iterator var16 = var12.iterator();
    var12.enqueue((java.lang.Object)false);
    java.lang.Object var19 = var12.dequeue();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var21 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var21.enqueue((java.lang.Object)'#');
    java.util.Iterator var24 = var21.iterator();
    java.util.Iterator var25 = var21.iterator();
    var21.enqueue((java.lang.Object)false);
    int var28 = var21.size();
    boolean var29 = var21.isEmpty();
    java.util.Iterator var30 = var21.iterator();
    var12.enqueue((java.lang.Object)var21);
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var33 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var33.enqueue((java.lang.Object)'#');
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var37 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var37.enqueue((java.lang.Object)'#');
    java.util.Iterator var40 = var37.iterator();
    java.util.Iterator var41 = var37.iterator();
    var37.enqueue((java.lang.Object)false);
    int var44 = var37.size();
    boolean var45 = var37.isEmpty();
    java.lang.Object var46 = var37.dequeue();
    java.util.Iterator var47 = var37.iterator();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var49 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var49.enqueue((java.lang.Object)'#');
    java.util.Iterator var52 = var49.iterator();
    java.util.Iterator var53 = var49.iterator();
    java.util.Iterator var54 = var49.iterator();
    var37.enqueue((java.lang.Object)var49);
    var33.enqueue((java.lang.Object)var49);
    java.util.Iterator var57 = var49.iterator();
    boolean var58 = var49.isEmpty();
    boolean var59 = var49.isEmpty();
    int var60 = var49.size();
    var21.enqueue((java.lang.Object)var49);
    var1.enqueue((java.lang.Object)var49);
    java.util.Iterator var63 = var49.iterator();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + '#'+ "'", var10.equals('#'));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + '#'+ "'", var19.equals('#'));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var46 + "' != '" + '#'+ "'", var46.equals('#'));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);

  }

  public void test219() throws Throwable {

    if (debug) System.out.printf("%nRingBufferMutantTest1.test219");


    at.fhhagenberg.sqe.exercise13.RingBufferMutant var1 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var2 = var1.isEmpty();
    boolean var3 = var1.isEmpty();
    java.util.Iterator var4 = var1.iterator();
    boolean var5 = var1.isEmpty();
    var1.enqueue((java.lang.Object)1.0d);
    java.util.Iterator var8 = var1.iterator();
    boolean var9 = var1.isEmpty();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var11 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var11.enqueue((java.lang.Object)'#');
    java.util.Iterator var14 = var11.iterator();
    java.util.Iterator var15 = var11.iterator();
    boolean var16 = var11.isEmpty();
    var1.enqueue((java.lang.Object)var16);
    java.lang.Object var18 = var1.dequeue();
    java.util.Iterator var19 = var1.iterator();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var21 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var21.enqueue((java.lang.Object)'#');
    java.util.Iterator var24 = var21.iterator();
    java.util.Iterator var25 = var21.iterator();
    var21.enqueue((java.lang.Object)false);
    int var28 = var21.size();
    boolean var29 = var21.isEmpty();
    boolean var30 = var21.isEmpty();
    boolean var31 = var21.isEmpty();
    int var32 = var21.size();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var34 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(100);
    int var35 = var34.size();
    java.util.Iterator var36 = var34.iterator();
    var21.enqueue((java.lang.Object)var34);
    java.util.Iterator var38 = var34.iterator();
    var1.enqueue((java.lang.Object)var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var18 + "' != '" + 1.0d+ "'", var18.equals(1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);

  }

  public void test220() throws Throwable {

    if (debug) System.out.printf("%nRingBufferMutantTest1.test220");


    at.fhhagenberg.sqe.exercise13.RingBufferMutant var1 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var1.enqueue((java.lang.Object)'#');
    java.util.Iterator var4 = var1.iterator();
    java.util.Iterator var5 = var1.iterator();
    var1.enqueue((java.lang.Object)false);
    int var8 = var1.size();
    boolean var9 = var1.isEmpty();
    boolean var10 = var1.isEmpty();
    boolean var11 = var1.isEmpty();
    int var12 = var1.size();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var14 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(100);
    int var15 = var14.size();
    java.util.Iterator var16 = var14.iterator();
    var1.enqueue((java.lang.Object)var14);
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var19 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var20 = var19.isEmpty();
    boolean var21 = var19.isEmpty();
    boolean var22 = var19.isEmpty();
    int var23 = var19.size();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var25 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(1);
    var19.enqueue((java.lang.Object)var25);
    java.lang.Object var27 = var19.dequeue();
    var1.enqueue(var27);
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var30 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(1);
    java.util.Iterator var31 = var30.iterator();
    boolean var32 = var30.isEmpty();
    var1.enqueue((java.lang.Object)var30);
    int var34 = var1.size();
    var1.enqueue((java.lang.Object)false);
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var38 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var38.enqueue((java.lang.Object)'#');
    var38.enqueue((java.lang.Object)' ');
    int var43 = var38.size();
    java.util.Iterator var44 = var38.iterator();
    boolean var45 = var38.isEmpty();
    java.util.Iterator var46 = var38.iterator();
    int var47 = var38.size();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var49 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var49.enqueue((java.lang.Object)'#');
    int var52 = var49.size();
    var49.enqueue((java.lang.Object)true);
    var38.enqueue((java.lang.Object)true);
    boolean var56 = var38.isEmpty();
    var1.enqueue((java.lang.Object)var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == false);

  }

  public void test221() throws Throwable {

    if (debug) System.out.printf("%nRingBufferMutantTest1.test221");


    at.fhhagenberg.sqe.exercise13.RingBufferMutant var1 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(100);
    java.util.Iterator var2 = var1.iterator();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var4 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(0);
    int var5 = var4.size();
    boolean var6 = var4.isEmpty();
    boolean var7 = var4.isEmpty();
    boolean var8 = var4.isEmpty();
    boolean var9 = var4.isEmpty();
    boolean var10 = var4.isEmpty();
    var1.enqueue((java.lang.Object)var10);
    int var12 = var1.size();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var14 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var14.enqueue((java.lang.Object)'#');
    var14.enqueue((java.lang.Object)' ');
    int var19 = var14.size();
    java.util.Iterator var20 = var14.iterator();
    boolean var21 = var14.isEmpty();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var23 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var24 = var23.isEmpty();
    boolean var25 = var23.isEmpty();
    java.util.Iterator var26 = var23.iterator();
    boolean var27 = var23.isEmpty();
    java.util.Iterator var28 = var23.iterator();
    int var29 = var23.size();
    var14.enqueue((java.lang.Object)var29);
    java.lang.Object var31 = var14.dequeue();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var33 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var34 = var33.isEmpty();
    boolean var35 = var33.isEmpty();
    int var36 = var33.size();
    java.util.Iterator var37 = var33.iterator();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var39 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var39.enqueue((java.lang.Object)'#');
    int var42 = var39.size();
    var39.enqueue((java.lang.Object)true);
    java.util.Iterator var45 = var39.iterator();
    var33.enqueue((java.lang.Object)var45);
    java.util.Iterator var47 = var33.iterator();
    int var48 = var33.size();
    java.lang.Object var49 = var33.dequeue();
    var14.enqueue((java.lang.Object)var33);
    var1.enqueue((java.lang.Object)var14);
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var53 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var54 = var53.isEmpty();
    boolean var55 = var53.isEmpty();
    java.util.Iterator var56 = var53.iterator();
    boolean var57 = var53.isEmpty();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var59 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var59.enqueue((java.lang.Object)'#');
    java.util.Iterator var62 = var59.iterator();
    java.util.Iterator var63 = var59.iterator();
    var59.enqueue((java.lang.Object)false);
    int var66 = var59.size();
    var53.enqueue((java.lang.Object)var59);
    int var68 = var53.size();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var70 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var71 = var70.isEmpty();
    boolean var72 = var70.isEmpty();
    java.util.Iterator var73 = var70.iterator();
    boolean var74 = var70.isEmpty();
    java.util.Iterator var75 = var70.iterator();
    int var76 = var70.size();
    var53.enqueue((java.lang.Object)var76);
    java.util.Iterator var78 = var53.iterator();
    boolean var79 = var53.isEmpty();
    var14.enqueue((java.lang.Object)var53);
    java.util.Iterator var81 = var53.iterator();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var31 + "' != '" + '#'+ "'", var31.equals('#'));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var76 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var79 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);

  }

  public void test222() throws Throwable {

    if (debug) System.out.printf("%nRingBufferMutantTest1.test222");


    at.fhhagenberg.sqe.exercise13.RingBufferMutant var1 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(0);
    int var2 = var1.size();
    boolean var3 = var1.isEmpty();
    java.util.Iterator var4 = var1.iterator();
    int var5 = var1.size();
    int var6 = var1.size();
    boolean var7 = var1.isEmpty();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.Object var8 = var1.dequeue();
      fail("Expected exception of type java.lang.RuntimeException");
    } catch (java.lang.RuntimeException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);

  }

  public void test223() throws Throwable {

    if (debug) System.out.printf("%nRingBufferMutantTest1.test223");


    at.fhhagenberg.sqe.exercise13.RingBufferMutant var1 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(100);
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var3 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var3.enqueue((java.lang.Object)'#');
    java.util.Iterator var6 = var3.iterator();
    java.util.Iterator var7 = var3.iterator();
    var3.enqueue((java.lang.Object)false);
    int var10 = var3.size();
    boolean var11 = var3.isEmpty();
    int var12 = var3.size();
    java.lang.Object var13 = new java.lang.Object();
    var3.enqueue(var13);
    var1.enqueue((java.lang.Object)var3);
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var17 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var17.enqueue((java.lang.Object)'#');
    java.util.Iterator var20 = var17.iterator();
    java.util.Iterator var21 = var17.iterator();
    var17.enqueue((java.lang.Object)false);
    int var24 = var17.size();
    boolean var25 = var17.isEmpty();
    boolean var26 = var17.isEmpty();
    boolean var27 = var17.isEmpty();
    int var28 = var17.size();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var30 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(100);
    int var31 = var30.size();
    java.util.Iterator var32 = var30.iterator();
    var17.enqueue((java.lang.Object)var30);
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var35 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var36 = var35.isEmpty();
    boolean var37 = var35.isEmpty();
    boolean var38 = var35.isEmpty();
    int var39 = var35.size();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var41 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(1);
    var35.enqueue((java.lang.Object)var41);
    java.lang.Object var43 = var35.dequeue();
    var17.enqueue(var43);
    int var45 = var17.size();
    boolean var46 = var17.isEmpty();
    var3.enqueue((java.lang.Object)var17);
    boolean var48 = var3.isEmpty();
    boolean var49 = var3.isEmpty();
    int var50 = var3.size();
    java.util.Iterator var51 = var3.iterator();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);

  }

  public void test224() throws Throwable {

    if (debug) System.out.printf("%nRingBufferMutantTest1.test224");


    at.fhhagenberg.sqe.exercise13.RingBufferMutant var1 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var2 = var1.isEmpty();
    boolean var3 = var1.isEmpty();
    java.util.Iterator var4 = var1.iterator();
    boolean var5 = var1.isEmpty();
    var1.enqueue((java.lang.Object)'#');
    boolean var8 = var1.isEmpty();
    boolean var9 = var1.isEmpty();
    java.util.Iterator var10 = var1.iterator();
    int var11 = var1.size();
    boolean var12 = var1.isEmpty();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);

  }

  public void test225() throws Throwable {

    if (debug) System.out.printf("%nRingBufferMutantTest1.test225");


    at.fhhagenberg.sqe.exercise13.RingBufferMutant var1 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var2 = var1.isEmpty();
    boolean var3 = var1.isEmpty();
    java.util.Iterator var4 = var1.iterator();
    boolean var5 = var1.isEmpty();
    int var6 = var1.size();
    int var7 = var1.size();
    java.util.Iterator var8 = var1.iterator();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var10 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var10.enqueue((java.lang.Object)'#');
    java.util.Iterator var13 = var10.iterator();
    java.util.Iterator var14 = var10.iterator();
    java.util.Iterator var15 = var10.iterator();
    var1.enqueue((java.lang.Object)var10);
    java.util.Iterator var17 = var1.iterator();
    java.util.Iterator var18 = var1.iterator();
    boolean var19 = var1.isEmpty();
    java.util.Iterator var20 = var1.iterator();
    int var21 = var1.size();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 1);

  }

  public void test226() throws Throwable {

    if (debug) System.out.printf("%nRingBufferMutantTest1.test226");


    at.fhhagenberg.sqe.exercise13.RingBufferMutant var1 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var1.enqueue((java.lang.Object)'#');
    int var4 = var1.size();
    int var5 = var1.size();
    java.util.Iterator var6 = var1.iterator();
    boolean var7 = var1.isEmpty();
    java.util.Iterator var8 = var1.iterator();
    java.util.Iterator var9 = var1.iterator();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var11 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var11.enqueue((java.lang.Object)1.0d);
    java.util.Iterator var14 = var11.iterator();
    boolean var15 = var11.isEmpty();
    boolean var16 = var11.isEmpty();
    var1.enqueue((java.lang.Object)var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);

  }

  public void test227() throws Throwable {

    if (debug) System.out.printf("%nRingBufferMutantTest1.test227");


    at.fhhagenberg.sqe.exercise13.RingBufferMutant var1 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var1.enqueue((java.lang.Object)'#');
    var1.enqueue((java.lang.Object)' ');
    int var6 = var1.size();
    int var7 = var1.size();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var9 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var10 = var9.isEmpty();
    boolean var11 = var9.isEmpty();
    java.util.Iterator var12 = var9.iterator();
    boolean var13 = var9.isEmpty();
    var9.enqueue((java.lang.Object)'#');
    boolean var16 = var9.isEmpty();
    var1.enqueue((java.lang.Object)var16);
    int var18 = var1.size();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var20 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var21 = var20.isEmpty();
    boolean var22 = var20.isEmpty();
    java.util.Iterator var23 = var20.iterator();
    boolean var24 = var20.isEmpty();
    var20.enqueue((java.lang.Object)'#');
    boolean var27 = var20.isEmpty();
    int var28 = var20.size();
    java.util.Iterator var29 = var20.iterator();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var31 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var31.enqueue((java.lang.Object)'#');
    java.util.Iterator var34 = var31.iterator();
    var31.enqueue((java.lang.Object)100.0d);
    boolean var37 = var31.isEmpty();
    java.lang.Object var38 = var31.dequeue();
    var20.enqueue(var38);
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var41 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var41.enqueue((java.lang.Object)'#');
    java.util.Iterator var44 = var41.iterator();
    var20.enqueue((java.lang.Object)var41);
    boolean var46 = var41.isEmpty();
    java.util.Iterator var47 = var41.iterator();
    java.util.Iterator var48 = var41.iterator();
    boolean var49 = var41.isEmpty();
    var1.enqueue((java.lang.Object)var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var38 + "' != '" + '#'+ "'", var38.equals('#'));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == false);

  }

  public void test228() throws Throwable {

    if (debug) System.out.printf("%nRingBufferMutantTest1.test228");


    at.fhhagenberg.sqe.exercise13.RingBufferMutant var1 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(1);
    boolean var2 = var1.isEmpty();
    boolean var3 = var1.isEmpty();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var5 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var5.enqueue((java.lang.Object)'#');
    java.util.Iterator var8 = var5.iterator();
    java.util.Iterator var9 = var5.iterator();
    boolean var10 = var5.isEmpty();
    int var11 = var5.size();
    var5.enqueue((java.lang.Object)1.0d);
    boolean var14 = var5.isEmpty();
    var1.enqueue((java.lang.Object)var5);
    java.lang.Object var16 = var5.dequeue();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + '#'+ "'", var16.equals('#'));

  }

  public void test229() throws Throwable {

    if (debug) System.out.printf("%nRingBufferMutantTest1.test229");


    at.fhhagenberg.sqe.exercise13.RingBufferMutant var1 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var1.enqueue((java.lang.Object)'#');
    java.util.Iterator var4 = var1.iterator();
    java.util.Iterator var5 = var1.iterator();
    java.util.Iterator var6 = var1.iterator();
    boolean var7 = var1.isEmpty();
    java.util.Iterator var8 = var1.iterator();
    java.util.Iterator var9 = var1.iterator();
    boolean var10 = var1.isEmpty();
    int var11 = var1.size();
    int var12 = var1.size();
    java.lang.Object var13 = var1.dequeue();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + '#'+ "'", var13.equals('#'));

  }

  public void test230() throws Throwable {

    if (debug) System.out.printf("%nRingBufferMutantTest1.test230");


    at.fhhagenberg.sqe.exercise13.RingBufferMutant var1 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var1.enqueue((java.lang.Object)'#');
    java.util.Iterator var4 = var1.iterator();
    java.util.Iterator var5 = var1.iterator();
    var1.enqueue((java.lang.Object)false);
    int var8 = var1.size();
    boolean var9 = var1.isEmpty();
    java.lang.Object var10 = var1.dequeue();
    java.util.Iterator var11 = var1.iterator();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var13 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var13.enqueue((java.lang.Object)'#');
    java.util.Iterator var16 = var13.iterator();
    java.util.Iterator var17 = var13.iterator();
    java.util.Iterator var18 = var13.iterator();
    var1.enqueue((java.lang.Object)var13);
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var21 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(0);
    int var22 = var21.size();
    boolean var23 = var21.isEmpty();
    boolean var24 = var21.isEmpty();
    boolean var25 = var21.isEmpty();
    var13.enqueue((java.lang.Object)var21);
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var28 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var28.enqueue((java.lang.Object)'#');
    java.util.Iterator var31 = var28.iterator();
    java.util.Iterator var32 = var28.iterator();
    var28.enqueue((java.lang.Object)false);
    int var35 = var28.size();
    boolean var36 = var28.isEmpty();
    java.lang.Object var37 = var28.dequeue();
    java.util.Iterator var38 = var28.iterator();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var40 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var40.enqueue((java.lang.Object)'#');
    java.util.Iterator var43 = var40.iterator();
    java.util.Iterator var44 = var40.iterator();
    java.util.Iterator var45 = var40.iterator();
    var28.enqueue((java.lang.Object)var40);
    var40.enqueue((java.lang.Object)(-1.0d));
    java.util.Iterator var49 = var40.iterator();
    java.lang.Object var50 = var40.dequeue();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var52 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var53 = var52.isEmpty();
    boolean var54 = var52.isEmpty();
    java.util.Iterator var55 = var52.iterator();
    boolean var56 = var52.isEmpty();
    java.util.Iterator var57 = var52.iterator();
    int var58 = var52.size();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var60 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var61 = var60.isEmpty();
    boolean var62 = var60.isEmpty();
    java.util.Iterator var63 = var60.iterator();
    boolean var64 = var60.isEmpty();
    var60.enqueue((java.lang.Object)'#');
    boolean var67 = var60.isEmpty();
    int var68 = var60.size();
    java.util.Iterator var69 = var60.iterator();
    boolean var70 = var60.isEmpty();
    java.util.Iterator var71 = var60.iterator();
    var52.enqueue((java.lang.Object)var71);
    int var73 = var52.size();
    int var74 = var52.size();
    var40.enqueue((java.lang.Object)var52);
    var13.enqueue((java.lang.Object)var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + '#'+ "'", var10.equals('#'));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var37 + "' != '" + '#'+ "'", var37.equals('#'));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var50 + "' != '" + '#'+ "'", var50.equals('#'));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == 1);

  }

  public void test231() throws Throwable {

    if (debug) System.out.printf("%nRingBufferMutantTest1.test231");


    at.fhhagenberg.sqe.exercise13.RingBufferMutant var1 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var1.enqueue((java.lang.Object)'#');
    int var4 = var1.size();
    java.lang.Object var5 = var1.dequeue();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var7 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var7.enqueue((java.lang.Object)'#');
    var7.enqueue((java.lang.Object)' ');
    int var12 = var7.size();
    int var13 = var7.size();
    java.util.Iterator var14 = var7.iterator();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var16 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(0);
    java.util.Iterator var17 = var16.iterator();
    var7.enqueue((java.lang.Object)var17);
    var1.enqueue((java.lang.Object)var7);
    boolean var20 = var7.isEmpty();
    java.util.Iterator var21 = var7.iterator();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + '#'+ "'", var5.equals('#'));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);

  }

  public void test232() throws Throwable {

    if (debug) System.out.printf("%nRingBufferMutantTest1.test232");


    at.fhhagenberg.sqe.exercise13.RingBufferMutant var1 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var1.enqueue((java.lang.Object)1.0d);
    java.util.Iterator var4 = var1.iterator();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var6 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(1);
    boolean var7 = var6.isEmpty();
    boolean var8 = var6.isEmpty();
    java.util.Iterator var9 = var6.iterator();
    var1.enqueue((java.lang.Object)var6);
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var12 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var12.enqueue((java.lang.Object)'#');
    java.util.Iterator var15 = var12.iterator();
    java.util.Iterator var16 = var12.iterator();
    var12.enqueue((java.lang.Object)false);
    int var19 = var12.size();
    boolean var20 = var12.isEmpty();
    boolean var21 = var12.isEmpty();
    boolean var22 = var12.isEmpty();
    java.lang.Object var23 = var12.dequeue();
    java.util.Iterator var24 = var12.iterator();
    var1.enqueue((java.lang.Object)var12);
    int var26 = var1.size();
    java.util.Iterator var27 = var1.iterator();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var29 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var29.enqueue((java.lang.Object)'#');
    java.util.Iterator var32 = var29.iterator();
    java.util.Iterator var33 = var29.iterator();
    boolean var34 = var29.isEmpty();
    int var35 = var29.size();
    var29.enqueue((java.lang.Object)1.0d);
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var39 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var39.enqueue((java.lang.Object)'#');
    java.util.Iterator var42 = var39.iterator();
    java.util.Iterator var43 = var39.iterator();
    var39.enqueue((java.lang.Object)false);
    int var46 = var39.size();
    boolean var47 = var39.isEmpty();
    int var48 = var39.size();
    var29.enqueue((java.lang.Object)var48);
    var1.enqueue((java.lang.Object)var29);
    int var51 = var1.size();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + '#'+ "'", var23.equals('#'));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == 4);

  }

  public void test233() throws Throwable {

    if (debug) System.out.printf("%nRingBufferMutantTest1.test233");


    at.fhhagenberg.sqe.exercise13.RingBufferMutant var1 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var1.enqueue((java.lang.Object)'#');
    java.util.Iterator var4 = var1.iterator();
    java.util.Iterator var5 = var1.iterator();
    var1.enqueue((java.lang.Object)false);
    java.lang.Object var8 = var1.dequeue();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var10 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var10.enqueue((java.lang.Object)'#');
    int var13 = var10.size();
    var10.enqueue((java.lang.Object)true);
    java.util.Iterator var16 = var10.iterator();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var18 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(100);
    var10.enqueue((java.lang.Object)100);
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var21 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var22 = var21.isEmpty();
    boolean var23 = var21.isEmpty();
    java.util.Iterator var24 = var21.iterator();
    boolean var25 = var21.isEmpty();
    int var26 = var21.size();
    int var27 = var21.size();
    java.util.Iterator var28 = var21.iterator();
    var10.enqueue((java.lang.Object)var21);
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var31 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var32 = var31.isEmpty();
    boolean var33 = var31.isEmpty();
    java.util.Iterator var34 = var31.iterator();
    boolean var35 = var31.isEmpty();
    var31.enqueue((java.lang.Object)'#');
    boolean var38 = var31.isEmpty();
    int var39 = var31.size();
    var10.enqueue((java.lang.Object)var39);
    int var41 = var10.size();
    var1.enqueue((java.lang.Object)var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + '#'+ "'", var8.equals('#'));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == 5);

  }

  public void test234() throws Throwable {

    if (debug) System.out.printf("%nRingBufferMutantTest1.test234");


    at.fhhagenberg.sqe.exercise13.RingBufferMutant var1 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(0);
    java.util.Iterator var2 = var1.iterator();
    int var3 = var1.size();
    java.util.Iterator var4 = var1.iterator();
    boolean var5 = var1.isEmpty();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var7 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var8 = var7.isEmpty();
    boolean var9 = var7.isEmpty();
    java.util.Iterator var10 = var7.iterator();
    boolean var11 = var7.isEmpty();
    var7.enqueue((java.lang.Object)'#');
    boolean var14 = var7.isEmpty();
    int var15 = var7.size();
    java.util.Iterator var16 = var7.iterator();
    boolean var17 = var7.isEmpty();
    java.util.Iterator var18 = var7.iterator();
    java.lang.Object var19 = var7.dequeue();
    java.util.Iterator var20 = var7.iterator();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var22 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var22.enqueue((java.lang.Object)'#');
    java.util.Iterator var25 = var22.iterator();
    var22.enqueue((java.lang.Object)100.0d);
    boolean var28 = var22.isEmpty();
    java.util.Iterator var29 = var22.iterator();
    int var30 = var22.size();
    int var31 = var22.size();
    java.lang.Object var32 = var22.dequeue();
    java.util.Iterator var33 = var22.iterator();
    var7.enqueue((java.lang.Object)var22);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var1.enqueue((java.lang.Object)var22);
      fail("Expected exception of type java.lang.RuntimeException");
    } catch (java.lang.RuntimeException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + '#'+ "'", var19.equals('#'));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var32 + "' != '" + '#'+ "'", var32.equals('#'));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);

  }

  public void test235() throws Throwable {

    if (debug) System.out.printf("%nRingBufferMutantTest1.test235");


    at.fhhagenberg.sqe.exercise13.RingBufferMutant var1 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var2 = var1.isEmpty();
    boolean var3 = var1.isEmpty();
    int var4 = var1.size();
    java.util.Iterator var5 = var1.iterator();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var7 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var7.enqueue((java.lang.Object)'#');
    int var10 = var7.size();
    var7.enqueue((java.lang.Object)true);
    java.util.Iterator var13 = var7.iterator();
    var1.enqueue((java.lang.Object)var13);
    java.lang.Object var15 = var1.dequeue();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var17 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var18 = var17.isEmpty();
    boolean var19 = var17.isEmpty();
    java.util.Iterator var20 = var17.iterator();
    boolean var21 = var17.isEmpty();
    int var22 = var17.size();
    int var23 = var17.size();
    java.util.Iterator var24 = var17.iterator();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var26 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var26.enqueue((java.lang.Object)'#');
    java.util.Iterator var29 = var26.iterator();
    java.util.Iterator var30 = var26.iterator();
    java.util.Iterator var31 = var26.iterator();
    var17.enqueue((java.lang.Object)var26);
    int var33 = var26.size();
    var1.enqueue((java.lang.Object)var33);
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var36 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var36.enqueue((java.lang.Object)'#');
    var36.enqueue((java.lang.Object)' ');
    int var41 = var36.size();
    int var42 = var36.size();
    java.util.Iterator var43 = var36.iterator();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var45 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(0);
    java.util.Iterator var46 = var45.iterator();
    var36.enqueue((java.lang.Object)var46);
    java.lang.Object var48 = var36.dequeue();
    var1.enqueue((java.lang.Object)var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var48 + "' != '" + '#'+ "'", var48.equals('#'));

  }

  public void test236() throws Throwable {

    if (debug) System.out.printf("%nRingBufferMutantTest1.test236");


    at.fhhagenberg.sqe.exercise13.RingBufferMutant var1 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(100);
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var3 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var3.enqueue((java.lang.Object)'#');
    java.util.Iterator var6 = var3.iterator();
    java.util.Iterator var7 = var3.iterator();
    var3.enqueue((java.lang.Object)false);
    int var10 = var3.size();
    boolean var11 = var3.isEmpty();
    int var12 = var3.size();
    java.lang.Object var13 = new java.lang.Object();
    var3.enqueue(var13);
    var1.enqueue((java.lang.Object)var3);
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var17 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var17.enqueue((java.lang.Object)'#');
    java.util.Iterator var20 = var17.iterator();
    java.util.Iterator var21 = var17.iterator();
    var17.enqueue((java.lang.Object)false);
    int var24 = var17.size();
    boolean var25 = var17.isEmpty();
    boolean var26 = var17.isEmpty();
    boolean var27 = var17.isEmpty();
    int var28 = var17.size();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var30 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(100);
    int var31 = var30.size();
    java.util.Iterator var32 = var30.iterator();
    var17.enqueue((java.lang.Object)var30);
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var35 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var36 = var35.isEmpty();
    boolean var37 = var35.isEmpty();
    boolean var38 = var35.isEmpty();
    int var39 = var35.size();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var41 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(1);
    var35.enqueue((java.lang.Object)var41);
    java.lang.Object var43 = var35.dequeue();
    var17.enqueue(var43);
    int var45 = var17.size();
    boolean var46 = var17.isEmpty();
    var3.enqueue((java.lang.Object)var17);
    int var48 = var17.size();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == 4);

  }

  public void test237() throws Throwable {

    if (debug) System.out.printf("%nRingBufferMutantTest1.test237");


    at.fhhagenberg.sqe.exercise13.RingBufferMutant var1 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var2 = var1.isEmpty();
    boolean var3 = var1.isEmpty();
    java.util.Iterator var4 = var1.iterator();
    boolean var5 = var1.isEmpty();
    int var6 = var1.size();
    java.util.Iterator var7 = var1.iterator();
    java.util.Iterator var8 = var1.iterator();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.Object var9 = var1.dequeue();
      fail("Expected exception of type java.lang.RuntimeException");
    } catch (java.lang.RuntimeException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);

  }

  public void test238() throws Throwable {

    if (debug) System.out.printf("%nRingBufferMutantTest1.test238");


    at.fhhagenberg.sqe.exercise13.RingBufferMutant var1 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(100);
    int var2 = var1.size();
    int var3 = var1.size();
    boolean var4 = var1.isEmpty();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var6 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(100);
    int var7 = var6.size();
    int var8 = var6.size();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var10 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var11 = var10.isEmpty();
    boolean var12 = var10.isEmpty();
    java.util.Iterator var13 = var10.iterator();
    boolean var14 = var10.isEmpty();
    java.util.Iterator var15 = var10.iterator();
    var6.enqueue((java.lang.Object)var15);
    java.util.Iterator var17 = var6.iterator();
    java.util.Iterator var18 = var6.iterator();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var20 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(0);
    java.util.Iterator var21 = var20.iterator();
    java.util.Iterator var22 = var20.iterator();
    var6.enqueue((java.lang.Object)var20);
    var1.enqueue((java.lang.Object)var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);

  }

  public void test239() throws Throwable {

    if (debug) System.out.printf("%nRingBufferMutantTest1.test239");


    at.fhhagenberg.sqe.exercise13.RingBufferMutant var1 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var1.enqueue((java.lang.Object)'#');
    java.util.Iterator var4 = var1.iterator();
    java.util.Iterator var5 = var1.iterator();
    var1.enqueue((java.lang.Object)false);
    int var8 = var1.size();
    boolean var9 = var1.isEmpty();
    boolean var10 = var1.isEmpty();
    var1.enqueue((java.lang.Object)(short)0);
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var14 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var14.enqueue((java.lang.Object)'#');
    java.util.Iterator var17 = var14.iterator();
    java.util.Iterator var18 = var14.iterator();
    java.util.Iterator var19 = var14.iterator();
    boolean var20 = var14.isEmpty();
    java.util.Iterator var21 = var14.iterator();
    boolean var22 = var14.isEmpty();
    var1.enqueue((java.lang.Object)var22);
    java.util.Iterator var24 = var1.iterator();
    java.util.Iterator var25 = var1.iterator();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);

  }

  public void test240() throws Throwable {

    if (debug) System.out.printf("%nRingBufferMutantTest1.test240");


    at.fhhagenberg.sqe.exercise13.RingBufferMutant var1 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var2 = var1.isEmpty();
    boolean var3 = var1.isEmpty();
    java.util.Iterator var4 = var1.iterator();
    boolean var5 = var1.isEmpty();
    int var6 = var1.size();
    int var7 = var1.size();
    boolean var8 = var1.isEmpty();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var10 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(100);
    int var11 = var10.size();
    int var12 = var10.size();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var14 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var14.enqueue((java.lang.Object)1.0d);
    java.util.Iterator var17 = var14.iterator();
    boolean var18 = var14.isEmpty();
    boolean var19 = var14.isEmpty();
    boolean var20 = var14.isEmpty();
    java.util.Iterator var21 = var14.iterator();
    var14.enqueue((java.lang.Object)(short)0);
    var10.enqueue((java.lang.Object)var14);
    var1.enqueue((java.lang.Object)var14);
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var27 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var28 = var27.isEmpty();
    boolean var29 = var27.isEmpty();
    java.util.Iterator var30 = var27.iterator();
    boolean var31 = var27.isEmpty();
    int var32 = var27.size();
    int var33 = var27.size();
    java.util.Iterator var34 = var27.iterator();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var36 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var36.enqueue((java.lang.Object)'#');
    java.util.Iterator var39 = var36.iterator();
    java.util.Iterator var40 = var36.iterator();
    var36.enqueue((java.lang.Object)false);
    java.lang.Object var43 = var36.dequeue();
    var27.enqueue((java.lang.Object)var36);
    java.util.Iterator var45 = var27.iterator();
    boolean var46 = var27.isEmpty();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var48 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var49 = var48.isEmpty();
    boolean var50 = var48.isEmpty();
    int var51 = var48.size();
    java.util.Iterator var52 = var48.iterator();
    var27.enqueue((java.lang.Object)var48);
    var14.enqueue((java.lang.Object)var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var43 + "' != '" + '#'+ "'", var43.equals('#'));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);

  }

  public void test241() throws Throwable {

    if (debug) System.out.printf("%nRingBufferMutantTest1.test241");


    at.fhhagenberg.sqe.exercise13.RingBufferMutant var1 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var2 = var1.isEmpty();
    boolean var3 = var1.isEmpty();
    java.util.Iterator var4 = var1.iterator();
    boolean var5 = var1.isEmpty();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var7 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var7.enqueue((java.lang.Object)'#');
    java.util.Iterator var10 = var7.iterator();
    java.util.Iterator var11 = var7.iterator();
    var7.enqueue((java.lang.Object)false);
    int var14 = var7.size();
    var1.enqueue((java.lang.Object)var7);
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var17 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var17.enqueue((java.lang.Object)'#');
    var17.enqueue((java.lang.Object)' ');
    int var22 = var17.size();
    java.util.Iterator var23 = var17.iterator();
    boolean var24 = var17.isEmpty();
    java.util.Iterator var25 = var17.iterator();
    var7.enqueue((java.lang.Object)var17);
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var28 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var28.enqueue((java.lang.Object)'#');
    java.util.Iterator var31 = var28.iterator();
    java.util.Iterator var32 = var28.iterator();
    java.util.Iterator var33 = var28.iterator();
    boolean var34 = var28.isEmpty();
    java.util.Iterator var35 = var28.iterator();
    java.lang.Object var36 = var28.dequeue();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var38 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var39 = var38.isEmpty();
    boolean var40 = var38.isEmpty();
    boolean var41 = var38.isEmpty();
    int var42 = var38.size();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var44 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(1);
    var38.enqueue((java.lang.Object)var44);
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var47 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(100);
    int var48 = var47.size();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var50 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var50.enqueue((java.lang.Object)'#');
    java.util.Iterator var53 = var50.iterator();
    java.util.Iterator var54 = var50.iterator();
    var50.enqueue((java.lang.Object)false);
    java.lang.Object var57 = var50.dequeue();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var59 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var60 = var59.isEmpty();
    boolean var61 = var59.isEmpty();
    java.util.Iterator var62 = var59.iterator();
    boolean var63 = var59.isEmpty();
    var59.enqueue((java.lang.Object)'#');
    boolean var66 = var59.isEmpty();
    int var67 = var59.size();
    java.util.Iterator var68 = var59.iterator();
    var50.enqueue((java.lang.Object)var59);
    int var70 = var59.size();
    int var71 = var59.size();
    var47.enqueue((java.lang.Object)var71);
    java.lang.Object var73 = var47.dequeue();
    var44.enqueue(var73);
    java.util.Iterator var75 = var44.iterator();
    var28.enqueue((java.lang.Object)var44);
    var7.enqueue((java.lang.Object)var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var36 + "' != '" + '#'+ "'", var36.equals('#'));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var57 + "' != '" + '#'+ "'", var57.equals('#'));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var73 + "' != '" + 1+ "'", var73.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);

  }

  public void test242() throws Throwable {

    if (debug) System.out.printf("%nRingBufferMutantTest1.test242");


    at.fhhagenberg.sqe.exercise13.RingBufferMutant var1 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(100);
    int var2 = var1.size();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var4 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var4.enqueue((java.lang.Object)'#');
    java.util.Iterator var7 = var4.iterator();
    java.util.Iterator var8 = var4.iterator();
    var4.enqueue((java.lang.Object)false);
    java.lang.Object var11 = var4.dequeue();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var13 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var14 = var13.isEmpty();
    boolean var15 = var13.isEmpty();
    java.util.Iterator var16 = var13.iterator();
    boolean var17 = var13.isEmpty();
    var13.enqueue((java.lang.Object)'#');
    boolean var20 = var13.isEmpty();
    int var21 = var13.size();
    java.util.Iterator var22 = var13.iterator();
    var4.enqueue((java.lang.Object)var13);
    int var24 = var13.size();
    int var25 = var13.size();
    var1.enqueue((java.lang.Object)var25);
    boolean var27 = var1.isEmpty();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var29 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var29.enqueue((java.lang.Object)'#');
    var29.enqueue((java.lang.Object)' ');
    int var34 = var29.size();
    int var35 = var29.size();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var37 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(1);
    java.util.Iterator var38 = var37.iterator();
    java.util.Iterator var39 = var37.iterator();
    var29.enqueue((java.lang.Object)var37);
    int var41 = var29.size();
    var1.enqueue((java.lang.Object)var29);
    java.util.Iterator var43 = var1.iterator();
    int var44 = var1.size();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + '#'+ "'", var11.equals('#'));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == 2);

  }

  public void test243() throws Throwable {

    if (debug) System.out.printf("%nRingBufferMutantTest1.test243");


    at.fhhagenberg.sqe.exercise13.RingBufferMutant var1 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var2 = var1.isEmpty();
    boolean var3 = var1.isEmpty();
    int var4 = var1.size();
    var1.enqueue((java.lang.Object)0.0f);
    int var7 = var1.size();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 1);

  }

  public void test244() throws Throwable {

    if (debug) System.out.printf("%nRingBufferMutantTest1.test244");


    at.fhhagenberg.sqe.exercise13.RingBufferMutant var1 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(2);
    java.util.Iterator var2 = var1.iterator();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var4 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var4.enqueue((java.lang.Object)'#');
    java.util.Iterator var7 = var4.iterator();
    java.util.Iterator var8 = var4.iterator();
    var4.enqueue((java.lang.Object)false);
    int var11 = var4.size();
    boolean var12 = var4.isEmpty();
    boolean var13 = var4.isEmpty();
    var1.enqueue((java.lang.Object)var4);
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var16 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var16.enqueue((java.lang.Object)'#');
    java.util.Iterator var19 = var16.iterator();
    java.util.Iterator var20 = var16.iterator();
    var16.enqueue((java.lang.Object)false);
    int var23 = var16.size();
    boolean var24 = var16.isEmpty();
    int var25 = var16.size();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var27 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var27.enqueue((java.lang.Object)'#');
    java.util.Iterator var30 = var27.iterator();
    java.util.Iterator var31 = var27.iterator();
    var27.enqueue((java.lang.Object)false);
    java.lang.Object var34 = var27.dequeue();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var36 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var37 = var36.isEmpty();
    boolean var38 = var36.isEmpty();
    java.util.Iterator var39 = var36.iterator();
    boolean var40 = var36.isEmpty();
    var36.enqueue((java.lang.Object)'#');
    boolean var43 = var36.isEmpty();
    int var44 = var36.size();
    java.util.Iterator var45 = var36.iterator();
    var27.enqueue((java.lang.Object)var36);
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var48 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var48.enqueue((java.lang.Object)'#');
    java.util.Iterator var51 = var48.iterator();
    java.util.Iterator var52 = var48.iterator();
    java.util.Iterator var53 = var48.iterator();
    boolean var54 = var48.isEmpty();
    int var55 = var48.size();
    var27.enqueue((java.lang.Object)var55);
    var16.enqueue((java.lang.Object)var55);
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var59 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var59.enqueue((java.lang.Object)'#');
    java.util.Iterator var62 = var59.iterator();
    java.util.Iterator var63 = var59.iterator();
    var59.enqueue((java.lang.Object)false);
    int var66 = var59.size();
    boolean var67 = var59.isEmpty();
    boolean var68 = var59.isEmpty();
    boolean var69 = var59.isEmpty();
    java.util.Iterator var70 = var59.iterator();
    java.util.Iterator var71 = var59.iterator();
    var16.enqueue((java.lang.Object)var59);
    var1.enqueue((java.lang.Object)var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var34 + "' != '" + '#'+ "'", var34.equals('#'));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);

  }

  public void test245() throws Throwable {

    if (debug) System.out.printf("%nRingBufferMutantTest1.test245");


    at.fhhagenberg.sqe.exercise13.RingBufferMutant var1 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var1.enqueue((java.lang.Object)'#');
    var1.enqueue((java.lang.Object)' ');
    int var6 = var1.size();
    java.util.Iterator var7 = var1.iterator();
    boolean var8 = var1.isEmpty();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var10 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var11 = var10.isEmpty();
    boolean var12 = var10.isEmpty();
    java.util.Iterator var13 = var10.iterator();
    boolean var14 = var10.isEmpty();
    java.util.Iterator var15 = var10.iterator();
    int var16 = var10.size();
    var1.enqueue((java.lang.Object)var16);
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var19 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var19.enqueue((java.lang.Object)1.0d);
    java.util.Iterator var22 = var19.iterator();
    var1.enqueue((java.lang.Object)var22);
    boolean var24 = var1.isEmpty();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var26 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var26.enqueue((java.lang.Object)'#');
    int var29 = var26.size();
    int var30 = var26.size();
    java.lang.Object var31 = var26.dequeue();
    java.util.Iterator var32 = var26.iterator();
    java.util.Iterator var33 = var26.iterator();
    var1.enqueue((java.lang.Object)var33);
    java.util.Iterator var35 = var1.iterator();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var31 + "' != '" + '#'+ "'", var31.equals('#'));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);

  }

  public void test246() throws Throwable {

    if (debug) System.out.printf("%nRingBufferMutantTest1.test246");


    at.fhhagenberg.sqe.exercise13.RingBufferMutant var1 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var2 = var1.isEmpty();
    boolean var3 = var1.isEmpty();
    int var4 = var1.size();
    java.util.Iterator var5 = var1.iterator();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var7 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var7.enqueue((java.lang.Object)'#');
    var7.enqueue((java.lang.Object)' ');
    int var12 = var7.size();
    int var13 = var7.size();
    java.lang.Object var14 = var7.dequeue();
    var1.enqueue(var14);
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var17 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var18 = var17.isEmpty();
    boolean var19 = var17.isEmpty();
    java.util.Iterator var20 = var17.iterator();
    boolean var21 = var17.isEmpty();
    int var22 = var17.size();
    int var23 = var17.size();
    java.util.Iterator var24 = var17.iterator();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var26 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var26.enqueue((java.lang.Object)'#');
    java.util.Iterator var29 = var26.iterator();
    java.util.Iterator var30 = var26.iterator();
    var26.enqueue((java.lang.Object)false);
    java.lang.Object var33 = var26.dequeue();
    var17.enqueue((java.lang.Object)var26);
    java.util.Iterator var35 = var17.iterator();
    var1.enqueue((java.lang.Object)var35);
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var38 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var38.enqueue((java.lang.Object)'#');
    java.util.Iterator var41 = var38.iterator();
    java.util.Iterator var42 = var38.iterator();
    var38.enqueue((java.lang.Object)false);
    int var45 = var38.size();
    boolean var46 = var38.isEmpty();
    boolean var47 = var38.isEmpty();
    boolean var48 = var38.isEmpty();
    int var49 = var38.size();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var51 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(100);
    int var52 = var51.size();
    java.util.Iterator var53 = var51.iterator();
    var38.enqueue((java.lang.Object)var51);
    boolean var55 = var38.isEmpty();
    int var56 = var38.size();
    java.util.Iterator var57 = var38.iterator();
    var1.enqueue((java.lang.Object)var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + '#'+ "'", var14.equals('#'));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var33 + "' != '" + '#'+ "'", var33.equals('#'));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);

  }

  public void test247() throws Throwable {

    if (debug) System.out.printf("%nRingBufferMutantTest1.test247");


    at.fhhagenberg.sqe.exercise13.RingBufferMutant var1 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var1.enqueue((java.lang.Object)'#');
    int var4 = var1.size();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var6 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var7 = var6.isEmpty();
    boolean var8 = var6.isEmpty();
    java.util.Iterator var9 = var6.iterator();
    boolean var10 = var6.isEmpty();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var12 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var12.enqueue((java.lang.Object)'#');
    java.util.Iterator var15 = var12.iterator();
    java.util.Iterator var16 = var12.iterator();
    var12.enqueue((java.lang.Object)false);
    int var19 = var12.size();
    var6.enqueue((java.lang.Object)var12);
    var1.enqueue((java.lang.Object)var12);
    java.util.Iterator var22 = var12.iterator();
    boolean var23 = var12.isEmpty();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var25 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var25.enqueue((java.lang.Object)'#');
    java.util.Iterator var28 = var25.iterator();
    java.util.Iterator var29 = var25.iterator();
    var25.enqueue((java.lang.Object)false);
    java.lang.Object var32 = var25.dequeue();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var34 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var35 = var34.isEmpty();
    boolean var36 = var34.isEmpty();
    java.util.Iterator var37 = var34.iterator();
    boolean var38 = var34.isEmpty();
    var34.enqueue((java.lang.Object)'#');
    boolean var41 = var34.isEmpty();
    int var42 = var34.size();
    java.util.Iterator var43 = var34.iterator();
    var25.enqueue((java.lang.Object)var34);
    var12.enqueue((java.lang.Object)var25);
    boolean var46 = var12.isEmpty();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var32 + "' != '" + '#'+ "'", var32.equals('#'));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);

  }

  public void test248() throws Throwable {

    if (debug) System.out.printf("%nRingBufferMutantTest1.test248");


    at.fhhagenberg.sqe.exercise13.RingBufferMutant var1 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var2 = var1.isEmpty();
    boolean var3 = var1.isEmpty();
    java.util.Iterator var4 = var1.iterator();
    boolean var5 = var1.isEmpty();
    var1.enqueue((java.lang.Object)1.0d);
    java.util.Iterator var8 = var1.iterator();
    java.util.Iterator var9 = var1.iterator();
    java.util.Iterator var10 = var1.iterator();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var12 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var12.enqueue((java.lang.Object)'#');
    int var15 = var12.size();
    var12.enqueue((java.lang.Object)true);
    java.util.Iterator var18 = var12.iterator();
    java.lang.Object var19 = var12.dequeue();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var21 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var22 = var21.isEmpty();
    boolean var23 = var21.isEmpty();
    java.util.Iterator var24 = var21.iterator();
    boolean var25 = var21.isEmpty();
    var12.enqueue((java.lang.Object)var21);
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var28 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var29 = var28.isEmpty();
    boolean var30 = var28.isEmpty();
    java.util.Iterator var31 = var28.iterator();
    boolean var32 = var28.isEmpty();
    var28.enqueue((java.lang.Object)'#');
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var36 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var37 = var36.isEmpty();
    boolean var38 = var36.isEmpty();
    java.util.Iterator var39 = var36.iterator();
    boolean var40 = var36.isEmpty();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var42 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var42.enqueue((java.lang.Object)'#');
    java.util.Iterator var45 = var42.iterator();
    java.util.Iterator var46 = var42.iterator();
    var42.enqueue((java.lang.Object)false);
    int var49 = var42.size();
    var36.enqueue((java.lang.Object)var42);
    int var51 = var36.size();
    var28.enqueue((java.lang.Object)var51);
    var12.enqueue((java.lang.Object)var28);
    var1.enqueue((java.lang.Object)var28);
    java.util.Iterator var55 = var1.iterator();
    int var56 = var1.size();
    int var57 = var1.size();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + '#'+ "'", var19.equals('#'));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == 2);

  }

  public void test249() throws Throwable {

    if (debug) System.out.printf("%nRingBufferMutantTest1.test249");


    at.fhhagenberg.sqe.exercise13.RingBufferMutant var1 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var2 = var1.isEmpty();
    boolean var3 = var1.isEmpty();
    int var4 = var1.size();
    java.util.Iterator var5 = var1.iterator();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var7 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var7.enqueue((java.lang.Object)'#');
    var7.enqueue((java.lang.Object)' ');
    int var12 = var7.size();
    int var13 = var7.size();
    java.lang.Object var14 = var7.dequeue();
    var1.enqueue(var14);
    boolean var16 = var1.isEmpty();
    java.util.Iterator var17 = var1.iterator();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + '#'+ "'", var14.equals('#'));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);

  }

  public void test250() throws Throwable {

    if (debug) System.out.printf("%nRingBufferMutantTest1.test250");


    at.fhhagenberg.sqe.exercise13.RingBufferMutant var1 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var2 = var1.isEmpty();
    boolean var3 = var1.isEmpty();
    java.util.Iterator var4 = var1.iterator();
    boolean var5 = var1.isEmpty();
    int var6 = var1.size();
    int var7 = var1.size();
    java.util.Iterator var8 = var1.iterator();
    int var9 = var1.size();
    int var10 = var1.size();
    java.util.Iterator var11 = var1.iterator();
    var1.enqueue((java.lang.Object)(short)100);
    boolean var14 = var1.isEmpty();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);

  }

  public void test251() throws Throwable {

    if (debug) System.out.printf("%nRingBufferMutantTest1.test251");


    at.fhhagenberg.sqe.exercise13.RingBufferMutant var1 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var1.enqueue((java.lang.Object)'#');
    java.util.Iterator var4 = var1.iterator();
    java.util.Iterator var5 = var1.iterator();
    java.util.Iterator var6 = var1.iterator();
    java.util.Iterator var7 = var1.iterator();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var9 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(100);
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var11 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var11.enqueue((java.lang.Object)'#');
    java.util.Iterator var14 = var11.iterator();
    java.util.Iterator var15 = var11.iterator();
    var11.enqueue((java.lang.Object)false);
    int var18 = var11.size();
    boolean var19 = var11.isEmpty();
    int var20 = var11.size();
    java.lang.Object var21 = new java.lang.Object();
    var11.enqueue(var21);
    var9.enqueue((java.lang.Object)var11);
    var1.enqueue((java.lang.Object)var11);
    boolean var25 = var11.isEmpty();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);

  }

  public void test252() throws Throwable {

    if (debug) System.out.printf("%nRingBufferMutantTest1.test252");


    at.fhhagenberg.sqe.exercise13.RingBufferMutant var1 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var2 = var1.isEmpty();
    boolean var3 = var1.isEmpty();
    java.util.Iterator var4 = var1.iterator();
    boolean var5 = var1.isEmpty();
    int var6 = var1.size();
    java.util.Iterator var7 = var1.iterator();
    int var8 = var1.size();
    boolean var9 = var1.isEmpty();
    int var10 = var1.size();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var12 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var12.enqueue((java.lang.Object)'#');
    int var15 = var12.size();
    int var16 = var12.size();
    java.util.Iterator var17 = var12.iterator();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var19 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var20 = var19.isEmpty();
    boolean var21 = var19.isEmpty();
    java.util.Iterator var22 = var19.iterator();
    boolean var23 = var19.isEmpty();
    var19.enqueue((java.lang.Object)1.0d);
    java.util.Iterator var26 = var19.iterator();
    var12.enqueue((java.lang.Object)var26);
    var1.enqueue((java.lang.Object)var12);
    boolean var29 = var1.isEmpty();
    int var30 = var1.size();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var32 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var32.enqueue((java.lang.Object)1.0d);
    java.util.Iterator var35 = var32.iterator();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var37 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(1);
    boolean var38 = var37.isEmpty();
    boolean var39 = var37.isEmpty();
    java.util.Iterator var40 = var37.iterator();
    var32.enqueue((java.lang.Object)var37);
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var43 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var43.enqueue((java.lang.Object)'#');
    java.util.Iterator var46 = var43.iterator();
    java.util.Iterator var47 = var43.iterator();
    var43.enqueue((java.lang.Object)false);
    int var50 = var43.size();
    boolean var51 = var43.isEmpty();
    boolean var52 = var43.isEmpty();
    boolean var53 = var43.isEmpty();
    java.lang.Object var54 = var43.dequeue();
    java.util.Iterator var55 = var43.iterator();
    var32.enqueue((java.lang.Object)var43);
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var58 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(0);
    int var59 = var58.size();
    boolean var60 = var58.isEmpty();
    boolean var61 = var58.isEmpty();
    boolean var62 = var58.isEmpty();
    var43.enqueue((java.lang.Object)var58);
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var65 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var65.enqueue((java.lang.Object)'#');
    java.util.Iterator var68 = var65.iterator();
    var65.enqueue((java.lang.Object)100.0d);
    java.util.Iterator var71 = var65.iterator();
    var43.enqueue((java.lang.Object)var71);
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var74 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var74.enqueue((java.lang.Object)'#');
    java.util.Iterator var77 = var74.iterator();
    java.util.Iterator var78 = var74.iterator();
    java.lang.Object var79 = var74.dequeue();
    var43.enqueue(var79);
    var1.enqueue(var79);
    java.util.Iterator var82 = var1.iterator();
    int var83 = var1.size();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var54 + "' != '" + '#'+ "'", var54.equals('#'));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var79 + "' != '" + '#'+ "'", var79.equals('#'));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var83 == 2);

  }

  public void test253() throws Throwable {

    if (debug) System.out.printf("%nRingBufferMutantTest1.test253");


    at.fhhagenberg.sqe.exercise13.RingBufferMutant var1 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var1.enqueue((java.lang.Object)'#');
    int var4 = var1.size();
    java.util.Iterator var5 = var1.iterator();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var7 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var8 = var7.isEmpty();
    boolean var9 = var7.isEmpty();
    int var10 = var7.size();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var12 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var13 = var12.isEmpty();
    boolean var14 = var12.isEmpty();
    var7.enqueue((java.lang.Object)var14);
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var17 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var17.enqueue((java.lang.Object)'#');
    int var20 = var17.size();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var22 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var23 = var22.isEmpty();
    boolean var24 = var22.isEmpty();
    java.util.Iterator var25 = var22.iterator();
    boolean var26 = var22.isEmpty();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var28 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var28.enqueue((java.lang.Object)'#');
    java.util.Iterator var31 = var28.iterator();
    java.util.Iterator var32 = var28.iterator();
    var28.enqueue((java.lang.Object)false);
    int var35 = var28.size();
    var22.enqueue((java.lang.Object)var28);
    var17.enqueue((java.lang.Object)var28);
    java.util.Iterator var38 = var28.iterator();
    java.util.Iterator var39 = var28.iterator();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var41 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var42 = var41.isEmpty();
    boolean var43 = var41.isEmpty();
    java.util.Iterator var44 = var41.iterator();
    boolean var45 = var41.isEmpty();
    var41.enqueue((java.lang.Object)'#');
    int var48 = var41.size();
    var28.enqueue((java.lang.Object)var48);
    boolean var50 = var28.isEmpty();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var52 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var52.enqueue((java.lang.Object)'#');
    int var55 = var52.size();
    int var56 = var52.size();
    java.util.Iterator var57 = var52.iterator();
    java.util.Iterator var58 = var52.iterator();
    var28.enqueue((java.lang.Object)var52);
    java.util.Iterator var60 = var28.iterator();
    var7.enqueue((java.lang.Object)var28);
    java.util.Iterator var62 = var28.iterator();
    int var63 = var28.size();
    var1.enqueue((java.lang.Object)var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == 4);

  }

  public void test254() throws Throwable {

    if (debug) System.out.printf("%nRingBufferMutantTest1.test254");


    at.fhhagenberg.sqe.exercise13.RingBufferMutant var1 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var1.enqueue((java.lang.Object)1.0d);
    java.util.Iterator var4 = var1.iterator();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var6 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(1);
    boolean var7 = var6.isEmpty();
    boolean var8 = var6.isEmpty();
    java.util.Iterator var9 = var6.iterator();
    var1.enqueue((java.lang.Object)var6);
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var12 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var12.enqueue((java.lang.Object)'#');
    java.util.Iterator var15 = var12.iterator();
    java.util.Iterator var16 = var12.iterator();
    var12.enqueue((java.lang.Object)false);
    int var19 = var12.size();
    boolean var20 = var12.isEmpty();
    boolean var21 = var12.isEmpty();
    boolean var22 = var12.isEmpty();
    java.lang.Object var23 = var12.dequeue();
    java.util.Iterator var24 = var12.iterator();
    var1.enqueue((java.lang.Object)var12);
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var27 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(0);
    int var28 = var27.size();
    boolean var29 = var27.isEmpty();
    boolean var30 = var27.isEmpty();
    boolean var31 = var27.isEmpty();
    var12.enqueue((java.lang.Object)var27);
    int var33 = var27.size();
    java.util.Iterator var34 = var27.iterator();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + '#'+ "'", var23.equals('#'));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);

  }

  public void test255() throws Throwable {

    if (debug) System.out.printf("%nRingBufferMutantTest1.test255");


    at.fhhagenberg.sqe.exercise13.RingBufferMutant var1 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(1);
    java.util.Iterator var2 = var1.iterator();
    java.util.Iterator var3 = var1.iterator();
    java.util.Iterator var4 = var1.iterator();
    int var5 = var1.size();
    int var6 = var1.size();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var8 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var8.enqueue((java.lang.Object)'#');
    int var11 = var8.size();
    int var12 = var8.size();
    java.util.Iterator var13 = var8.iterator();
    java.util.Iterator var14 = var8.iterator();
    java.lang.Object var15 = var8.dequeue();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var17 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var18 = var17.isEmpty();
    boolean var19 = var17.isEmpty();
    java.util.Iterator var20 = var17.iterator();
    boolean var21 = var17.isEmpty();
    var17.enqueue((java.lang.Object)'#');
    boolean var24 = var17.isEmpty();
    int var25 = var17.size();
    java.util.Iterator var26 = var17.iterator();
    boolean var27 = var17.isEmpty();
    java.util.Iterator var28 = var17.iterator();
    boolean var29 = var17.isEmpty();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var31 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var31.enqueue((java.lang.Object)'#');
    java.util.Iterator var34 = var31.iterator();
    java.util.Iterator var35 = var31.iterator();
    var31.enqueue((java.lang.Object)false);
    java.lang.Object var38 = var31.dequeue();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var40 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var41 = var40.isEmpty();
    boolean var42 = var40.isEmpty();
    java.util.Iterator var43 = var40.iterator();
    boolean var44 = var40.isEmpty();
    var40.enqueue((java.lang.Object)'#');
    boolean var47 = var40.isEmpty();
    int var48 = var40.size();
    java.util.Iterator var49 = var40.iterator();
    var31.enqueue((java.lang.Object)var40);
    java.util.Iterator var51 = var31.iterator();
    var17.enqueue((java.lang.Object)var31);
    var8.enqueue((java.lang.Object)var17);
    boolean var54 = var17.isEmpty();
    java.lang.Object var55 = var17.dequeue();
    var1.enqueue(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var15 + "' != '" + '#'+ "'", var15.equals('#'));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var38 + "' != '" + '#'+ "'", var38.equals('#'));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var55 + "' != '" + '#'+ "'", var55.equals('#'));

  }

  public void test256() throws Throwable {

    if (debug) System.out.printf("%nRingBufferMutantTest1.test256");


    at.fhhagenberg.sqe.exercise13.RingBufferMutant var1 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(1);
    java.util.Iterator var2 = var1.iterator();
    java.util.Iterator var3 = var1.iterator();
    int var4 = var1.size();
    int var5 = var1.size();
    int var6 = var1.size();
    boolean var7 = var1.isEmpty();
    boolean var8 = var1.isEmpty();
    boolean var9 = var1.isEmpty();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == true);

  }

  public void test257() throws Throwable {

    if (debug) System.out.printf("%nRingBufferMutantTest1.test257");


    at.fhhagenberg.sqe.exercise13.RingBufferMutant var1 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var2 = var1.isEmpty();
    boolean var3 = var1.isEmpty();
    java.util.Iterator var4 = var1.iterator();
    boolean var5 = var1.isEmpty();
    var1.enqueue((java.lang.Object)'#');
    boolean var8 = var1.isEmpty();
    int var9 = var1.size();
    java.util.Iterator var10 = var1.iterator();
    boolean var11 = var1.isEmpty();
    boolean var12 = var1.isEmpty();
    java.util.Iterator var13 = var1.iterator();
    int var14 = var1.size();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 1);

  }

  public void test258() throws Throwable {

    if (debug) System.out.printf("%nRingBufferMutantTest1.test258");


    at.fhhagenberg.sqe.exercise13.RingBufferMutant var1 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var1.enqueue((java.lang.Object)'#');
    java.util.Iterator var4 = var1.iterator();
    java.util.Iterator var5 = var1.iterator();
    var1.enqueue((java.lang.Object)false);
    int var8 = var1.size();
    boolean var9 = var1.isEmpty();
    java.util.Iterator var10 = var1.iterator();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var12 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var13 = var12.isEmpty();
    boolean var14 = var12.isEmpty();
    java.util.Iterator var15 = var12.iterator();
    boolean var16 = var12.isEmpty();
    int var17 = var12.size();
    java.util.Iterator var18 = var12.iterator();
    var1.enqueue((java.lang.Object)var18);
    java.util.Iterator var20 = var1.iterator();
    java.lang.Object var21 = var1.dequeue();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var21 + "' != '" + '#'+ "'", var21.equals('#'));

  }

  public void test259() throws Throwable {

    if (debug) System.out.printf("%nRingBufferMutantTest1.test259");


    at.fhhagenberg.sqe.exercise13.RingBufferMutant var1 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var2 = var1.isEmpty();
    boolean var3 = var1.isEmpty();
    int var4 = var1.size();
    var1.enqueue((java.lang.Object)0.0f);
    java.lang.Object var7 = var1.dequeue();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + 0.0f+ "'", var7.equals(0.0f));

  }

  public void test260() throws Throwable {

    if (debug) System.out.printf("%nRingBufferMutantTest1.test260");


    at.fhhagenberg.sqe.exercise13.RingBufferMutant var1 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var2 = var1.isEmpty();
    boolean var3 = var1.isEmpty();
    java.util.Iterator var4 = var1.iterator();
    boolean var5 = var1.isEmpty();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var7 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var7.enqueue((java.lang.Object)'#');
    java.util.Iterator var10 = var7.iterator();
    java.util.Iterator var11 = var7.iterator();
    var7.enqueue((java.lang.Object)false);
    int var14 = var7.size();
    var1.enqueue((java.lang.Object)var7);
    int var16 = var1.size();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var18 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var19 = var18.isEmpty();
    boolean var20 = var18.isEmpty();
    java.util.Iterator var21 = var18.iterator();
    boolean var22 = var18.isEmpty();
    java.util.Iterator var23 = var18.iterator();
    int var24 = var18.size();
    var1.enqueue((java.lang.Object)var24);
    int var26 = var1.size();
    java.util.Iterator var27 = var1.iterator();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);

  }

  public void test261() throws Throwable {

    if (debug) System.out.printf("%nRingBufferMutantTest1.test261");


    at.fhhagenberg.sqe.exercise13.RingBufferMutant var1 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var1.enqueue((java.lang.Object)1.0d);
    java.util.Iterator var4 = var1.iterator();
    int var5 = var1.size();
    java.util.Iterator var6 = var1.iterator();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);

  }

  public void test262() throws Throwable {

    if (debug) System.out.printf("%nRingBufferMutantTest1.test262");


    at.fhhagenberg.sqe.exercise13.RingBufferMutant var1 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var1.enqueue((java.lang.Object)1.0d);
    java.util.Iterator var4 = var1.iterator();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var6 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(1);
    boolean var7 = var6.isEmpty();
    boolean var8 = var6.isEmpty();
    java.util.Iterator var9 = var6.iterator();
    var1.enqueue((java.lang.Object)var6);
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var12 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var12.enqueue((java.lang.Object)'#');
    java.util.Iterator var15 = var12.iterator();
    java.util.Iterator var16 = var12.iterator();
    var12.enqueue((java.lang.Object)false);
    int var19 = var12.size();
    boolean var20 = var12.isEmpty();
    boolean var21 = var12.isEmpty();
    boolean var22 = var12.isEmpty();
    java.lang.Object var23 = var12.dequeue();
    java.util.Iterator var24 = var12.iterator();
    var1.enqueue((java.lang.Object)var12);
    int var26 = var1.size();
    java.lang.Object var27 = var1.dequeue();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + '#'+ "'", var23.equals('#'));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var27 + "' != '" + 1.0d+ "'", var27.equals(1.0d));

  }

  public void test263() throws Throwable {

    if (debug) System.out.printf("%nRingBufferMutantTest1.test263");


    at.fhhagenberg.sqe.exercise13.RingBufferMutant var1 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var2 = var1.isEmpty();
    boolean var3 = var1.isEmpty();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var5 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var5.enqueue((java.lang.Object)'#');
    java.util.Iterator var8 = var5.iterator();
    java.util.Iterator var9 = var5.iterator();
    var5.enqueue((java.lang.Object)false);
    int var12 = var5.size();
    boolean var13 = var5.isEmpty();
    java.lang.Object var14 = var5.dequeue();
    java.util.Iterator var15 = var5.iterator();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var17 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var17.enqueue((java.lang.Object)'#');
    java.util.Iterator var20 = var17.iterator();
    java.util.Iterator var21 = var17.iterator();
    java.util.Iterator var22 = var17.iterator();
    var5.enqueue((java.lang.Object)var17);
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var25 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(0);
    int var26 = var25.size();
    boolean var27 = var25.isEmpty();
    boolean var28 = var25.isEmpty();
    boolean var29 = var25.isEmpty();
    var17.enqueue((java.lang.Object)var25);
    var1.enqueue((java.lang.Object)var25);
    int var32 = var1.size();
    java.util.Iterator var33 = var1.iterator();
    boolean var34 = var1.isEmpty();
    boolean var35 = var1.isEmpty();
    boolean var36 = var1.isEmpty();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + '#'+ "'", var14.equals('#'));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);

  }

  public void test264() throws Throwable {

    if (debug) System.out.printf("%nRingBufferMutantTest1.test264");


    at.fhhagenberg.sqe.exercise13.RingBufferMutant var1 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var2 = var1.isEmpty();
    boolean var3 = var1.isEmpty();
    java.util.Iterator var4 = var1.iterator();
    boolean var5 = var1.isEmpty();
    int var6 = var1.size();
    int var7 = var1.size();
    java.util.Iterator var8 = var1.iterator();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var10 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var10.enqueue((java.lang.Object)'#');
    java.util.Iterator var13 = var10.iterator();
    java.util.Iterator var14 = var10.iterator();
    java.util.Iterator var15 = var10.iterator();
    var1.enqueue((java.lang.Object)var10);
    java.util.Iterator var17 = var1.iterator();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var19 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var19.enqueue((java.lang.Object)'#');
    var19.enqueue((java.lang.Object)' ');
    int var24 = var19.size();
    int var25 = var19.size();
    int var26 = var19.size();
    int var27 = var19.size();
    int var28 = var19.size();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var30 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var30.enqueue((java.lang.Object)1.0d);
    java.util.Iterator var33 = var30.iterator();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var35 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(1);
    boolean var36 = var35.isEmpty();
    boolean var37 = var35.isEmpty();
    java.util.Iterator var38 = var35.iterator();
    var30.enqueue((java.lang.Object)var35);
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var41 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var41.enqueue((java.lang.Object)'#');
    java.util.Iterator var44 = var41.iterator();
    java.util.Iterator var45 = var41.iterator();
    var41.enqueue((java.lang.Object)false);
    int var48 = var41.size();
    boolean var49 = var41.isEmpty();
    boolean var50 = var41.isEmpty();
    boolean var51 = var41.isEmpty();
    java.lang.Object var52 = var41.dequeue();
    java.util.Iterator var53 = var41.iterator();
    var30.enqueue((java.lang.Object)var41);
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var56 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var57 = var56.isEmpty();
    boolean var58 = var56.isEmpty();
    int var59 = var56.size();
    java.util.Iterator var60 = var56.iterator();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var62 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var62.enqueue((java.lang.Object)'#');
    int var65 = var62.size();
    var62.enqueue((java.lang.Object)true);
    java.util.Iterator var68 = var62.iterator();
    var56.enqueue((java.lang.Object)var68);
    java.lang.Object var70 = var56.dequeue();
    java.util.Iterator var71 = var56.iterator();
    var30.enqueue((java.lang.Object)var56);
    java.util.Iterator var73 = var56.iterator();
    var19.enqueue((java.lang.Object)var73);
    var1.enqueue((java.lang.Object)var73);
    boolean var76 = var1.isEmpty();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var52 + "' != '" + '#'+ "'", var52.equals('#'));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var76 == false);

  }

  public void test265() throws Throwable {

    if (debug) System.out.printf("%nRingBufferMutantTest1.test265");


    at.fhhagenberg.sqe.exercise13.RingBufferMutant var1 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var2 = var1.isEmpty();
    boolean var3 = var1.isEmpty();
    java.util.Iterator var4 = var1.iterator();
    boolean var5 = var1.isEmpty();
    int var6 = var1.size();
    int var7 = var1.size();
    java.util.Iterator var8 = var1.iterator();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var10 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var11 = var10.isEmpty();
    boolean var12 = var10.isEmpty();
    boolean var13 = var10.isEmpty();
    int var14 = var10.size();
    java.util.Iterator var15 = var10.iterator();
    var1.enqueue((java.lang.Object)var10);
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var18 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var19 = var18.isEmpty();
    boolean var20 = var18.isEmpty();
    java.util.Iterator var21 = var18.iterator();
    boolean var22 = var18.isEmpty();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var24 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var24.enqueue((java.lang.Object)'#');
    java.util.Iterator var27 = var24.iterator();
    java.util.Iterator var28 = var24.iterator();
    var24.enqueue((java.lang.Object)false);
    int var31 = var24.size();
    var18.enqueue((java.lang.Object)var24);
    int var33 = var18.size();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var35 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var36 = var35.isEmpty();
    boolean var37 = var35.isEmpty();
    java.util.Iterator var38 = var35.iterator();
    boolean var39 = var35.isEmpty();
    java.util.Iterator var40 = var35.iterator();
    int var41 = var35.size();
    var18.enqueue((java.lang.Object)var41);
    java.util.Iterator var43 = var18.iterator();
    var10.enqueue((java.lang.Object)var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);

  }

  public void test266() throws Throwable {

    if (debug) System.out.printf("%nRingBufferMutantTest1.test266");


    at.fhhagenberg.sqe.exercise13.RingBufferMutant var1 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var2 = var1.isEmpty();
    boolean var3 = var1.isEmpty();
    java.util.Iterator var4 = var1.iterator();
    boolean var5 = var1.isEmpty();
    var1.enqueue((java.lang.Object)'#');
    boolean var8 = var1.isEmpty();
    int var9 = var1.size();
    java.util.Iterator var10 = var1.iterator();
    boolean var11 = var1.isEmpty();
    java.util.Iterator var12 = var1.iterator();
    boolean var13 = var1.isEmpty();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var15 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var15.enqueue((java.lang.Object)'#');
    java.util.Iterator var18 = var15.iterator();
    java.util.Iterator var19 = var15.iterator();
    var15.enqueue((java.lang.Object)false);
    java.lang.Object var22 = var15.dequeue();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var24 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var25 = var24.isEmpty();
    boolean var26 = var24.isEmpty();
    java.util.Iterator var27 = var24.iterator();
    boolean var28 = var24.isEmpty();
    var24.enqueue((java.lang.Object)'#');
    boolean var31 = var24.isEmpty();
    int var32 = var24.size();
    java.util.Iterator var33 = var24.iterator();
    var15.enqueue((java.lang.Object)var24);
    java.util.Iterator var35 = var15.iterator();
    var1.enqueue((java.lang.Object)var15);
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var38 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var38.enqueue((java.lang.Object)'#');
    java.util.Iterator var41 = var38.iterator();
    java.util.Iterator var42 = var38.iterator();
    var1.enqueue((java.lang.Object)var38);
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var45 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(1);
    boolean var46 = var45.isEmpty();
    boolean var47 = var45.isEmpty();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var49 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var49.enqueue((java.lang.Object)'#');
    java.util.Iterator var52 = var49.iterator();
    java.util.Iterator var53 = var49.iterator();
    boolean var54 = var49.isEmpty();
    int var55 = var49.size();
    var49.enqueue((java.lang.Object)1.0d);
    boolean var58 = var49.isEmpty();
    var45.enqueue((java.lang.Object)var49);
    var1.enqueue((java.lang.Object)var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var22 + "' != '" + '#'+ "'", var22.equals('#'));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == false);

  }

  public void test267() throws Throwable {

    if (debug) System.out.printf("%nRingBufferMutantTest1.test267");


    at.fhhagenberg.sqe.exercise13.RingBufferMutant var1 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var1.enqueue((java.lang.Object)'#');
    java.util.Iterator var4 = var1.iterator();
    java.util.Iterator var5 = var1.iterator();
    var1.enqueue((java.lang.Object)false);
    int var8 = var1.size();
    boolean var9 = var1.isEmpty();
    boolean var10 = var1.isEmpty();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var12 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var12.enqueue((java.lang.Object)'#');
    int var15 = var12.size();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var17 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var18 = var17.isEmpty();
    boolean var19 = var17.isEmpty();
    java.util.Iterator var20 = var17.iterator();
    boolean var21 = var17.isEmpty();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var23 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var23.enqueue((java.lang.Object)'#');
    java.util.Iterator var26 = var23.iterator();
    java.util.Iterator var27 = var23.iterator();
    var23.enqueue((java.lang.Object)false);
    int var30 = var23.size();
    var17.enqueue((java.lang.Object)var23);
    var12.enqueue((java.lang.Object)var23);
    java.util.Iterator var33 = var23.iterator();
    var1.enqueue((java.lang.Object)var23);
    boolean var35 = var23.isEmpty();
    java.lang.Object var36 = var23.dequeue();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var38 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(100);
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var40 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var40.enqueue((java.lang.Object)'#');
    java.util.Iterator var43 = var40.iterator();
    java.util.Iterator var44 = var40.iterator();
    var40.enqueue((java.lang.Object)false);
    int var47 = var40.size();
    boolean var48 = var40.isEmpty();
    int var49 = var40.size();
    java.lang.Object var50 = new java.lang.Object();
    var40.enqueue(var50);
    var38.enqueue((java.lang.Object)var40);
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var54 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var54.enqueue((java.lang.Object)'#');
    java.util.Iterator var57 = var54.iterator();
    java.util.Iterator var58 = var54.iterator();
    var54.enqueue((java.lang.Object)false);
    int var61 = var54.size();
    boolean var62 = var54.isEmpty();
    boolean var63 = var54.isEmpty();
    boolean var64 = var54.isEmpty();
    int var65 = var54.size();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var67 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(100);
    int var68 = var67.size();
    java.util.Iterator var69 = var67.iterator();
    var54.enqueue((java.lang.Object)var67);
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var72 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var73 = var72.isEmpty();
    boolean var74 = var72.isEmpty();
    boolean var75 = var72.isEmpty();
    int var76 = var72.size();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var78 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(1);
    var72.enqueue((java.lang.Object)var78);
    java.lang.Object var80 = var72.dequeue();
    var54.enqueue(var80);
    int var82 = var54.size();
    boolean var83 = var54.isEmpty();
    var40.enqueue((java.lang.Object)var54);
    boolean var85 = var40.isEmpty();
    boolean var86 = var40.isEmpty();
    var23.enqueue((java.lang.Object)var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var36 + "' != '" + '#'+ "'", var36.equals('#'));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var76 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var82 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var83 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var85 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var86 == false);

  }

  public void test268() throws Throwable {

    if (debug) System.out.printf("%nRingBufferMutantTest1.test268");


    at.fhhagenberg.sqe.exercise13.RingBufferMutant var1 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var2 = var1.isEmpty();
    boolean var3 = var1.isEmpty();
    java.util.Iterator var4 = var1.iterator();
    boolean var5 = var1.isEmpty();
    int var6 = var1.size();
    int var7 = var1.size();
    java.util.Iterator var8 = var1.iterator();
    java.util.Iterator var9 = var1.iterator();
    java.util.Iterator var10 = var1.iterator();
    int var11 = var1.size();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 0);

  }

  public void test269() throws Throwable {

    if (debug) System.out.printf("%nRingBufferMutantTest1.test269");


    at.fhhagenberg.sqe.exercise13.RingBufferMutant var1 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var2 = var1.isEmpty();
    boolean var3 = var1.isEmpty();
    java.util.Iterator var4 = var1.iterator();
    boolean var5 = var1.isEmpty();
    int var6 = var1.size();
    java.util.Iterator var7 = var1.iterator();
    int var8 = var1.size();
    java.util.Iterator var9 = var1.iterator();
    boolean var10 = var1.isEmpty();
    boolean var11 = var1.isEmpty();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.Object var12 = var1.dequeue();
      fail("Expected exception of type java.lang.RuntimeException");
    } catch (java.lang.RuntimeException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == true);

  }

  public void test270() throws Throwable {

    if (debug) System.out.printf("%nRingBufferMutantTest1.test270");


    at.fhhagenberg.sqe.exercise13.RingBufferMutant var1 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var1.enqueue((java.lang.Object)'#');
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var5 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var5.enqueue((java.lang.Object)'#');
    java.util.Iterator var8 = var5.iterator();
    java.util.Iterator var9 = var5.iterator();
    var5.enqueue((java.lang.Object)false);
    int var12 = var5.size();
    boolean var13 = var5.isEmpty();
    java.lang.Object var14 = var5.dequeue();
    java.util.Iterator var15 = var5.iterator();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var17 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var17.enqueue((java.lang.Object)'#');
    java.util.Iterator var20 = var17.iterator();
    java.util.Iterator var21 = var17.iterator();
    java.util.Iterator var22 = var17.iterator();
    var5.enqueue((java.lang.Object)var17);
    var1.enqueue((java.lang.Object)var17);
    java.util.Iterator var25 = var17.iterator();
    boolean var26 = var17.isEmpty();
    boolean var27 = var17.isEmpty();
    boolean var28 = var17.isEmpty();
    java.lang.Object var29 = var17.dequeue();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + '#'+ "'", var14.equals('#'));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var29 + "' != '" + '#'+ "'", var29.equals('#'));

  }

  public void test271() throws Throwable {

    if (debug) System.out.printf("%nRingBufferMutantTest1.test271");


    at.fhhagenberg.sqe.exercise13.RingBufferMutant var1 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var2 = var1.isEmpty();
    boolean var3 = var1.isEmpty();
    java.util.Iterator var4 = var1.iterator();
    boolean var5 = var1.isEmpty();
    var1.enqueue((java.lang.Object)'#');
    boolean var8 = var1.isEmpty();
    int var9 = var1.size();
    java.util.Iterator var10 = var1.iterator();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var12 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var12.enqueue((java.lang.Object)'#');
    java.util.Iterator var15 = var12.iterator();
    var12.enqueue((java.lang.Object)100.0d);
    boolean var18 = var12.isEmpty();
    java.lang.Object var19 = var12.dequeue();
    var1.enqueue(var19);
    java.util.Iterator var21 = var1.iterator();
    java.util.Iterator var22 = var1.iterator();
    boolean var23 = var1.isEmpty();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + '#'+ "'", var19.equals('#'));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);

  }

  public void test272() throws Throwable {

    if (debug) System.out.printf("%nRingBufferMutantTest1.test272");


    at.fhhagenberg.sqe.exercise13.RingBufferMutant var1 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var2 = var1.isEmpty();
    boolean var3 = var1.isEmpty();
    java.util.Iterator var4 = var1.iterator();
    boolean var5 = var1.isEmpty();
    int var6 = var1.size();
    int var7 = var1.size();
    java.util.Iterator var8 = var1.iterator();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var10 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var10.enqueue((java.lang.Object)'#');
    java.util.Iterator var13 = var10.iterator();
    java.util.Iterator var14 = var10.iterator();
    java.util.Iterator var15 = var10.iterator();
    var1.enqueue((java.lang.Object)var10);
    int var17 = var10.size();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var19 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var19.enqueue((java.lang.Object)1.0d);
    java.util.Iterator var22 = var19.iterator();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var24 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(1);
    boolean var25 = var24.isEmpty();
    boolean var26 = var24.isEmpty();
    java.util.Iterator var27 = var24.iterator();
    var19.enqueue((java.lang.Object)var24);
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var30 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var30.enqueue((java.lang.Object)'#');
    java.util.Iterator var33 = var30.iterator();
    java.util.Iterator var34 = var30.iterator();
    var30.enqueue((java.lang.Object)false);
    int var37 = var30.size();
    boolean var38 = var30.isEmpty();
    boolean var39 = var30.isEmpty();
    boolean var40 = var30.isEmpty();
    java.lang.Object var41 = var30.dequeue();
    java.util.Iterator var42 = var30.iterator();
    var19.enqueue((java.lang.Object)var30);
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var45 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var46 = var45.isEmpty();
    boolean var47 = var45.isEmpty();
    int var48 = var45.size();
    java.util.Iterator var49 = var45.iterator();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var51 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var51.enqueue((java.lang.Object)'#');
    int var54 = var51.size();
    var51.enqueue((java.lang.Object)true);
    java.util.Iterator var57 = var51.iterator();
    var45.enqueue((java.lang.Object)var57);
    java.lang.Object var59 = var45.dequeue();
    java.util.Iterator var60 = var45.iterator();
    var19.enqueue((java.lang.Object)var45);
    var10.enqueue((java.lang.Object)var45);
    java.util.Iterator var63 = var10.iterator();
    boolean var64 = var10.isEmpty();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var41 + "' != '" + '#'+ "'", var41.equals('#'));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == false);

  }

  public void test273() throws Throwable {

    if (debug) System.out.printf("%nRingBufferMutantTest1.test273");


    at.fhhagenberg.sqe.exercise13.RingBufferMutant var1 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var1.enqueue((java.lang.Object)'#');
    java.util.Iterator var4 = var1.iterator();
    java.util.Iterator var5 = var1.iterator();
    boolean var6 = var1.isEmpty();
    int var7 = var1.size();
    java.util.Iterator var8 = var1.iterator();
    int var9 = var1.size();
    int var10 = var1.size();
    int var11 = var1.size();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var13 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var13.enqueue((java.lang.Object)1.0d);
    java.util.Iterator var16 = var13.iterator();
    boolean var17 = var13.isEmpty();
    boolean var18 = var13.isEmpty();
    boolean var19 = var13.isEmpty();
    java.util.Iterator var20 = var13.iterator();
    var1.enqueue((java.lang.Object)var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);

  }

  public void test274() throws Throwable {

    if (debug) System.out.printf("%nRingBufferMutantTest1.test274");


    at.fhhagenberg.sqe.exercise13.RingBufferMutant var1 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var1.enqueue((java.lang.Object)'#');
    int var4 = var1.size();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var6 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var7 = var6.isEmpty();
    boolean var8 = var6.isEmpty();
    java.util.Iterator var9 = var6.iterator();
    boolean var10 = var6.isEmpty();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var12 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var12.enqueue((java.lang.Object)'#');
    java.util.Iterator var15 = var12.iterator();
    java.util.Iterator var16 = var12.iterator();
    var12.enqueue((java.lang.Object)false);
    int var19 = var12.size();
    var6.enqueue((java.lang.Object)var12);
    var1.enqueue((java.lang.Object)var12);
    java.util.Iterator var22 = var12.iterator();
    java.lang.Object var23 = var12.dequeue();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var25 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var26 = var25.isEmpty();
    boolean var27 = var25.isEmpty();
    java.util.Iterator var28 = var25.iterator();
    boolean var29 = var25.isEmpty();
    var25.enqueue((java.lang.Object)'#');
    boolean var32 = var25.isEmpty();
    int var33 = var25.size();
    java.util.Iterator var34 = var25.iterator();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var36 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var36.enqueue((java.lang.Object)'#');
    java.util.Iterator var39 = var36.iterator();
    var36.enqueue((java.lang.Object)100.0d);
    boolean var42 = var36.isEmpty();
    java.lang.Object var43 = var36.dequeue();
    var25.enqueue(var43);
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var46 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var46.enqueue((java.lang.Object)'#');
    java.util.Iterator var49 = var46.iterator();
    var25.enqueue((java.lang.Object)var46);
    boolean var51 = var46.isEmpty();
    int var52 = var46.size();
    java.util.Iterator var53 = var46.iterator();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var55 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var55.enqueue((java.lang.Object)'#');
    int var58 = var55.size();
    var55.enqueue((java.lang.Object)true);
    java.util.Iterator var61 = var55.iterator();
    boolean var62 = var55.isEmpty();
    java.util.Iterator var63 = var55.iterator();
    var46.enqueue((java.lang.Object)var63);
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var66 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var67 = var66.isEmpty();
    boolean var68 = var66.isEmpty();
    java.util.Iterator var69 = var66.iterator();
    boolean var70 = var66.isEmpty();
    java.util.Iterator var71 = var66.iterator();
    var46.enqueue((java.lang.Object)var66);
    var12.enqueue((java.lang.Object)var46);
    int var74 = var46.size();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + '#'+ "'", var23.equals('#'));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var43 + "' != '" + '#'+ "'", var43.equals('#'));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == 3);

  }

  public void test275() throws Throwable {

    if (debug) System.out.printf("%nRingBufferMutantTest1.test275");


    at.fhhagenberg.sqe.exercise13.RingBufferMutant var1 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(2);
    int var2 = var1.size();
    boolean var3 = var1.isEmpty();
    boolean var4 = var1.isEmpty();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);

  }

  public void test276() throws Throwable {

    if (debug) System.out.printf("%nRingBufferMutantTest1.test276");


    at.fhhagenberg.sqe.exercise13.RingBufferMutant var1 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var1.enqueue((java.lang.Object)'#');
    int var4 = var1.size();
    int var5 = var1.size();
    java.util.Iterator var6 = var1.iterator();
    java.util.Iterator var7 = var1.iterator();
    java.lang.Object var8 = var1.dequeue();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var10 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(1);
    java.util.Iterator var11 = var10.iterator();
    java.util.Iterator var12 = var10.iterator();
    java.util.Iterator var13 = var10.iterator();
    int var14 = var10.size();
    int var15 = var10.size();
    var1.enqueue((java.lang.Object)var10);
    java.util.Iterator var17 = var10.iterator();
    java.util.Iterator var18 = var10.iterator();
    int var19 = var10.size();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + '#'+ "'", var8.equals('#'));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 0);

  }

  public void test277() throws Throwable {

    if (debug) System.out.printf("%nRingBufferMutantTest1.test277");


    at.fhhagenberg.sqe.exercise13.RingBufferMutant var1 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var1.enqueue((java.lang.Object)'#');
    java.util.Iterator var4 = var1.iterator();
    java.util.Iterator var5 = var1.iterator();
    var1.enqueue((java.lang.Object)false);
    int var8 = var1.size();
    java.lang.Object var9 = var1.dequeue();
    java.util.Iterator var10 = var1.iterator();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + '#'+ "'", var9.equals('#'));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);

  }

  public void test278() throws Throwable {

    if (debug) System.out.printf("%nRingBufferMutantTest1.test278");


    at.fhhagenberg.sqe.exercise13.RingBufferMutant var1 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(0);
    int var2 = var1.size();
    boolean var3 = var1.isEmpty();
    boolean var4 = var1.isEmpty();
    boolean var5 = var1.isEmpty();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.Object var6 = var1.dequeue();
      fail("Expected exception of type java.lang.RuntimeException");
    } catch (java.lang.RuntimeException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);

  }

  public void test279() throws Throwable {

    if (debug) System.out.printf("%nRingBufferMutantTest1.test279");


    at.fhhagenberg.sqe.exercise13.RingBufferMutant var1 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var1.enqueue((java.lang.Object)'#');
    var1.enqueue((java.lang.Object)' ');
    int var6 = var1.size();
    java.util.Iterator var7 = var1.iterator();
    boolean var8 = var1.isEmpty();
    java.util.Iterator var9 = var1.iterator();
    java.util.Iterator var10 = var1.iterator();
    int var11 = var1.size();
    int var12 = var1.size();
    boolean var13 = var1.isEmpty();
    int var14 = var1.size();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 2);

  }

  public void test280() throws Throwable {

    if (debug) System.out.printf("%nRingBufferMutantTest1.test280");


    at.fhhagenberg.sqe.exercise13.RingBufferMutant var1 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var1.enqueue((java.lang.Object)'#');
    int var4 = var1.size();
    java.lang.Object var5 = var1.dequeue();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var7 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var7.enqueue((java.lang.Object)'#');
    var7.enqueue((java.lang.Object)' ');
    int var12 = var7.size();
    int var13 = var7.size();
    java.util.Iterator var14 = var7.iterator();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var16 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(0);
    java.util.Iterator var17 = var16.iterator();
    var7.enqueue((java.lang.Object)var17);
    var1.enqueue((java.lang.Object)var7);
    boolean var20 = var7.isEmpty();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var22 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var23 = var22.isEmpty();
    boolean var24 = var22.isEmpty();
    java.util.Iterator var25 = var22.iterator();
    boolean var26 = var22.isEmpty();
    var22.enqueue((java.lang.Object)'#');
    boolean var29 = var22.isEmpty();
    int var30 = var22.size();
    java.util.Iterator var31 = var22.iterator();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var33 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var33.enqueue((java.lang.Object)'#');
    java.util.Iterator var36 = var33.iterator();
    var33.enqueue((java.lang.Object)100.0d);
    boolean var39 = var33.isEmpty();
    java.lang.Object var40 = var33.dequeue();
    var22.enqueue(var40);
    var22.enqueue((java.lang.Object)'4');
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var45 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var46 = var45.isEmpty();
    boolean var47 = var45.isEmpty();
    int var48 = var45.size();
    java.util.Iterator var49 = var45.iterator();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var51 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var51.enqueue((java.lang.Object)'#');
    int var54 = var51.size();
    var51.enqueue((java.lang.Object)true);
    java.util.Iterator var57 = var51.iterator();
    var45.enqueue((java.lang.Object)var57);
    java.util.Iterator var59 = var45.iterator();
    boolean var60 = var45.isEmpty();
    var22.enqueue((java.lang.Object)var60);
    int var62 = var22.size();
    var7.enqueue((java.lang.Object)var62);
    int var64 = var7.size();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + '#'+ "'", var5.equals('#'));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var40 + "' != '" + '#'+ "'", var40.equals('#'));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == 4);

  }

  public void test281() throws Throwable {

    if (debug) System.out.printf("%nRingBufferMutantTest1.test281");


    at.fhhagenberg.sqe.exercise13.RingBufferMutant var1 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var1.enqueue((java.lang.Object)'#');
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var5 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var5.enqueue((java.lang.Object)'#');
    java.util.Iterator var8 = var5.iterator();
    java.util.Iterator var9 = var5.iterator();
    var5.enqueue((java.lang.Object)false);
    int var12 = var5.size();
    boolean var13 = var5.isEmpty();
    java.lang.Object var14 = var5.dequeue();
    java.util.Iterator var15 = var5.iterator();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var17 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var17.enqueue((java.lang.Object)'#');
    java.util.Iterator var20 = var17.iterator();
    java.util.Iterator var21 = var17.iterator();
    java.util.Iterator var22 = var17.iterator();
    var5.enqueue((java.lang.Object)var17);
    var1.enqueue((java.lang.Object)var17);
    java.util.Iterator var25 = var17.iterator();
    boolean var26 = var17.isEmpty();
    boolean var27 = var17.isEmpty();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var29 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(2);
    java.util.Iterator var30 = var29.iterator();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var32 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var33 = var32.isEmpty();
    boolean var34 = var32.isEmpty();
    java.util.Iterator var35 = var32.iterator();
    boolean var36 = var32.isEmpty();
    int var37 = var32.size();
    java.util.Iterator var38 = var32.iterator();
    int var39 = var32.size();
    boolean var40 = var32.isEmpty();
    int var41 = var32.size();
    var29.enqueue((java.lang.Object)var32);
    java.util.Iterator var43 = var29.iterator();
    var17.enqueue((java.lang.Object)var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + '#'+ "'", var14.equals('#'));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);

  }

  public void test282() throws Throwable {

    if (debug) System.out.printf("%nRingBufferMutantTest1.test282");


    at.fhhagenberg.sqe.exercise13.RingBufferMutant var1 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var2 = var1.isEmpty();
    boolean var3 = var1.isEmpty();
    int var4 = var1.size();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var6 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var7 = var6.isEmpty();
    boolean var8 = var6.isEmpty();
    var1.enqueue((java.lang.Object)var8);
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var11 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var11.enqueue((java.lang.Object)'#');
    int var14 = var11.size();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var16 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var17 = var16.isEmpty();
    boolean var18 = var16.isEmpty();
    java.util.Iterator var19 = var16.iterator();
    boolean var20 = var16.isEmpty();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var22 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var22.enqueue((java.lang.Object)'#');
    java.util.Iterator var25 = var22.iterator();
    java.util.Iterator var26 = var22.iterator();
    var22.enqueue((java.lang.Object)false);
    int var29 = var22.size();
    var16.enqueue((java.lang.Object)var22);
    var11.enqueue((java.lang.Object)var22);
    java.util.Iterator var32 = var22.iterator();
    java.util.Iterator var33 = var22.iterator();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var35 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var36 = var35.isEmpty();
    boolean var37 = var35.isEmpty();
    java.util.Iterator var38 = var35.iterator();
    boolean var39 = var35.isEmpty();
    var35.enqueue((java.lang.Object)'#');
    int var42 = var35.size();
    var22.enqueue((java.lang.Object)var42);
    boolean var44 = var22.isEmpty();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var46 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var46.enqueue((java.lang.Object)'#');
    int var49 = var46.size();
    int var50 = var46.size();
    java.util.Iterator var51 = var46.iterator();
    java.util.Iterator var52 = var46.iterator();
    var22.enqueue((java.lang.Object)var46);
    java.util.Iterator var54 = var22.iterator();
    var1.enqueue((java.lang.Object)var22);
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var57 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var57.enqueue((java.lang.Object)'#');
    int var60 = var57.size();
    var57.enqueue((java.lang.Object)true);
    java.util.Iterator var63 = var57.iterator();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var65 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(100);
    var57.enqueue((java.lang.Object)100);
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var68 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var69 = var68.isEmpty();
    boolean var70 = var68.isEmpty();
    java.util.Iterator var71 = var68.iterator();
    boolean var72 = var68.isEmpty();
    int var73 = var68.size();
    int var74 = var68.size();
    java.util.Iterator var75 = var68.iterator();
    var57.enqueue((java.lang.Object)var68);
    java.util.Iterator var77 = var57.iterator();
    var1.enqueue((java.lang.Object)var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);

  }

  public void test283() throws Throwable {

    if (debug) System.out.printf("%nRingBufferMutantTest1.test283");


    at.fhhagenberg.sqe.exercise13.RingBufferMutant var1 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var2 = var1.isEmpty();
    boolean var3 = var1.isEmpty();
    int var4 = var1.size();
    java.util.Iterator var5 = var1.iterator();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var7 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var7.enqueue((java.lang.Object)'#');
    var7.enqueue((java.lang.Object)' ');
    int var12 = var7.size();
    int var13 = var7.size();
    java.lang.Object var14 = var7.dequeue();
    var1.enqueue(var14);
    boolean var16 = var1.isEmpty();
    java.lang.Object var17 = var1.dequeue();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + '#'+ "'", var14.equals('#'));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + '#'+ "'", var17.equals('#'));

  }

  public void test284() throws Throwable {

    if (debug) System.out.printf("%nRingBufferMutantTest1.test284");


    at.fhhagenberg.sqe.exercise13.RingBufferMutant var1 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(1);
    java.util.Iterator var2 = var1.iterator();
    java.util.Iterator var3 = var1.iterator();
    java.util.Iterator var4 = var1.iterator();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var6 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var7 = var6.isEmpty();
    boolean var8 = var6.isEmpty();
    java.util.Iterator var9 = var6.iterator();
    boolean var10 = var6.isEmpty();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var12 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var12.enqueue((java.lang.Object)'#');
    java.util.Iterator var15 = var12.iterator();
    java.util.Iterator var16 = var12.iterator();
    var12.enqueue((java.lang.Object)false);
    int var19 = var12.size();
    var6.enqueue((java.lang.Object)var12);
    boolean var21 = var12.isEmpty();
    var1.enqueue((java.lang.Object)var12);
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var24 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(1);
    java.util.Iterator var25 = var24.iterator();
    var12.enqueue((java.lang.Object)var24);
    int var27 = var12.size();
    java.lang.Object var28 = var12.dequeue();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var28 + "' != '" + '#'+ "'", var28.equals('#'));

  }

  public void test285() throws Throwable {

    if (debug) System.out.printf("%nRingBufferMutantTest1.test285");


    at.fhhagenberg.sqe.exercise13.RingBufferMutant var1 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var2 = var1.isEmpty();
    boolean var3 = var1.isEmpty();
    int var4 = var1.size();
    java.util.Iterator var5 = var1.iterator();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var7 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var7.enqueue((java.lang.Object)'#');
    int var10 = var7.size();
    var7.enqueue((java.lang.Object)true);
    java.util.Iterator var13 = var7.iterator();
    var1.enqueue((java.lang.Object)var13);
    java.util.Iterator var15 = var1.iterator();
    int var16 = var1.size();
    boolean var17 = var1.isEmpty();
    java.util.Iterator var18 = var1.iterator();
    boolean var19 = var1.isEmpty();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);

  }

  public void test286() throws Throwable {

    if (debug) System.out.printf("%nRingBufferMutantTest1.test286");


    at.fhhagenberg.sqe.exercise13.RingBufferMutant var1 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var2 = var1.isEmpty();
    boolean var3 = var1.isEmpty();
    java.util.Iterator var4 = var1.iterator();
    boolean var5 = var1.isEmpty();
    var1.enqueue((java.lang.Object)'#');
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var9 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var10 = var9.isEmpty();
    boolean var11 = var9.isEmpty();
    java.util.Iterator var12 = var9.iterator();
    boolean var13 = var9.isEmpty();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var15 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var15.enqueue((java.lang.Object)'#');
    java.util.Iterator var18 = var15.iterator();
    java.util.Iterator var19 = var15.iterator();
    var15.enqueue((java.lang.Object)false);
    int var22 = var15.size();
    var9.enqueue((java.lang.Object)var15);
    int var24 = var9.size();
    var1.enqueue((java.lang.Object)var24);
    java.lang.Object var26 = var1.dequeue();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var28 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var29 = var28.isEmpty();
    boolean var30 = var28.isEmpty();
    java.util.Iterator var31 = var28.iterator();
    boolean var32 = var28.isEmpty();
    int var33 = var28.size();
    java.util.Iterator var34 = var28.iterator();
    int var35 = var28.size();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var37 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var37.enqueue((java.lang.Object)'#');
    java.util.Iterator var40 = var37.iterator();
    java.util.Iterator var41 = var37.iterator();
    var37.enqueue((java.lang.Object)false);
    java.lang.Object var44 = var37.dequeue();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var46 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var47 = var46.isEmpty();
    boolean var48 = var46.isEmpty();
    java.util.Iterator var49 = var46.iterator();
    boolean var50 = var46.isEmpty();
    var46.enqueue((java.lang.Object)'#');
    boolean var53 = var46.isEmpty();
    int var54 = var46.size();
    java.util.Iterator var55 = var46.iterator();
    var37.enqueue((java.lang.Object)var46);
    int var57 = var46.size();
    int var58 = var46.size();
    var28.enqueue((java.lang.Object)var46);
    var1.enqueue((java.lang.Object)var28);
    java.util.Iterator var61 = var28.iterator();
    java.lang.Object var62 = var28.dequeue();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var26 + "' != '" + '#'+ "'", var26.equals('#'));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var44 + "' != '" + '#'+ "'", var44.equals('#'));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);

  }

  public void test287() throws Throwable {

    if (debug) System.out.printf("%nRingBufferMutantTest1.test287");


    at.fhhagenberg.sqe.exercise13.RingBufferMutant var1 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var1.enqueue((java.lang.Object)'#');
    var1.enqueue((java.lang.Object)' ');
    int var6 = var1.size();
    int var7 = var1.size();
    int var8 = var1.size();
    int var9 = var1.size();
    int var10 = var1.size();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var12 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var12.enqueue((java.lang.Object)'#');
    boolean var15 = var12.isEmpty();
    int var16 = var12.size();
    var1.enqueue((java.lang.Object)var16);
    int var18 = var1.size();
    int var19 = var1.size();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var21 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var22 = var21.isEmpty();
    boolean var23 = var21.isEmpty();
    java.util.Iterator var24 = var21.iterator();
    boolean var25 = var21.isEmpty();
    var21.enqueue((java.lang.Object)'#');
    boolean var28 = var21.isEmpty();
    boolean var29 = var21.isEmpty();
    boolean var30 = var21.isEmpty();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var32 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var33 = var32.isEmpty();
    boolean var34 = var32.isEmpty();
    java.util.Iterator var35 = var32.iterator();
    boolean var36 = var32.isEmpty();
    int var37 = var32.size();
    int var38 = var32.size();
    java.util.Iterator var39 = var32.iterator();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var41 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var41.enqueue((java.lang.Object)'#');
    java.util.Iterator var44 = var41.iterator();
    java.util.Iterator var45 = var41.iterator();
    var41.enqueue((java.lang.Object)false);
    java.lang.Object var48 = var41.dequeue();
    var32.enqueue((java.lang.Object)var41);
    java.util.Iterator var50 = var41.iterator();
    var21.enqueue((java.lang.Object)var50);
    var1.enqueue((java.lang.Object)var21);
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var54 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(4);
    boolean var55 = var54.isEmpty();
    var1.enqueue((java.lang.Object)var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var48 + "' != '" + '#'+ "'", var48.equals('#'));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == true);

  }

  public void test288() throws Throwable {

    if (debug) System.out.printf("%nRingBufferMutantTest1.test288");


    at.fhhagenberg.sqe.exercise13.RingBufferMutant var1 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var2 = var1.isEmpty();
    boolean var3 = var1.isEmpty();
    java.util.Iterator var4 = var1.iterator();
    boolean var5 = var1.isEmpty();
    java.util.Iterator var6 = var1.iterator();
    int var7 = var1.size();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var9 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var9.enqueue((java.lang.Object)'#');
    int var12 = var9.size();
    int var13 = var9.size();
    java.util.Iterator var14 = var9.iterator();
    java.util.Iterator var15 = var9.iterator();
    var1.enqueue((java.lang.Object)var15);
    java.util.Iterator var17 = var1.iterator();
    java.util.Iterator var18 = var1.iterator();
    java.util.Iterator var19 = var1.iterator();
    int var20 = var1.size();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 1);

  }

  public void test289() throws Throwable {

    if (debug) System.out.printf("%nRingBufferMutantTest1.test289");


    at.fhhagenberg.sqe.exercise13.RingBufferMutant var1 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var2 = var1.isEmpty();
    boolean var3 = var1.isEmpty();
    java.util.Iterator var4 = var1.iterator();
    boolean var5 = var1.isEmpty();
    var1.enqueue((java.lang.Object)'#');
    boolean var8 = var1.isEmpty();
    int var9 = var1.size();
    java.util.Iterator var10 = var1.iterator();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var12 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var12.enqueue((java.lang.Object)'#');
    java.util.Iterator var15 = var12.iterator();
    var12.enqueue((java.lang.Object)100.0d);
    boolean var18 = var12.isEmpty();
    java.lang.Object var19 = var12.dequeue();
    var1.enqueue(var19);
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var22 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var22.enqueue((java.lang.Object)'#');
    java.util.Iterator var25 = var22.iterator();
    var1.enqueue((java.lang.Object)var22);
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var28 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var28.enqueue((java.lang.Object)'#');
    java.util.Iterator var31 = var28.iterator();
    java.util.Iterator var32 = var28.iterator();
    var28.enqueue((java.lang.Object)false);
    int var35 = var28.size();
    boolean var36 = var28.isEmpty();
    java.lang.Object var37 = var28.dequeue();
    java.util.Iterator var38 = var28.iterator();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var40 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var40.enqueue((java.lang.Object)'#');
    java.util.Iterator var43 = var40.iterator();
    java.util.Iterator var44 = var40.iterator();
    java.util.Iterator var45 = var40.iterator();
    var28.enqueue((java.lang.Object)var40);
    var1.enqueue((java.lang.Object)var28);
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var49 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(100);
    int var50 = var49.size();
    int var51 = var49.size();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var53 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var54 = var53.isEmpty();
    boolean var55 = var53.isEmpty();
    java.util.Iterator var56 = var53.iterator();
    boolean var57 = var53.isEmpty();
    java.util.Iterator var58 = var53.iterator();
    var49.enqueue((java.lang.Object)var58);
    java.util.Iterator var60 = var49.iterator();
    var28.enqueue((java.lang.Object)var49);
    java.lang.Object var62 = var49.dequeue();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + '#'+ "'", var19.equals('#'));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var37 + "' != '" + '#'+ "'", var37.equals('#'));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);

  }

  public void test290() throws Throwable {

    if (debug) System.out.printf("%nRingBufferMutantTest1.test290");


    at.fhhagenberg.sqe.exercise13.RingBufferMutant var1 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var2 = var1.isEmpty();
    boolean var3 = var1.isEmpty();
    int var4 = var1.size();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var6 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var7 = var6.isEmpty();
    boolean var8 = var6.isEmpty();
    var1.enqueue((java.lang.Object)var8);
    boolean var10 = var1.isEmpty();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var12 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var12.enqueue((java.lang.Object)'#');
    java.util.Iterator var15 = var12.iterator();
    java.util.Iterator var16 = var12.iterator();
    java.util.Iterator var17 = var12.iterator();
    boolean var18 = var12.isEmpty();
    java.util.Iterator var19 = var12.iterator();
    int var20 = var12.size();
    int var21 = var12.size();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var23 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var23.enqueue((java.lang.Object)'#');
    int var26 = var23.size();
    var23.enqueue((java.lang.Object)true);
    java.util.Iterator var29 = var23.iterator();
    var12.enqueue((java.lang.Object)var23);
    java.util.Iterator var31 = var12.iterator();
    var1.enqueue((java.lang.Object)var12);
    boolean var33 = var12.isEmpty();
    boolean var34 = var12.isEmpty();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);

  }

  public void test291() throws Throwable {

    if (debug) System.out.printf("%nRingBufferMutantTest1.test291");


    at.fhhagenberg.sqe.exercise13.RingBufferMutant var1 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var1.enqueue((java.lang.Object)'#');
    int var4 = var1.size();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var6 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var7 = var6.isEmpty();
    boolean var8 = var6.isEmpty();
    java.util.Iterator var9 = var6.iterator();
    boolean var10 = var6.isEmpty();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var12 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var12.enqueue((java.lang.Object)'#');
    java.util.Iterator var15 = var12.iterator();
    java.util.Iterator var16 = var12.iterator();
    var12.enqueue((java.lang.Object)false);
    int var19 = var12.size();
    var6.enqueue((java.lang.Object)var12);
    var1.enqueue((java.lang.Object)var12);
    java.util.Iterator var22 = var12.iterator();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var24 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var25 = var24.isEmpty();
    boolean var26 = var24.isEmpty();
    java.util.Iterator var27 = var24.iterator();
    boolean var28 = var24.isEmpty();
    var24.enqueue((java.lang.Object)'#');
    boolean var31 = var24.isEmpty();
    int var32 = var24.size();
    java.util.Iterator var33 = var24.iterator();
    boolean var34 = var24.isEmpty();
    var12.enqueue((java.lang.Object)var34);
    boolean var36 = var12.isEmpty();
    int var37 = var12.size();
    java.util.Iterator var38 = var12.iterator();
    int var39 = var12.size();
    java.lang.Object var40 = var12.dequeue();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var40 + "' != '" + '#'+ "'", var40.equals('#'));

  }

  public void test292() throws Throwable {

    if (debug) System.out.printf("%nRingBufferMutantTest1.test292");


    at.fhhagenberg.sqe.exercise13.RingBufferMutant var1 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var1.enqueue((java.lang.Object)'#');
    var1.enqueue((java.lang.Object)' ');
    int var6 = var1.size();
    java.util.Iterator var7 = var1.iterator();
    boolean var8 = var1.isEmpty();
    java.util.Iterator var9 = var1.iterator();
    int var10 = var1.size();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var12 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var12.enqueue((java.lang.Object)'#');
    int var15 = var12.size();
    var12.enqueue((java.lang.Object)true);
    var1.enqueue((java.lang.Object)true);
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var20 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var20.enqueue((java.lang.Object)'#');
    java.util.Iterator var23 = var20.iterator();
    java.util.Iterator var24 = var20.iterator();
    var20.enqueue((java.lang.Object)false);
    int var27 = var20.size();
    boolean var28 = var20.isEmpty();
    boolean var29 = var20.isEmpty();
    boolean var30 = var20.isEmpty();
    int var31 = var20.size();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var33 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var34 = var33.isEmpty();
    boolean var35 = var33.isEmpty();
    java.util.Iterator var36 = var33.iterator();
    boolean var37 = var33.isEmpty();
    int var38 = var33.size();
    int var39 = var33.size();
    var20.enqueue((java.lang.Object)var33);
    var1.enqueue((java.lang.Object)var20);
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var43 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var43.enqueue((java.lang.Object)'#');
    int var46 = var43.size();
    java.lang.Object var47 = var43.dequeue();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var49 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var49.enqueue((java.lang.Object)'#');
    var49.enqueue((java.lang.Object)' ');
    int var54 = var49.size();
    int var55 = var49.size();
    java.util.Iterator var56 = var49.iterator();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var58 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(0);
    java.util.Iterator var59 = var58.iterator();
    var49.enqueue((java.lang.Object)var59);
    var43.enqueue((java.lang.Object)var49);
    boolean var62 = var49.isEmpty();
    boolean var63 = var49.isEmpty();
    java.lang.Object var64 = var49.dequeue();
    var20.enqueue((java.lang.Object)var49);
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var67 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var67.enqueue((java.lang.Object)'#');
    java.util.Iterator var70 = var67.iterator();
    java.util.Iterator var71 = var67.iterator();
    var67.enqueue((java.lang.Object)false);
    int var74 = var67.size();
    boolean var75 = var67.isEmpty();
    boolean var76 = var67.isEmpty();
    boolean var77 = var67.isEmpty();
    int var78 = var67.size();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var80 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(100);
    int var81 = var80.size();
    java.util.Iterator var82 = var80.iterator();
    var67.enqueue((java.lang.Object)var80);
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var85 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var86 = var85.isEmpty();
    boolean var87 = var85.isEmpty();
    boolean var88 = var85.isEmpty();
    int var89 = var85.size();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var91 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(1);
    var85.enqueue((java.lang.Object)var91);
    java.lang.Object var93 = var85.dequeue();
    var67.enqueue(var93);
    java.util.Iterator var95 = var67.iterator();
    var49.enqueue((java.lang.Object)var95);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var47 + "' != '" + '#'+ "'", var47.equals('#'));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var64 + "' != '" + '#'+ "'", var64.equals('#'));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var76 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var77 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var78 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var81 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var86 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var87 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var88 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var89 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var93);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var95);

  }

  public void test293() throws Throwable {

    if (debug) System.out.printf("%nRingBufferMutantTest1.test293");


    at.fhhagenberg.sqe.exercise13.RingBufferMutant var1 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(100);
    int var2 = var1.size();
    int var3 = var1.size();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var5 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var6 = var5.isEmpty();
    boolean var7 = var5.isEmpty();
    java.util.Iterator var8 = var5.iterator();
    boolean var9 = var5.isEmpty();
    java.util.Iterator var10 = var5.iterator();
    var1.enqueue((java.lang.Object)var10);
    java.util.Iterator var12 = var1.iterator();
    java.util.Iterator var13 = var1.iterator();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var15 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(0);
    java.util.Iterator var16 = var15.iterator();
    java.util.Iterator var17 = var15.iterator();
    var1.enqueue((java.lang.Object)var15);
    java.lang.Object var19 = var1.dequeue();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var21 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var21.enqueue((java.lang.Object)'#');
    java.util.Iterator var24 = var21.iterator();
    java.util.Iterator var25 = var21.iterator();
    java.util.Iterator var26 = var21.iterator();
    boolean var27 = var21.isEmpty();
    java.util.Iterator var28 = var21.iterator();
    int var29 = var21.size();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var31 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var31.enqueue((java.lang.Object)'#');
    java.util.Iterator var34 = var31.iterator();
    java.util.Iterator var35 = var31.iterator();
    java.util.Iterator var36 = var31.iterator();
    java.lang.Object var37 = var31.dequeue();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var39 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var40 = var39.isEmpty();
    boolean var41 = var39.isEmpty();
    java.util.Iterator var42 = var39.iterator();
    boolean var43 = var39.isEmpty();
    int var44 = var39.size();
    int var45 = var39.size();
    java.util.Iterator var46 = var39.iterator();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var48 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var48.enqueue((java.lang.Object)'#');
    java.util.Iterator var51 = var48.iterator();
    java.util.Iterator var52 = var48.iterator();
    var48.enqueue((java.lang.Object)false);
    java.lang.Object var55 = var48.dequeue();
    var39.enqueue((java.lang.Object)var48);
    java.util.Iterator var57 = var39.iterator();
    boolean var58 = var39.isEmpty();
    var31.enqueue((java.lang.Object)var39);
    var21.enqueue((java.lang.Object)var39);
    int var61 = var21.size();
    var1.enqueue((java.lang.Object)var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var37 + "' != '" + '#'+ "'", var37.equals('#'));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var55 + "' != '" + '#'+ "'", var55.equals('#'));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == 2);

  }

  public void test294() throws Throwable {

    if (debug) System.out.printf("%nRingBufferMutantTest1.test294");


    at.fhhagenberg.sqe.exercise13.RingBufferMutant var1 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var1.enqueue((java.lang.Object)'#');
    java.util.Iterator var4 = var1.iterator();
    java.util.Iterator var5 = var1.iterator();
    java.util.Iterator var6 = var1.iterator();
    boolean var7 = var1.isEmpty();
    int var8 = var1.size();
    java.lang.Object var9 = var1.dequeue();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + '#'+ "'", var9.equals('#'));

  }

  public void test295() throws Throwable {

    if (debug) System.out.printf("%nRingBufferMutantTest1.test295");


    at.fhhagenberg.sqe.exercise13.RingBufferMutant var1 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var1.enqueue((java.lang.Object)'#');
    int var4 = var1.size();
    var1.enqueue((java.lang.Object)true);
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var8 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var8.enqueue((java.lang.Object)'#');
    java.util.Iterator var11 = var8.iterator();
    java.util.Iterator var12 = var8.iterator();
    var8.enqueue((java.lang.Object)false);
    int var15 = var8.size();
    boolean var16 = var8.isEmpty();
    boolean var17 = var8.isEmpty();
    var8.enqueue((java.lang.Object)(short)0);
    var1.enqueue((java.lang.Object)(short)0);
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var22 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var22.enqueue((java.lang.Object)'#');
    java.util.Iterator var25 = var22.iterator();
    var22.enqueue((java.lang.Object)100.0d);
    java.util.Iterator var28 = var22.iterator();
    var1.enqueue((java.lang.Object)var22);
    java.util.Iterator var30 = var1.iterator();
    java.lang.Object var31 = var1.dequeue();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var31 + "' != '" + '#'+ "'", var31.equals('#'));

  }

  public void test296() throws Throwable {

    if (debug) System.out.printf("%nRingBufferMutantTest1.test296");


    at.fhhagenberg.sqe.exercise13.RingBufferMutant var1 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var2 = var1.isEmpty();
    boolean var3 = var1.isEmpty();
    boolean var4 = var1.isEmpty();
    int var5 = var1.size();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var7 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(1);
    var1.enqueue((java.lang.Object)var7);
    java.util.Iterator var9 = var7.iterator();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);

  }

  public void test297() throws Throwable {

    if (debug) System.out.printf("%nRingBufferMutantTest1.test297");


    at.fhhagenberg.sqe.exercise13.RingBufferMutant var1 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var2 = var1.isEmpty();
    boolean var3 = var1.isEmpty();
    java.util.Iterator var4 = var1.iterator();
    boolean var5 = var1.isEmpty();
    int var6 = var1.size();
    int var7 = var1.size();
    java.util.Iterator var8 = var1.iterator();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var10 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var10.enqueue((java.lang.Object)'#');
    java.util.Iterator var13 = var10.iterator();
    java.util.Iterator var14 = var10.iterator();
    java.util.Iterator var15 = var10.iterator();
    var1.enqueue((java.lang.Object)var10);
    java.util.Iterator var17 = var1.iterator();
    java.util.Iterator var18 = var1.iterator();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var20 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var20.enqueue((java.lang.Object)'#');
    java.util.Iterator var23 = var20.iterator();
    java.util.Iterator var24 = var20.iterator();
    var20.enqueue((java.lang.Object)false);
    int var27 = var20.size();
    boolean var28 = var20.isEmpty();
    java.lang.Object var29 = var20.dequeue();
    java.util.Iterator var30 = var20.iterator();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var32 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var32.enqueue((java.lang.Object)'#');
    java.util.Iterator var35 = var32.iterator();
    java.util.Iterator var36 = var32.iterator();
    java.util.Iterator var37 = var32.iterator();
    var20.enqueue((java.lang.Object)var32);
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var40 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(0);
    int var41 = var40.size();
    boolean var42 = var40.isEmpty();
    boolean var43 = var40.isEmpty();
    boolean var44 = var40.isEmpty();
    var32.enqueue((java.lang.Object)var40);
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var47 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var47.enqueue((java.lang.Object)'#');
    int var50 = var47.size();
    int var51 = var47.size();
    int var52 = var47.size();
    int var53 = var47.size();
    java.util.Iterator var54 = var47.iterator();
    var32.enqueue((java.lang.Object)var47);
    boolean var56 = var47.isEmpty();
    java.lang.Object var57 = var47.dequeue();
    var1.enqueue((java.lang.Object)var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var29 + "' != '" + '#'+ "'", var29.equals('#'));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var57 + "' != '" + '#'+ "'", var57.equals('#'));

  }

  public void test298() throws Throwable {

    if (debug) System.out.printf("%nRingBufferMutantTest1.test298");


    at.fhhagenberg.sqe.exercise13.RingBufferMutant var1 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var1.enqueue((java.lang.Object)'#');
    java.util.Iterator var4 = var1.iterator();
    java.util.Iterator var5 = var1.iterator();
    java.util.Iterator var6 = var1.iterator();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var8 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var8.enqueue((java.lang.Object)'#');
    java.util.Iterator var11 = var8.iterator();
    java.util.Iterator var12 = var8.iterator();
    java.util.Iterator var13 = var8.iterator();
    boolean var14 = var8.isEmpty();
    int var15 = var8.size();
    var1.enqueue((java.lang.Object)var15);
    int var17 = var1.size();
    java.lang.Object var18 = var1.dequeue();
    java.util.Iterator var19 = var1.iterator();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var18 + "' != '" + '#'+ "'", var18.equals('#'));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);

  }

  public void test299() throws Throwable {

    if (debug) System.out.printf("%nRingBufferMutantTest1.test299");


    at.fhhagenberg.sqe.exercise13.RingBufferMutant var1 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var2 = var1.isEmpty();
    boolean var3 = var1.isEmpty();
    int var4 = var1.size();
    java.util.Iterator var5 = var1.iterator();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var7 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var8 = var7.isEmpty();
    boolean var9 = var7.isEmpty();
    java.util.Iterator var10 = var7.iterator();
    boolean var11 = var7.isEmpty();
    var7.enqueue((java.lang.Object)1.0d);
    java.util.Iterator var14 = var7.iterator();
    java.util.Iterator var15 = var7.iterator();
    java.util.Iterator var16 = var7.iterator();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var18 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var18.enqueue((java.lang.Object)'#');
    int var21 = var18.size();
    var18.enqueue((java.lang.Object)true);
    java.util.Iterator var24 = var18.iterator();
    java.lang.Object var25 = var18.dequeue();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var27 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var28 = var27.isEmpty();
    boolean var29 = var27.isEmpty();
    java.util.Iterator var30 = var27.iterator();
    boolean var31 = var27.isEmpty();
    var18.enqueue((java.lang.Object)var27);
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var34 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var35 = var34.isEmpty();
    boolean var36 = var34.isEmpty();
    java.util.Iterator var37 = var34.iterator();
    boolean var38 = var34.isEmpty();
    var34.enqueue((java.lang.Object)'#');
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var42 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var43 = var42.isEmpty();
    boolean var44 = var42.isEmpty();
    java.util.Iterator var45 = var42.iterator();
    boolean var46 = var42.isEmpty();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var48 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var48.enqueue((java.lang.Object)'#');
    java.util.Iterator var51 = var48.iterator();
    java.util.Iterator var52 = var48.iterator();
    var48.enqueue((java.lang.Object)false);
    int var55 = var48.size();
    var42.enqueue((java.lang.Object)var48);
    int var57 = var42.size();
    var34.enqueue((java.lang.Object)var57);
    var18.enqueue((java.lang.Object)var34);
    var7.enqueue((java.lang.Object)var34);
    java.util.Iterator var61 = var7.iterator();
    var1.enqueue((java.lang.Object)var7);
    java.util.Iterator var63 = var7.iterator();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var65 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var65.enqueue((java.lang.Object)'#');
    java.util.Iterator var68 = var65.iterator();
    java.util.Iterator var69 = var65.iterator();
    java.util.Iterator var70 = var65.iterator();
    boolean var71 = var65.isEmpty();
    java.util.Iterator var72 = var65.iterator();
    java.util.Iterator var73 = var65.iterator();
    java.util.Iterator var74 = var65.iterator();
    java.util.Iterator var75 = var65.iterator();
    int var76 = var65.size();
    int var77 = var65.size();
    var7.enqueue((java.lang.Object)var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var25 + "' != '" + '#'+ "'", var25.equals('#'));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var76 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var77 == 1);

  }

  public void test300() throws Throwable {

    if (debug) System.out.printf("%nRingBufferMutantTest1.test300");


    at.fhhagenberg.sqe.exercise13.RingBufferMutant var1 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var2 = var1.isEmpty();
    boolean var3 = var1.isEmpty();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var5 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var5.enqueue((java.lang.Object)'#');
    java.util.Iterator var8 = var5.iterator();
    java.util.Iterator var9 = var5.iterator();
    var5.enqueue((java.lang.Object)false);
    int var12 = var5.size();
    boolean var13 = var5.isEmpty();
    java.lang.Object var14 = var5.dequeue();
    java.util.Iterator var15 = var5.iterator();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var17 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var17.enqueue((java.lang.Object)'#');
    java.util.Iterator var20 = var17.iterator();
    java.util.Iterator var21 = var17.iterator();
    java.util.Iterator var22 = var17.iterator();
    var5.enqueue((java.lang.Object)var17);
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var25 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(0);
    int var26 = var25.size();
    boolean var27 = var25.isEmpty();
    boolean var28 = var25.isEmpty();
    boolean var29 = var25.isEmpty();
    var17.enqueue((java.lang.Object)var25);
    var1.enqueue((java.lang.Object)var25);
    int var32 = var1.size();
    java.util.Iterator var33 = var1.iterator();
    boolean var34 = var1.isEmpty();
    boolean var35 = var1.isEmpty();
    java.lang.Object var36 = var1.dequeue();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + '#'+ "'", var14.equals('#'));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);

  }

  public void test301() throws Throwable {

    if (debug) System.out.printf("%nRingBufferMutantTest1.test301");


    at.fhhagenberg.sqe.exercise13.RingBufferMutant var1 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var1.enqueue((java.lang.Object)'#');
    int var4 = var1.size();
    int var5 = var1.size();
    java.util.Iterator var6 = var1.iterator();
    java.util.Iterator var7 = var1.iterator();
    java.lang.Object var8 = var1.dequeue();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var10 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var11 = var10.isEmpty();
    boolean var12 = var10.isEmpty();
    java.util.Iterator var13 = var10.iterator();
    boolean var14 = var10.isEmpty();
    var10.enqueue((java.lang.Object)'#');
    boolean var17 = var10.isEmpty();
    int var18 = var10.size();
    java.util.Iterator var19 = var10.iterator();
    boolean var20 = var10.isEmpty();
    java.util.Iterator var21 = var10.iterator();
    boolean var22 = var10.isEmpty();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var24 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var24.enqueue((java.lang.Object)'#');
    java.util.Iterator var27 = var24.iterator();
    java.util.Iterator var28 = var24.iterator();
    var24.enqueue((java.lang.Object)false);
    java.lang.Object var31 = var24.dequeue();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var33 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var34 = var33.isEmpty();
    boolean var35 = var33.isEmpty();
    java.util.Iterator var36 = var33.iterator();
    boolean var37 = var33.isEmpty();
    var33.enqueue((java.lang.Object)'#');
    boolean var40 = var33.isEmpty();
    int var41 = var33.size();
    java.util.Iterator var42 = var33.iterator();
    var24.enqueue((java.lang.Object)var33);
    java.util.Iterator var44 = var24.iterator();
    var10.enqueue((java.lang.Object)var24);
    var1.enqueue((java.lang.Object)var10);
    int var47 = var10.size();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + '#'+ "'", var8.equals('#'));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var31 + "' != '" + '#'+ "'", var31.equals('#'));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == 2);

  }

  public void test302() throws Throwable {

    if (debug) System.out.printf("%nRingBufferMutantTest1.test302");


    at.fhhagenberg.sqe.exercise13.RingBufferMutant var1 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var2 = var1.isEmpty();
    boolean var3 = var1.isEmpty();
    java.util.Iterator var4 = var1.iterator();
    boolean var5 = var1.isEmpty();
    var1.enqueue((java.lang.Object)'#');
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var9 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var10 = var9.isEmpty();
    boolean var11 = var9.isEmpty();
    java.util.Iterator var12 = var9.iterator();
    boolean var13 = var9.isEmpty();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var15 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var15.enqueue((java.lang.Object)'#');
    java.util.Iterator var18 = var15.iterator();
    java.util.Iterator var19 = var15.iterator();
    var15.enqueue((java.lang.Object)false);
    int var22 = var15.size();
    var9.enqueue((java.lang.Object)var15);
    int var24 = var9.size();
    var1.enqueue((java.lang.Object)var24);
    int var26 = var1.size();
    java.lang.Object var27 = var1.dequeue();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var29 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var30 = var29.isEmpty();
    boolean var31 = var29.isEmpty();
    java.util.Iterator var32 = var29.iterator();
    boolean var33 = var29.isEmpty();
    var29.enqueue((java.lang.Object)'#');
    var1.enqueue((java.lang.Object)var29);
    java.lang.Object var37 = var29.dequeue();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var39 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var40 = var39.isEmpty();
    boolean var41 = var39.isEmpty();
    boolean var42 = var39.isEmpty();
    int var43 = var39.size();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var45 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(1);
    var39.enqueue((java.lang.Object)var45);
    java.lang.Object var47 = var39.dequeue();
    var29.enqueue((java.lang.Object)var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var27 + "' != '" + '#'+ "'", var27.equals('#'));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var37 + "' != '" + '#'+ "'", var37.equals('#'));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);

  }

  public void test303() throws Throwable {

    if (debug) System.out.printf("%nRingBufferMutantTest1.test303");


    at.fhhagenberg.sqe.exercise13.RingBufferMutant var1 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var1.enqueue((java.lang.Object)'#');
    int var4 = var1.size();
    var1.enqueue((java.lang.Object)true);
    int var7 = var1.size();
    boolean var8 = var1.isEmpty();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var10 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var10.enqueue((java.lang.Object)'#');
    java.util.Iterator var13 = var10.iterator();
    java.util.Iterator var14 = var10.iterator();
    java.util.Iterator var15 = var10.iterator();
    boolean var16 = var10.isEmpty();
    int var17 = var10.size();
    java.util.Iterator var18 = var10.iterator();
    var1.enqueue((java.lang.Object)var18);
    java.lang.Object var20 = var1.dequeue();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var20 + "' != '" + '#'+ "'", var20.equals('#'));

  }

  public void test304() throws Throwable {

    if (debug) System.out.printf("%nRingBufferMutantTest1.test304");


    at.fhhagenberg.sqe.exercise13.RingBufferMutant var1 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var2 = var1.isEmpty();
    boolean var3 = var1.isEmpty();
    java.util.Iterator var4 = var1.iterator();
    boolean var5 = var1.isEmpty();
    int var6 = var1.size();
    int var7 = var1.size();
    java.util.Iterator var8 = var1.iterator();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var10 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var10.enqueue((java.lang.Object)'#');
    java.util.Iterator var13 = var10.iterator();
    java.util.Iterator var14 = var10.iterator();
    var10.enqueue((java.lang.Object)false);
    java.lang.Object var17 = var10.dequeue();
    var1.enqueue((java.lang.Object)var10);
    java.util.Iterator var19 = var1.iterator();
    java.util.Iterator var20 = var1.iterator();
    java.util.Iterator var21 = var1.iterator();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + '#'+ "'", var17.equals('#'));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);

  }

  public void test305() throws Throwable {

    if (debug) System.out.printf("%nRingBufferMutantTest1.test305");


    at.fhhagenberg.sqe.exercise13.RingBufferMutant var1 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var2 = var1.isEmpty();
    boolean var3 = var1.isEmpty();
    java.util.Iterator var4 = var1.iterator();
    boolean var5 = var1.isEmpty();
    var1.enqueue((java.lang.Object)'#');
    boolean var8 = var1.isEmpty();
    int var9 = var1.size();
    java.util.Iterator var10 = var1.iterator();
    boolean var11 = var1.isEmpty();
    java.util.Iterator var12 = var1.iterator();
    int var13 = var1.size();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var15 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var15.enqueue((java.lang.Object)'#');
    int var18 = var15.size();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var20 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var21 = var20.isEmpty();
    boolean var22 = var20.isEmpty();
    java.util.Iterator var23 = var20.iterator();
    boolean var24 = var20.isEmpty();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var26 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var26.enqueue((java.lang.Object)'#');
    java.util.Iterator var29 = var26.iterator();
    java.util.Iterator var30 = var26.iterator();
    var26.enqueue((java.lang.Object)false);
    int var33 = var26.size();
    var20.enqueue((java.lang.Object)var26);
    var15.enqueue((java.lang.Object)var26);
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var37 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var37.enqueue((java.lang.Object)1.0d);
    java.util.Iterator var40 = var37.iterator();
    boolean var41 = var37.isEmpty();
    boolean var42 = var37.isEmpty();
    boolean var43 = var37.isEmpty();
    var15.enqueue((java.lang.Object)var37);
    var1.enqueue((java.lang.Object)var15);
    boolean var46 = var1.isEmpty();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var48 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var48.enqueue((java.lang.Object)1.0d);
    int var51 = var48.size();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var53 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var54 = var53.isEmpty();
    boolean var55 = var53.isEmpty();
    java.util.Iterator var56 = var53.iterator();
    boolean var57 = var53.isEmpty();
    java.util.Iterator var58 = var53.iterator();
    int var59 = var53.size();
    var48.enqueue((java.lang.Object)var53);
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var62 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var62.enqueue((java.lang.Object)'#');
    java.util.Iterator var65 = var62.iterator();
    java.util.Iterator var66 = var62.iterator();
    var62.enqueue((java.lang.Object)false);
    int var69 = var62.size();
    boolean var70 = var62.isEmpty();
    boolean var71 = var62.isEmpty();
    boolean var72 = var62.isEmpty();
    int var73 = var62.size();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var75 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(100);
    int var76 = var75.size();
    java.util.Iterator var77 = var75.iterator();
    var62.enqueue((java.lang.Object)var75);
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var80 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var81 = var80.isEmpty();
    boolean var82 = var80.isEmpty();
    boolean var83 = var80.isEmpty();
    int var84 = var80.size();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var86 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(1);
    var80.enqueue((java.lang.Object)var86);
    java.lang.Object var88 = var80.dequeue();
    var62.enqueue(var88);
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var91 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(1);
    java.util.Iterator var92 = var91.iterator();
    boolean var93 = var91.isEmpty();
    var62.enqueue((java.lang.Object)var91);
    java.util.Iterator var95 = var91.iterator();
    var53.enqueue((java.lang.Object)var91);
    var1.enqueue((java.lang.Object)var53);
    boolean var98 = var53.isEmpty();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var76 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var81 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var82 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var83 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var84 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var88);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var92);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var93 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var95);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var98 == false);

  }

  public void test306() throws Throwable {

    if (debug) System.out.printf("%nRingBufferMutantTest1.test306");


    at.fhhagenberg.sqe.exercise13.RingBufferMutant var1 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var1.enqueue((java.lang.Object)'#');
    java.util.Iterator var4 = var1.iterator();
    java.util.Iterator var5 = var1.iterator();
    var1.enqueue((java.lang.Object)false);
    int var8 = var1.size();
    boolean var9 = var1.isEmpty();
    boolean var10 = var1.isEmpty();
    boolean var11 = var1.isEmpty();
    int var12 = var1.size();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var14 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(100);
    int var15 = var14.size();
    java.util.Iterator var16 = var14.iterator();
    var1.enqueue((java.lang.Object)var14);
    boolean var18 = var1.isEmpty();
    boolean var19 = var1.isEmpty();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var21 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var21.enqueue((java.lang.Object)'#');
    java.util.Iterator var24 = var21.iterator();
    java.util.Iterator var25 = var21.iterator();
    java.util.Iterator var26 = var21.iterator();
    boolean var27 = var21.isEmpty();
    java.util.Iterator var28 = var21.iterator();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var30 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var31 = var30.isEmpty();
    boolean var32 = var30.isEmpty();
    java.util.Iterator var33 = var30.iterator();
    boolean var34 = var30.isEmpty();
    int var35 = var30.size();
    int var36 = var30.size();
    java.util.Iterator var37 = var30.iterator();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var39 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var39.enqueue((java.lang.Object)'#');
    java.util.Iterator var42 = var39.iterator();
    java.util.Iterator var43 = var39.iterator();
    java.util.Iterator var44 = var39.iterator();
    var30.enqueue((java.lang.Object)var39);
    java.util.Iterator var46 = var30.iterator();
    java.util.Iterator var47 = var30.iterator();
    java.lang.Object var48 = var30.dequeue();
    var21.enqueue((java.lang.Object)var30);
    var1.enqueue((java.lang.Object)var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);

  }

  public void test307() throws Throwable {

    if (debug) System.out.printf("%nRingBufferMutantTest1.test307");


    at.fhhagenberg.sqe.exercise13.RingBufferMutant var1 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var2 = var1.isEmpty();
    boolean var3 = var1.isEmpty();
    java.util.Iterator var4 = var1.iterator();
    boolean var5 = var1.isEmpty();
    java.util.Iterator var6 = var1.iterator();
    int var7 = var1.size();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var9 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var9.enqueue((java.lang.Object)'#');
    int var12 = var9.size();
    int var13 = var9.size();
    java.util.Iterator var14 = var9.iterator();
    java.util.Iterator var15 = var9.iterator();
    var1.enqueue((java.lang.Object)var15);
    java.util.Iterator var17 = var1.iterator();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var19 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var19.enqueue((java.lang.Object)'#');
    var19.enqueue((java.lang.Object)' ');
    int var24 = var19.size();
    java.util.Iterator var25 = var19.iterator();
    boolean var26 = var19.isEmpty();
    java.util.Iterator var27 = var19.iterator();
    int var28 = var19.size();
    boolean var29 = var19.isEmpty();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var31 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var31.enqueue((java.lang.Object)'#');
    java.util.Iterator var34 = var31.iterator();
    java.util.Iterator var35 = var31.iterator();
    var31.enqueue((java.lang.Object)false);
    int var38 = var31.size();
    boolean var39 = var31.isEmpty();
    java.lang.Object var40 = var31.dequeue();
    java.util.Iterator var41 = var31.iterator();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var43 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var43.enqueue((java.lang.Object)'#');
    java.util.Iterator var46 = var43.iterator();
    java.util.Iterator var47 = var43.iterator();
    java.util.Iterator var48 = var43.iterator();
    var31.enqueue((java.lang.Object)var43);
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var51 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(0);
    int var52 = var51.size();
    boolean var53 = var51.isEmpty();
    boolean var54 = var51.isEmpty();
    boolean var55 = var51.isEmpty();
    var43.enqueue((java.lang.Object)var51);
    java.util.Iterator var57 = var43.iterator();
    boolean var58 = var43.isEmpty();
    var19.enqueue((java.lang.Object)var43);
    var1.enqueue((java.lang.Object)var19);
    java.util.Iterator var61 = var19.iterator();
    int var62 = var19.size();
    boolean var63 = var19.isEmpty();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var40 + "' != '" + '#'+ "'", var40.equals('#'));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == false);

  }

  public void test308() throws Throwable {

    if (debug) System.out.printf("%nRingBufferMutantTest1.test308");


    at.fhhagenberg.sqe.exercise13.RingBufferMutant var1 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var1.enqueue((java.lang.Object)'#');
    var1.enqueue((java.lang.Object)' ');
    int var6 = var1.size();
    java.util.Iterator var7 = var1.iterator();
    boolean var8 = var1.isEmpty();
    java.util.Iterator var9 = var1.iterator();
    int var10 = var1.size();
    boolean var11 = var1.isEmpty();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var13 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var13.enqueue((java.lang.Object)'#');
    java.util.Iterator var16 = var13.iterator();
    java.util.Iterator var17 = var13.iterator();
    var13.enqueue((java.lang.Object)false);
    int var20 = var13.size();
    boolean var21 = var13.isEmpty();
    java.lang.Object var22 = var13.dequeue();
    java.util.Iterator var23 = var13.iterator();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var25 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var25.enqueue((java.lang.Object)'#');
    java.util.Iterator var28 = var25.iterator();
    java.util.Iterator var29 = var25.iterator();
    java.util.Iterator var30 = var25.iterator();
    var13.enqueue((java.lang.Object)var25);
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var33 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(0);
    int var34 = var33.size();
    boolean var35 = var33.isEmpty();
    boolean var36 = var33.isEmpty();
    boolean var37 = var33.isEmpty();
    var25.enqueue((java.lang.Object)var33);
    java.util.Iterator var39 = var25.iterator();
    boolean var40 = var25.isEmpty();
    var1.enqueue((java.lang.Object)var25);
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var43 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var43.enqueue((java.lang.Object)'#');
    int var46 = var43.size();
    java.lang.Object var47 = var43.dequeue();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var49 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var49.enqueue((java.lang.Object)'#');
    var49.enqueue((java.lang.Object)' ');
    int var54 = var49.size();
    int var55 = var49.size();
    java.util.Iterator var56 = var49.iterator();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var58 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(0);
    java.util.Iterator var59 = var58.iterator();
    var49.enqueue((java.lang.Object)var59);
    var43.enqueue((java.lang.Object)var49);
    boolean var62 = var49.isEmpty();
    java.lang.Object var63 = var49.dequeue();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var65 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(100);
    boolean var66 = var65.isEmpty();
    boolean var67 = var65.isEmpty();
    java.util.Iterator var68 = var65.iterator();
    var49.enqueue((java.lang.Object)var68);
    java.util.Iterator var70 = var49.iterator();
    var1.enqueue((java.lang.Object)var70);
    int var72 = var1.size();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var74 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var74.enqueue((java.lang.Object)'#');
    java.util.Iterator var77 = var74.iterator();
    var74.enqueue((java.lang.Object)100.0d);
    boolean var80 = var74.isEmpty();
    java.util.Iterator var81 = var74.iterator();
    int var82 = var74.size();
    int var83 = var74.size();
    java.lang.Object var84 = var74.dequeue();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var86 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(1);
    int var87 = var86.size();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var89 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(0);
    int var90 = var89.size();
    boolean var91 = var89.isEmpty();
    boolean var92 = var89.isEmpty();
    boolean var93 = var89.isEmpty();
    java.util.Iterator var94 = var89.iterator();
    var86.enqueue((java.lang.Object)var94);
    var74.enqueue((java.lang.Object)var94);
    var1.enqueue((java.lang.Object)var94);
    java.util.Iterator var98 = var1.iterator();
    java.lang.Object var99 = var1.dequeue();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var22 + "' != '" + '#'+ "'", var22.equals('#'));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var47 + "' != '" + '#'+ "'", var47.equals('#'));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var63 + "' != '" + '#'+ "'", var63.equals('#'));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var80 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var82 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var83 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var84 + "' != '" + '#'+ "'", var84.equals('#'));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var87 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var90 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var91 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var92 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var93 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var94);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var98);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var99 + "' != '" + '#'+ "'", var99.equals('#'));

  }

  public void test309() throws Throwable {

    if (debug) System.out.printf("%nRingBufferMutantTest1.test309");


    at.fhhagenberg.sqe.exercise13.RingBufferMutant var1 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var2 = var1.isEmpty();
    boolean var3 = var1.isEmpty();
    java.util.Iterator var4 = var1.iterator();
    boolean var5 = var1.isEmpty();
    var1.enqueue((java.lang.Object)'#');
    boolean var8 = var1.isEmpty();
    int var9 = var1.size();
    java.util.Iterator var10 = var1.iterator();
    boolean var11 = var1.isEmpty();
    java.util.Iterator var12 = var1.iterator();
    boolean var13 = var1.isEmpty();
    java.util.Iterator var14 = var1.iterator();
    int var15 = var1.size();
    int var16 = var1.size();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var18 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var18.enqueue((java.lang.Object)'#');
    java.util.Iterator var21 = var18.iterator();
    java.util.Iterator var22 = var18.iterator();
    var18.enqueue((java.lang.Object)false);
    java.lang.Object var25 = var18.dequeue();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var27 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var28 = var27.isEmpty();
    boolean var29 = var27.isEmpty();
    java.util.Iterator var30 = var27.iterator();
    boolean var31 = var27.isEmpty();
    var27.enqueue((java.lang.Object)'#');
    boolean var34 = var27.isEmpty();
    int var35 = var27.size();
    java.util.Iterator var36 = var27.iterator();
    var18.enqueue((java.lang.Object)var27);
    int var38 = var27.size();
    int var39 = var27.size();
    java.util.Iterator var40 = var27.iterator();
    int var41 = var27.size();
    var1.enqueue((java.lang.Object)var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var25 + "' != '" + '#'+ "'", var25.equals('#'));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == 1);

  }

  public void test310() throws Throwable {

    if (debug) System.out.printf("%nRingBufferMutantTest1.test310");


    at.fhhagenberg.sqe.exercise13.RingBufferMutant var1 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var2 = var1.isEmpty();
    boolean var3 = var1.isEmpty();
    java.util.Iterator var4 = var1.iterator();
    boolean var5 = var1.isEmpty();
    var1.enqueue((java.lang.Object)'#');
    boolean var8 = var1.isEmpty();
    int var9 = var1.size();
    java.util.Iterator var10 = var1.iterator();
    boolean var11 = var1.isEmpty();
    int var12 = var1.size();
    int var13 = var1.size();
    java.util.Iterator var14 = var1.iterator();
    java.lang.Object var15 = var1.dequeue();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var15 + "' != '" + '#'+ "'", var15.equals('#'));

  }

  public void test311() throws Throwable {

    if (debug) System.out.printf("%nRingBufferMutantTest1.test311");


    at.fhhagenberg.sqe.exercise13.RingBufferMutant var1 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var2 = var1.isEmpty();
    boolean var3 = var1.isEmpty();
    java.util.Iterator var4 = var1.iterator();
    boolean var5 = var1.isEmpty();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var7 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var7.enqueue((java.lang.Object)'#');
    java.util.Iterator var10 = var7.iterator();
    java.util.Iterator var11 = var7.iterator();
    var7.enqueue((java.lang.Object)false);
    int var14 = var7.size();
    var1.enqueue((java.lang.Object)var7);
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var17 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var17.enqueue((java.lang.Object)'#');
    var17.enqueue((java.lang.Object)' ');
    int var22 = var17.size();
    java.util.Iterator var23 = var17.iterator();
    boolean var24 = var17.isEmpty();
    java.util.Iterator var25 = var17.iterator();
    var7.enqueue((java.lang.Object)var17);
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var28 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var28.enqueue((java.lang.Object)'#');
    int var31 = var28.size();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var33 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var34 = var33.isEmpty();
    boolean var35 = var33.isEmpty();
    java.util.Iterator var36 = var33.iterator();
    boolean var37 = var33.isEmpty();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var39 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var39.enqueue((java.lang.Object)'#');
    java.util.Iterator var42 = var39.iterator();
    java.util.Iterator var43 = var39.iterator();
    var39.enqueue((java.lang.Object)false);
    int var46 = var39.size();
    var33.enqueue((java.lang.Object)var39);
    var28.enqueue((java.lang.Object)var39);
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var50 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var50.enqueue((java.lang.Object)1.0d);
    java.util.Iterator var53 = var50.iterator();
    boolean var54 = var50.isEmpty();
    boolean var55 = var50.isEmpty();
    boolean var56 = var50.isEmpty();
    var28.enqueue((java.lang.Object)var50);
    int var58 = var28.size();
    java.util.Iterator var59 = var28.iterator();
    var7.enqueue((java.lang.Object)var28);
    int var61 = var28.size();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == 3);

  }

  public void test312() throws Throwable {

    if (debug) System.out.printf("%nRingBufferMutantTest1.test312");


    at.fhhagenberg.sqe.exercise13.RingBufferMutant var1 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var2 = var1.isEmpty();
    boolean var3 = var1.isEmpty();
    java.util.Iterator var4 = var1.iterator();
    boolean var5 = var1.isEmpty();
    int var6 = var1.size();
    java.util.Iterator var7 = var1.iterator();
    int var8 = var1.size();
    int var9 = var1.size();
    boolean var10 = var1.isEmpty();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == true);

  }

  public void test313() throws Throwable {

    if (debug) System.out.printf("%nRingBufferMutantTest1.test313");


    at.fhhagenberg.sqe.exercise13.RingBufferMutant var1 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var1.enqueue((java.lang.Object)1.0d);
    int var4 = var1.size();
    java.lang.Object var5 = var1.dequeue();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + 1.0d+ "'", var5.equals(1.0d));

  }

  public void test314() throws Throwable {

    if (debug) System.out.printf("%nRingBufferMutantTest1.test314");


    at.fhhagenberg.sqe.exercise13.RingBufferMutant var1 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var1.enqueue((java.lang.Object)'#');
    java.util.Iterator var4 = var1.iterator();
    java.util.Iterator var5 = var1.iterator();
    var1.enqueue((java.lang.Object)false);
    int var8 = var1.size();
    boolean var9 = var1.isEmpty();
    java.util.Iterator var10 = var1.iterator();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var12 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var13 = var12.isEmpty();
    boolean var14 = var12.isEmpty();
    java.util.Iterator var15 = var12.iterator();
    boolean var16 = var12.isEmpty();
    int var17 = var12.size();
    java.util.Iterator var18 = var12.iterator();
    var1.enqueue((java.lang.Object)var18);
    java.util.Iterator var20 = var1.iterator();
    int var21 = var1.size();
    int var22 = var1.size();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 3);

  }

  public void test315() throws Throwable {

    if (debug) System.out.printf("%nRingBufferMutantTest1.test315");


    at.fhhagenberg.sqe.exercise13.RingBufferMutant var1 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var1.enqueue((java.lang.Object)'#');
    java.util.Iterator var4 = var1.iterator();
    java.util.Iterator var5 = var1.iterator();
    var1.enqueue((java.lang.Object)false);
    int var8 = var1.size();
    boolean var9 = var1.isEmpty();
    int var10 = var1.size();
    java.lang.Object var11 = new java.lang.Object();
    var1.enqueue(var11);
    boolean var13 = var1.isEmpty();
    boolean var14 = var1.isEmpty();
    java.lang.Object var15 = var1.dequeue();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var17 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var18 = var17.isEmpty();
    boolean var19 = var17.isEmpty();
    java.util.Iterator var20 = var17.iterator();
    boolean var21 = var17.isEmpty();
    int var22 = var17.size();
    int var23 = var17.size();
    java.util.Iterator var24 = var17.iterator();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var26 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var26.enqueue((java.lang.Object)'#');
    java.util.Iterator var29 = var26.iterator();
    java.util.Iterator var30 = var26.iterator();
    java.util.Iterator var31 = var26.iterator();
    var17.enqueue((java.lang.Object)var26);
    java.lang.Object var33 = var26.dequeue();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var35 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var36 = var35.isEmpty();
    boolean var37 = var35.isEmpty();
    java.util.Iterator var38 = var35.iterator();
    boolean var39 = var35.isEmpty();
    int var40 = var35.size();
    java.util.Iterator var41 = var35.iterator();
    int var42 = var35.size();
    int var43 = var35.size();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var45 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(0);
    int var46 = var45.size();
    boolean var47 = var45.isEmpty();
    var35.enqueue((java.lang.Object)var47);
    var26.enqueue((java.lang.Object)var35);
    var1.enqueue((java.lang.Object)var26);
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var52 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var52.enqueue((java.lang.Object)'#');
    var52.enqueue((java.lang.Object)' ');
    int var57 = var52.size();
    java.util.Iterator var58 = var52.iterator();
    boolean var59 = var52.isEmpty();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var61 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var62 = var61.isEmpty();
    boolean var63 = var61.isEmpty();
    java.util.Iterator var64 = var61.iterator();
    boolean var65 = var61.isEmpty();
    java.util.Iterator var66 = var61.iterator();
    int var67 = var61.size();
    var52.enqueue((java.lang.Object)var67);
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var70 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var70.enqueue((java.lang.Object)1.0d);
    java.util.Iterator var73 = var70.iterator();
    var52.enqueue((java.lang.Object)var73);
    var1.enqueue((java.lang.Object)var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var15 + "' != '" + '#'+ "'", var15.equals('#'));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var33 + "' != '" + '#'+ "'", var33.equals('#'));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);

  }

  public void test316() throws Throwable {

    if (debug) System.out.printf("%nRingBufferMutantTest1.test316");


    at.fhhagenberg.sqe.exercise13.RingBufferMutant var1 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(0);
    int var2 = var1.size();
    boolean var3 = var1.isEmpty();
    boolean var4 = var1.isEmpty();
    boolean var5 = var1.isEmpty();
    boolean var6 = var1.isEmpty();
    int var7 = var1.size();
    boolean var8 = var1.isEmpty();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var10 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var10.enqueue((java.lang.Object)'#');
    var10.enqueue((java.lang.Object)' ');
    int var15 = var10.size();
    java.util.Iterator var16 = var10.iterator();
    boolean var17 = var10.isEmpty();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var19 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var20 = var19.isEmpty();
    boolean var21 = var19.isEmpty();
    java.util.Iterator var22 = var19.iterator();
    boolean var23 = var19.isEmpty();
    java.util.Iterator var24 = var19.iterator();
    int var25 = var19.size();
    var10.enqueue((java.lang.Object)var25);
    int var27 = var10.size();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var1.enqueue((java.lang.Object)var27);
      fail("Expected exception of type java.lang.RuntimeException");
    } catch (java.lang.RuntimeException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 3);

  }

  public void test317() throws Throwable {

    if (debug) System.out.printf("%nRingBufferMutantTest1.test317");


    at.fhhagenberg.sqe.exercise13.RingBufferMutant var1 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var1.enqueue((java.lang.Object)'#');
    java.util.Iterator var4 = var1.iterator();
    java.util.Iterator var5 = var1.iterator();
    var1.enqueue((java.lang.Object)false);
    int var8 = var1.size();
    boolean var9 = var1.isEmpty();
    boolean var10 = var1.isEmpty();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var12 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var12.enqueue((java.lang.Object)'#');
    java.util.Iterator var15 = var12.iterator();
    var12.enqueue((java.lang.Object)100.0d);
    boolean var18 = var12.isEmpty();
    java.util.Iterator var19 = var12.iterator();
    int var20 = var12.size();
    var1.enqueue((java.lang.Object)var20);
    int var22 = var1.size();
    int var23 = var1.size();
    java.lang.Object var24 = var1.dequeue();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var24 + "' != '" + '#'+ "'", var24.equals('#'));

  }

  public void test318() throws Throwable {

    if (debug) System.out.printf("%nRingBufferMutantTest1.test318");


    at.fhhagenberg.sqe.exercise13.RingBufferMutant var1 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(1);
    java.util.Iterator var2 = var1.iterator();
    java.util.Iterator var3 = var1.iterator();
    java.util.Iterator var4 = var1.iterator();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var6 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var7 = var6.isEmpty();
    boolean var8 = var6.isEmpty();
    java.util.Iterator var9 = var6.iterator();
    boolean var10 = var6.isEmpty();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var12 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var12.enqueue((java.lang.Object)'#');
    java.util.Iterator var15 = var12.iterator();
    java.util.Iterator var16 = var12.iterator();
    var12.enqueue((java.lang.Object)false);
    int var19 = var12.size();
    var6.enqueue((java.lang.Object)var12);
    boolean var21 = var12.isEmpty();
    var1.enqueue((java.lang.Object)var12);
    java.util.Iterator var23 = var12.iterator();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);

  }

  public void test319() throws Throwable {

    if (debug) System.out.printf("%nRingBufferMutantTest1.test319");


    at.fhhagenberg.sqe.exercise13.RingBufferMutant var1 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var2 = var1.isEmpty();
    boolean var3 = var1.isEmpty();
    java.util.Iterator var4 = var1.iterator();
    boolean var5 = var1.isEmpty();
    var1.enqueue((java.lang.Object)'#');
    boolean var8 = var1.isEmpty();
    int var9 = var1.size();
    java.util.Iterator var10 = var1.iterator();
    boolean var11 = var1.isEmpty();
    java.util.Iterator var12 = var1.iterator();
    boolean var13 = var1.isEmpty();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var15 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var15.enqueue((java.lang.Object)1.0d);
    java.util.Iterator var18 = var15.iterator();
    boolean var19 = var15.isEmpty();
    boolean var20 = var15.isEmpty();
    java.util.Iterator var21 = var15.iterator();
    var1.enqueue((java.lang.Object)var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);

  }

  public void test320() throws Throwable {

    if (debug) System.out.printf("%nRingBufferMutantTest1.test320");


    at.fhhagenberg.sqe.exercise13.RingBufferMutant var1 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var2 = var1.isEmpty();
    boolean var3 = var1.isEmpty();
    java.util.Iterator var4 = var1.iterator();
    boolean var5 = var1.isEmpty();
    var1.enqueue((java.lang.Object)'#');
    boolean var8 = var1.isEmpty();
    int var9 = var1.size();
    java.util.Iterator var10 = var1.iterator();
    boolean var11 = var1.isEmpty();
    java.util.Iterator var12 = var1.iterator();
    boolean var13 = var1.isEmpty();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var15 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var15.enqueue((java.lang.Object)'#');
    java.util.Iterator var18 = var15.iterator();
    java.util.Iterator var19 = var15.iterator();
    var15.enqueue((java.lang.Object)false);
    java.lang.Object var22 = var15.dequeue();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var24 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var25 = var24.isEmpty();
    boolean var26 = var24.isEmpty();
    java.util.Iterator var27 = var24.iterator();
    boolean var28 = var24.isEmpty();
    var24.enqueue((java.lang.Object)'#');
    boolean var31 = var24.isEmpty();
    int var32 = var24.size();
    java.util.Iterator var33 = var24.iterator();
    var15.enqueue((java.lang.Object)var24);
    java.util.Iterator var35 = var15.iterator();
    var1.enqueue((java.lang.Object)var15);
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var38 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var38.enqueue((java.lang.Object)1.0d);
    java.util.Iterator var41 = var38.iterator();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var43 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(1);
    boolean var44 = var43.isEmpty();
    boolean var45 = var43.isEmpty();
    java.util.Iterator var46 = var43.iterator();
    var38.enqueue((java.lang.Object)var43);
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var49 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var49.enqueue((java.lang.Object)'#');
    java.util.Iterator var52 = var49.iterator();
    java.util.Iterator var53 = var49.iterator();
    var49.enqueue((java.lang.Object)false);
    int var56 = var49.size();
    boolean var57 = var49.isEmpty();
    boolean var58 = var49.isEmpty();
    boolean var59 = var49.isEmpty();
    java.lang.Object var60 = var49.dequeue();
    java.util.Iterator var61 = var49.iterator();
    var38.enqueue((java.lang.Object)var49);
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var64 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var64.enqueue((java.lang.Object)'#');
    int var67 = var64.size();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var69 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var70 = var69.isEmpty();
    boolean var71 = var69.isEmpty();
    java.util.Iterator var72 = var69.iterator();
    boolean var73 = var69.isEmpty();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var75 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var75.enqueue((java.lang.Object)'#');
    java.util.Iterator var78 = var75.iterator();
    java.util.Iterator var79 = var75.iterator();
    var75.enqueue((java.lang.Object)false);
    int var82 = var75.size();
    var69.enqueue((java.lang.Object)var75);
    var64.enqueue((java.lang.Object)var75);
    java.util.Iterator var85 = var64.iterator();
    java.util.Iterator var86 = var64.iterator();
    var38.enqueue((java.lang.Object)var64);
    java.util.Iterator var88 = var64.iterator();
    boolean var89 = var64.isEmpty();
    java.util.Iterator var90 = var64.iterator();
    var1.enqueue((java.lang.Object)var64);
    boolean var92 = var64.isEmpty();
    boolean var93 = var64.isEmpty();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var22 + "' != '" + '#'+ "'", var22.equals('#'));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var60 + "' != '" + '#'+ "'", var60.equals('#'));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var82 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var85);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var86);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var88);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var89 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var90);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var92 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var93 == false);

  }

  public void test321() throws Throwable {

    if (debug) System.out.printf("%nRingBufferMutantTest1.test321");


    at.fhhagenberg.sqe.exercise13.RingBufferMutant var1 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var1.enqueue((java.lang.Object)'#');
    java.util.Iterator var4 = var1.iterator();
    java.util.Iterator var5 = var1.iterator();
    var1.enqueue((java.lang.Object)false);
    int var8 = var1.size();
    boolean var9 = var1.isEmpty();
    java.lang.Object var10 = var1.dequeue();
    java.util.Iterator var11 = var1.iterator();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var13 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var13.enqueue((java.lang.Object)'#');
    java.util.Iterator var16 = var13.iterator();
    java.util.Iterator var17 = var13.iterator();
    java.util.Iterator var18 = var13.iterator();
    var1.enqueue((java.lang.Object)var13);
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var21 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(0);
    int var22 = var21.size();
    boolean var23 = var21.isEmpty();
    boolean var24 = var21.isEmpty();
    boolean var25 = var21.isEmpty();
    var13.enqueue((java.lang.Object)var21);
    java.util.Iterator var27 = var13.iterator();
    boolean var28 = var13.isEmpty();
    boolean var29 = var13.isEmpty();
    boolean var30 = var13.isEmpty();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + '#'+ "'", var10.equals('#'));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);

  }

  public void test322() throws Throwable {

    if (debug) System.out.printf("%nRingBufferMutantTest1.test322");


    at.fhhagenberg.sqe.exercise13.RingBufferMutant var1 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var2 = var1.isEmpty();
    boolean var3 = var1.isEmpty();
    java.util.Iterator var4 = var1.iterator();
    boolean var5 = var1.isEmpty();
    var1.enqueue((java.lang.Object)'#');
    boolean var8 = var1.isEmpty();
    int var9 = var1.size();
    java.util.Iterator var10 = var1.iterator();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var12 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var12.enqueue((java.lang.Object)'#');
    java.util.Iterator var15 = var12.iterator();
    var12.enqueue((java.lang.Object)100.0d);
    boolean var18 = var12.isEmpty();
    java.lang.Object var19 = var12.dequeue();
    var1.enqueue(var19);
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var22 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var22.enqueue((java.lang.Object)'#');
    java.util.Iterator var25 = var22.iterator();
    var1.enqueue((java.lang.Object)var22);
    boolean var27 = var22.isEmpty();
    int var28 = var22.size();
    int var29 = var22.size();
    java.lang.Object var30 = var22.dequeue();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + '#'+ "'", var19.equals('#'));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var30 + "' != '" + '#'+ "'", var30.equals('#'));

  }

  public void test323() throws Throwable {

    if (debug) System.out.printf("%nRingBufferMutantTest1.test323");


    at.fhhagenberg.sqe.exercise13.RingBufferMutant var1 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var2 = var1.isEmpty();
    boolean var3 = var1.isEmpty();
    java.util.Iterator var4 = var1.iterator();
    boolean var5 = var1.isEmpty();
    var1.enqueue((java.lang.Object)'#');
    boolean var8 = var1.isEmpty();
    int var9 = var1.size();
    java.util.Iterator var10 = var1.iterator();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var12 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var12.enqueue((java.lang.Object)'#');
    java.util.Iterator var15 = var12.iterator();
    var12.enqueue((java.lang.Object)100.0d);
    boolean var18 = var12.isEmpty();
    java.lang.Object var19 = var12.dequeue();
    var1.enqueue(var19);
    var1.enqueue((java.lang.Object)'4');
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var24 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var24.enqueue((java.lang.Object)'#');
    int var27 = var24.size();
    var24.enqueue((java.lang.Object)true);
    java.util.Iterator var30 = var24.iterator();
    var1.enqueue((java.lang.Object)var24);
    java.lang.Object var32 = var1.dequeue();
    java.util.Iterator var33 = var1.iterator();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var35 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(0);
    java.util.Iterator var36 = var35.iterator();
    var1.enqueue((java.lang.Object)var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + '#'+ "'", var19.equals('#'));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var32 + "' != '" + '#'+ "'", var32.equals('#'));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);

  }

  public void test324() throws Throwable {

    if (debug) System.out.printf("%nRingBufferMutantTest1.test324");


    at.fhhagenberg.sqe.exercise13.RingBufferMutant var1 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var2 = var1.isEmpty();
    boolean var3 = var1.isEmpty();
    boolean var4 = var1.isEmpty();
    int var5 = var1.size();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var7 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(1);
    var1.enqueue((java.lang.Object)var7);
    java.lang.Object var9 = var1.dequeue();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var11 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var12 = var11.isEmpty();
    boolean var13 = var11.isEmpty();
    boolean var14 = var11.isEmpty();
    int var15 = var11.size();
    java.util.Iterator var16 = var11.iterator();
    var1.enqueue((java.lang.Object)var16);
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var19 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var19.enqueue((java.lang.Object)'#');
    java.util.Iterator var22 = var19.iterator();
    java.util.Iterator var23 = var19.iterator();
    var19.enqueue((java.lang.Object)false);
    int var26 = var19.size();
    boolean var27 = var19.isEmpty();
    boolean var28 = var19.isEmpty();
    boolean var29 = var19.isEmpty();
    int var30 = var19.size();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var32 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(100);
    int var33 = var32.size();
    java.util.Iterator var34 = var32.iterator();
    var19.enqueue((java.lang.Object)var32);
    int var36 = var32.size();
    var1.enqueue((java.lang.Object)var32);
    java.util.Iterator var38 = var32.iterator();
    java.util.Iterator var39 = var32.iterator();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);

  }

  public void test325() throws Throwable {

    if (debug) System.out.printf("%nRingBufferMutantTest1.test325");


    at.fhhagenberg.sqe.exercise13.RingBufferMutant var1 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var2 = var1.isEmpty();
    boolean var3 = var1.isEmpty();
    java.util.Iterator var4 = var1.iterator();
    boolean var5 = var1.isEmpty();
    int var6 = var1.size();
    int var7 = var1.size();
    java.util.Iterator var8 = var1.iterator();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var10 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var10.enqueue((java.lang.Object)'#');
    java.util.Iterator var13 = var10.iterator();
    java.util.Iterator var14 = var10.iterator();
    var10.enqueue((java.lang.Object)false);
    java.lang.Object var17 = var10.dequeue();
    var1.enqueue((java.lang.Object)var10);
    boolean var19 = var1.isEmpty();
    java.util.Iterator var20 = var1.iterator();
    java.util.Iterator var21 = var1.iterator();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + '#'+ "'", var17.equals('#'));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);

  }

  public void test326() throws Throwable {

    if (debug) System.out.printf("%nRingBufferMutantTest1.test326");


    at.fhhagenberg.sqe.exercise13.RingBufferMutant var1 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var1.enqueue((java.lang.Object)'#');
    java.util.Iterator var4 = var1.iterator();
    java.util.Iterator var5 = var1.iterator();
    java.util.Iterator var6 = var1.iterator();
    java.util.Iterator var7 = var1.iterator();
    java.util.Iterator var8 = var1.iterator();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);

  }

  public void test327() throws Throwable {

    if (debug) System.out.printf("%nRingBufferMutantTest1.test327");


    at.fhhagenberg.sqe.exercise13.RingBufferMutant var1 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(100);
    int var2 = var1.size();
    int var3 = var1.size();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var5 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var6 = var5.isEmpty();
    boolean var7 = var5.isEmpty();
    java.util.Iterator var8 = var5.iterator();
    boolean var9 = var5.isEmpty();
    java.util.Iterator var10 = var5.iterator();
    var1.enqueue((java.lang.Object)var10);
    java.util.Iterator var12 = var1.iterator();
    java.util.Iterator var13 = var1.iterator();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var15 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(1);
    java.util.Iterator var16 = var15.iterator();
    boolean var17 = var15.isEmpty();
    java.util.Iterator var18 = var15.iterator();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var20 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var20.enqueue((java.lang.Object)'#');
    int var23 = var20.size();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var25 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var26 = var25.isEmpty();
    boolean var27 = var25.isEmpty();
    java.util.Iterator var28 = var25.iterator();
    boolean var29 = var25.isEmpty();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var31 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var31.enqueue((java.lang.Object)'#');
    java.util.Iterator var34 = var31.iterator();
    java.util.Iterator var35 = var31.iterator();
    var31.enqueue((java.lang.Object)false);
    int var38 = var31.size();
    var25.enqueue((java.lang.Object)var31);
    var20.enqueue((java.lang.Object)var31);
    java.util.Iterator var41 = var31.iterator();
    java.util.Iterator var42 = var31.iterator();
    var15.enqueue((java.lang.Object)var31);
    var1.enqueue((java.lang.Object)var31);
    int var45 = var31.size();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == 2);

  }

  public void test328() throws Throwable {

    if (debug) System.out.printf("%nRingBufferMutantTest1.test328");


    at.fhhagenberg.sqe.exercise13.RingBufferMutant var1 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var2 = var1.isEmpty();
    boolean var3 = var1.isEmpty();
    java.util.Iterator var4 = var1.iterator();
    boolean var5 = var1.isEmpty();
    int var6 = var1.size();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var8 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var8.enqueue((java.lang.Object)'#');
    int var11 = var8.size();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var13 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var14 = var13.isEmpty();
    boolean var15 = var13.isEmpty();
    java.util.Iterator var16 = var13.iterator();
    boolean var17 = var13.isEmpty();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var19 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var19.enqueue((java.lang.Object)'#');
    java.util.Iterator var22 = var19.iterator();
    java.util.Iterator var23 = var19.iterator();
    var19.enqueue((java.lang.Object)false);
    int var26 = var19.size();
    var13.enqueue((java.lang.Object)var19);
    var8.enqueue((java.lang.Object)var19);
    java.util.Iterator var29 = var19.iterator();
    java.util.Iterator var30 = var19.iterator();
    java.util.Iterator var31 = var19.iterator();
    var1.enqueue((java.lang.Object)var19);
    int var33 = var19.size();
    java.lang.Object var34 = var19.dequeue();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var34 + "' != '" + '#'+ "'", var34.equals('#'));

  }

  public void test329() throws Throwable {

    if (debug) System.out.printf("%nRingBufferMutantTest1.test329");


    at.fhhagenberg.sqe.exercise13.RingBufferMutant var1 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var2 = var1.isEmpty();
    boolean var3 = var1.isEmpty();
    java.util.Iterator var4 = var1.iterator();
    boolean var5 = var1.isEmpty();
    int var6 = var1.size();
    int var7 = var1.size();
    java.util.Iterator var8 = var1.iterator();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var10 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var10.enqueue((java.lang.Object)'#');
    java.util.Iterator var13 = var10.iterator();
    java.util.Iterator var14 = var10.iterator();
    java.util.Iterator var15 = var10.iterator();
    var1.enqueue((java.lang.Object)var10);
    int var17 = var10.size();
    boolean var18 = var10.isEmpty();
    java.util.Iterator var19 = var10.iterator();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var21 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var21.enqueue((java.lang.Object)'#');
    java.util.Iterator var24 = var21.iterator();
    java.util.Iterator var25 = var21.iterator();
    java.util.Iterator var26 = var21.iterator();
    boolean var27 = var21.isEmpty();
    java.util.Iterator var28 = var21.iterator();
    boolean var29 = var21.isEmpty();
    var10.enqueue((java.lang.Object)var21);
    boolean var31 = var21.isEmpty();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);

  }

  public void test330() throws Throwable {

    if (debug) System.out.printf("%nRingBufferMutantTest1.test330");


    at.fhhagenberg.sqe.exercise13.RingBufferMutant var1 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var1.enqueue((java.lang.Object)'#');
    var1.enqueue((java.lang.Object)' ');
    java.lang.Object var6 = var1.dequeue();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var8 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(1);
    java.util.Iterator var9 = var8.iterator();
    java.util.Iterator var10 = var8.iterator();
    int var11 = var8.size();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var13 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var13.enqueue((java.lang.Object)'#');
    java.util.Iterator var16 = var13.iterator();
    java.util.Iterator var17 = var13.iterator();
    var13.enqueue((java.lang.Object)false);
    int var20 = var13.size();
    boolean var21 = var13.isEmpty();
    boolean var22 = var13.isEmpty();
    boolean var23 = var13.isEmpty();
    int var24 = var13.size();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var26 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var27 = var26.isEmpty();
    boolean var28 = var26.isEmpty();
    java.util.Iterator var29 = var26.iterator();
    boolean var30 = var26.isEmpty();
    int var31 = var26.size();
    int var32 = var26.size();
    var13.enqueue((java.lang.Object)var26);
    var8.enqueue((java.lang.Object)var26);
    var1.enqueue((java.lang.Object)var26);
    java.util.Iterator var36 = var1.iterator();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var38 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var39 = var38.isEmpty();
    boolean var40 = var38.isEmpty();
    java.util.Iterator var41 = var38.iterator();
    boolean var42 = var38.isEmpty();
    int var43 = var38.size();
    int var44 = var38.size();
    java.util.Iterator var45 = var38.iterator();
    int var46 = var38.size();
    java.util.Iterator var47 = var38.iterator();
    var1.enqueue((java.lang.Object)var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + '#'+ "'", var6.equals('#'));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);

  }

  public void test331() throws Throwable {

    if (debug) System.out.printf("%nRingBufferMutantTest1.test331");


    at.fhhagenberg.sqe.exercise13.RingBufferMutant var1 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var2 = var1.isEmpty();
    boolean var3 = var1.isEmpty();
    java.util.Iterator var4 = var1.iterator();
    boolean var5 = var1.isEmpty();
    int var6 = var1.size();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var8 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var8.enqueue((java.lang.Object)'#');
    int var11 = var8.size();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var13 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var14 = var13.isEmpty();
    boolean var15 = var13.isEmpty();
    java.util.Iterator var16 = var13.iterator();
    boolean var17 = var13.isEmpty();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var19 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var19.enqueue((java.lang.Object)'#');
    java.util.Iterator var22 = var19.iterator();
    java.util.Iterator var23 = var19.iterator();
    var19.enqueue((java.lang.Object)false);
    int var26 = var19.size();
    var13.enqueue((java.lang.Object)var19);
    var8.enqueue((java.lang.Object)var19);
    java.util.Iterator var29 = var19.iterator();
    java.util.Iterator var30 = var19.iterator();
    java.util.Iterator var31 = var19.iterator();
    var1.enqueue((java.lang.Object)var19);
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var34 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var34.enqueue((java.lang.Object)1.0d);
    java.util.Iterator var37 = var34.iterator();
    boolean var38 = var34.isEmpty();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var40 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var41 = var40.isEmpty();
    boolean var42 = var40.isEmpty();
    java.util.Iterator var43 = var40.iterator();
    boolean var44 = var40.isEmpty();
    var40.enqueue((java.lang.Object)'#');
    boolean var47 = var40.isEmpty();
    int var48 = var40.size();
    java.util.Iterator var49 = var40.iterator();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var51 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var51.enqueue((java.lang.Object)'#');
    java.util.Iterator var54 = var51.iterator();
    var51.enqueue((java.lang.Object)100.0d);
    boolean var57 = var51.isEmpty();
    java.lang.Object var58 = var51.dequeue();
    var40.enqueue(var58);
    java.util.Iterator var60 = var40.iterator();
    var34.enqueue((java.lang.Object)var40);
    var19.enqueue((java.lang.Object)var40);
    boolean var63 = var40.isEmpty();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var58 + "' != '" + '#'+ "'", var58.equals('#'));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == false);

  }

  public void test332() throws Throwable {

    if (debug) System.out.printf("%nRingBufferMutantTest1.test332");


    at.fhhagenberg.sqe.exercise13.RingBufferMutant var1 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var2 = var1.isEmpty();
    boolean var3 = var1.isEmpty();
    int var4 = var1.size();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var6 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var7 = var6.isEmpty();
    boolean var8 = var6.isEmpty();
    var1.enqueue((java.lang.Object)var8);
    boolean var10 = var1.isEmpty();
    boolean var11 = var1.isEmpty();
    int var12 = var1.size();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 1);

  }

  public void test333() throws Throwable {

    if (debug) System.out.printf("%nRingBufferMutantTest1.test333");


    at.fhhagenberg.sqe.exercise13.RingBufferMutant var1 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(2);
    java.util.Iterator var2 = var1.iterator();
    java.util.Iterator var3 = var1.iterator();
    java.util.Iterator var4 = var1.iterator();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var6 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var6.enqueue((java.lang.Object)'#');
    int var9 = var6.size();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var11 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var12 = var11.isEmpty();
    boolean var13 = var11.isEmpty();
    java.util.Iterator var14 = var11.iterator();
    boolean var15 = var11.isEmpty();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var17 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var17.enqueue((java.lang.Object)'#');
    java.util.Iterator var20 = var17.iterator();
    java.util.Iterator var21 = var17.iterator();
    var17.enqueue((java.lang.Object)false);
    int var24 = var17.size();
    var11.enqueue((java.lang.Object)var17);
    var6.enqueue((java.lang.Object)var17);
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var28 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var28.enqueue((java.lang.Object)1.0d);
    java.util.Iterator var31 = var28.iterator();
    boolean var32 = var28.isEmpty();
    boolean var33 = var28.isEmpty();
    boolean var34 = var28.isEmpty();
    var6.enqueue((java.lang.Object)var28);
    java.lang.Object var36 = var6.dequeue();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var38 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var39 = var38.isEmpty();
    boolean var40 = var38.isEmpty();
    java.util.Iterator var41 = var38.iterator();
    boolean var42 = var38.isEmpty();
    int var43 = var38.size();
    int var44 = var38.size();
    java.util.Iterator var45 = var38.iterator();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var47 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var47.enqueue((java.lang.Object)'#');
    java.util.Iterator var50 = var47.iterator();
    java.util.Iterator var51 = var47.iterator();
    var47.enqueue((java.lang.Object)false);
    java.lang.Object var54 = var47.dequeue();
    var38.enqueue((java.lang.Object)var47);
    java.util.Iterator var56 = var47.iterator();
    java.util.Iterator var57 = var47.iterator();
    var6.enqueue((java.lang.Object)var57);
    var1.enqueue((java.lang.Object)var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var36 + "' != '" + '#'+ "'", var36.equals('#'));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var54 + "' != '" + '#'+ "'", var54.equals('#'));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);

  }

  public void test334() throws Throwable {

    if (debug) System.out.printf("%nRingBufferMutantTest1.test334");


    at.fhhagenberg.sqe.exercise13.RingBufferMutant var1 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var1.enqueue((java.lang.Object)'#');
    int var4 = var1.size();
    int var5 = var1.size();
    java.util.Iterator var6 = var1.iterator();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var8 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var9 = var8.isEmpty();
    boolean var10 = var8.isEmpty();
    java.util.Iterator var11 = var8.iterator();
    boolean var12 = var8.isEmpty();
    var8.enqueue((java.lang.Object)1.0d);
    java.util.Iterator var15 = var8.iterator();
    var1.enqueue((java.lang.Object)var15);
    int var17 = var1.size();
    int var18 = var1.size();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 2);

  }

  public void test335() throws Throwable {

    if (debug) System.out.printf("%nRingBufferMutantTest1.test335");


    at.fhhagenberg.sqe.exercise13.RingBufferMutant var1 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var2 = var1.isEmpty();
    boolean var3 = var1.isEmpty();
    int var4 = var1.size();
    java.util.Iterator var5 = var1.iterator();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var7 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var7.enqueue((java.lang.Object)'#');
    int var10 = var7.size();
    var7.enqueue((java.lang.Object)true);
    java.util.Iterator var13 = var7.iterator();
    var1.enqueue((java.lang.Object)var13);
    int var15 = var1.size();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var17 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var18 = var17.isEmpty();
    boolean var19 = var17.isEmpty();
    java.util.Iterator var20 = var17.iterator();
    boolean var21 = var17.isEmpty();
    var17.enqueue((java.lang.Object)'#');
    boolean var24 = var17.isEmpty();
    int var25 = var17.size();
    java.util.Iterator var26 = var17.iterator();
    boolean var27 = var17.isEmpty();
    java.util.Iterator var28 = var17.iterator();
    var1.enqueue((java.lang.Object)var17);
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var31 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var31.enqueue((java.lang.Object)'#');
    java.util.Iterator var34 = var31.iterator();
    java.util.Iterator var35 = var31.iterator();
    java.util.Iterator var36 = var31.iterator();
    java.lang.Object var37 = var31.dequeue();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var39 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var40 = var39.isEmpty();
    boolean var41 = var39.isEmpty();
    java.util.Iterator var42 = var39.iterator();
    boolean var43 = var39.isEmpty();
    int var44 = var39.size();
    int var45 = var39.size();
    java.util.Iterator var46 = var39.iterator();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var48 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var48.enqueue((java.lang.Object)'#');
    java.util.Iterator var51 = var48.iterator();
    java.util.Iterator var52 = var48.iterator();
    var48.enqueue((java.lang.Object)false);
    java.lang.Object var55 = var48.dequeue();
    var39.enqueue((java.lang.Object)var48);
    java.util.Iterator var57 = var39.iterator();
    boolean var58 = var39.isEmpty();
    var31.enqueue((java.lang.Object)var39);
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var61 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var61.enqueue((java.lang.Object)'#');
    var61.enqueue((java.lang.Object)' ');
    int var66 = var61.size();
    int var67 = var61.size();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var69 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var70 = var69.isEmpty();
    boolean var71 = var69.isEmpty();
    java.util.Iterator var72 = var69.iterator();
    boolean var73 = var69.isEmpty();
    var69.enqueue((java.lang.Object)'#');
    boolean var76 = var69.isEmpty();
    var61.enqueue((java.lang.Object)var76);
    var39.enqueue((java.lang.Object)var61);
    int var79 = var39.size();
    var1.enqueue((java.lang.Object)var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var37 + "' != '" + '#'+ "'", var37.equals('#'));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var55 + "' != '" + '#'+ "'", var55.equals('#'));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var76 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var79 == 2);

  }

  public void test336() throws Throwable {

    if (debug) System.out.printf("%nRingBufferMutantTest1.test336");


    at.fhhagenberg.sqe.exercise13.RingBufferMutant var1 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(2);
    java.util.Iterator var2 = var1.iterator();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var4 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var4.enqueue((java.lang.Object)'#');
    java.util.Iterator var7 = var4.iterator();
    java.util.Iterator var8 = var4.iterator();
    var4.enqueue((java.lang.Object)false);
    int var11 = var4.size();
    boolean var12 = var4.isEmpty();
    boolean var13 = var4.isEmpty();
    var1.enqueue((java.lang.Object)var4);
    java.util.Iterator var15 = var4.iterator();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var17 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var18 = var17.isEmpty();
    boolean var19 = var17.isEmpty();
    java.util.Iterator var20 = var17.iterator();
    boolean var21 = var17.isEmpty();
    int var22 = var17.size();
    int var23 = var17.size();
    java.util.Iterator var24 = var17.iterator();
    int var25 = var17.size();
    java.util.Iterator var26 = var17.iterator();
    var4.enqueue((java.lang.Object)var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);

  }

  public void test337() throws Throwable {

    if (debug) System.out.printf("%nRingBufferMutantTest1.test337");


    at.fhhagenberg.sqe.exercise13.RingBufferMutant var1 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var2 = var1.isEmpty();
    boolean var3 = var1.isEmpty();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var5 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var5.enqueue((java.lang.Object)'#');
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var9 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var9.enqueue((java.lang.Object)'#');
    java.util.Iterator var12 = var9.iterator();
    java.util.Iterator var13 = var9.iterator();
    var9.enqueue((java.lang.Object)false);
    int var16 = var9.size();
    boolean var17 = var9.isEmpty();
    java.lang.Object var18 = var9.dequeue();
    java.util.Iterator var19 = var9.iterator();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var21 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var21.enqueue((java.lang.Object)'#');
    java.util.Iterator var24 = var21.iterator();
    java.util.Iterator var25 = var21.iterator();
    java.util.Iterator var26 = var21.iterator();
    var9.enqueue((java.lang.Object)var21);
    var5.enqueue((java.lang.Object)var21);
    java.lang.Object var29 = var5.dequeue();
    var1.enqueue(var29);
    boolean var31 = var1.isEmpty();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var18 + "' != '" + '#'+ "'", var18.equals('#'));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var29 + "' != '" + '#'+ "'", var29.equals('#'));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);

  }

  public void test338() throws Throwable {

    if (debug) System.out.printf("%nRingBufferMutantTest1.test338");


    at.fhhagenberg.sqe.exercise13.RingBufferMutant var1 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var2 = var1.isEmpty();
    boolean var3 = var1.isEmpty();
    boolean var4 = var1.isEmpty();
    int var5 = var1.size();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var7 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(1);
    var1.enqueue((java.lang.Object)var7);
    int var9 = var7.size();
    int var10 = var7.size();
    boolean var11 = var7.isEmpty();
    boolean var12 = var7.isEmpty();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);

  }

  public void test339() throws Throwable {

    if (debug) System.out.printf("%nRingBufferMutantTest1.test339");


    at.fhhagenberg.sqe.exercise13.RingBufferMutant var1 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var1.enqueue((java.lang.Object)1.0d);
    java.util.Iterator var4 = var1.iterator();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var6 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(1);
    boolean var7 = var6.isEmpty();
    boolean var8 = var6.isEmpty();
    java.util.Iterator var9 = var6.iterator();
    var1.enqueue((java.lang.Object)var6);
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var12 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var12.enqueue((java.lang.Object)'#');
    java.util.Iterator var15 = var12.iterator();
    java.util.Iterator var16 = var12.iterator();
    var12.enqueue((java.lang.Object)false);
    int var19 = var12.size();
    boolean var20 = var12.isEmpty();
    boolean var21 = var12.isEmpty();
    boolean var22 = var12.isEmpty();
    java.lang.Object var23 = var12.dequeue();
    java.util.Iterator var24 = var12.iterator();
    var1.enqueue((java.lang.Object)var12);
    int var26 = var1.size();
    java.util.Iterator var27 = var1.iterator();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var29 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var29.enqueue((java.lang.Object)'#');
    java.util.Iterator var32 = var29.iterator();
    java.util.Iterator var33 = var29.iterator();
    boolean var34 = var29.isEmpty();
    int var35 = var29.size();
    var29.enqueue((java.lang.Object)1.0d);
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var39 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var39.enqueue((java.lang.Object)'#');
    java.util.Iterator var42 = var39.iterator();
    java.util.Iterator var43 = var39.iterator();
    var39.enqueue((java.lang.Object)false);
    int var46 = var39.size();
    boolean var47 = var39.isEmpty();
    int var48 = var39.size();
    var29.enqueue((java.lang.Object)var48);
    var1.enqueue((java.lang.Object)var29);
    java.util.Iterator var51 = var29.iterator();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + '#'+ "'", var23.equals('#'));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);

  }

  public void test340() throws Throwable {

    if (debug) System.out.printf("%nRingBufferMutantTest1.test340");


    at.fhhagenberg.sqe.exercise13.RingBufferMutant var1 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var1.enqueue((java.lang.Object)'#');
    int var4 = var1.size();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var6 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var7 = var6.isEmpty();
    boolean var8 = var6.isEmpty();
    java.util.Iterator var9 = var6.iterator();
    boolean var10 = var6.isEmpty();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var12 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var12.enqueue((java.lang.Object)'#');
    java.util.Iterator var15 = var12.iterator();
    java.util.Iterator var16 = var12.iterator();
    var12.enqueue((java.lang.Object)false);
    int var19 = var12.size();
    var6.enqueue((java.lang.Object)var12);
    var1.enqueue((java.lang.Object)var12);
    java.util.Iterator var22 = var12.iterator();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var24 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var25 = var24.isEmpty();
    boolean var26 = var24.isEmpty();
    java.util.Iterator var27 = var24.iterator();
    boolean var28 = var24.isEmpty();
    var24.enqueue((java.lang.Object)'#');
    boolean var31 = var24.isEmpty();
    int var32 = var24.size();
    java.util.Iterator var33 = var24.iterator();
    boolean var34 = var24.isEmpty();
    var12.enqueue((java.lang.Object)var34);
    boolean var36 = var12.isEmpty();
    int var37 = var12.size();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var39 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(2);
    var12.enqueue((java.lang.Object)2);
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var42 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var42.enqueue((java.lang.Object)'#');
    var42.enqueue((java.lang.Object)' ');
    int var47 = var42.size();
    int var48 = var42.size();
    int var49 = var42.size();
    int var50 = var42.size();
    boolean var51 = var42.isEmpty();
    var12.enqueue((java.lang.Object)var51);
    int var53 = var12.size();
    java.lang.Object var54 = var12.dequeue();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var54 + "' != '" + '#'+ "'", var54.equals('#'));

  }

  public void test341() throws Throwable {

    if (debug) System.out.printf("%nRingBufferMutantTest1.test341");


    at.fhhagenberg.sqe.exercise13.RingBufferMutant var1 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var2 = var1.isEmpty();
    boolean var3 = var1.isEmpty();
    java.util.Iterator var4 = var1.iterator();
    boolean var5 = var1.isEmpty();
    int var6 = var1.size();
    int var7 = var1.size();
    java.util.Iterator var8 = var1.iterator();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var10 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var10.enqueue((java.lang.Object)'#');
    java.util.Iterator var13 = var10.iterator();
    java.util.Iterator var14 = var10.iterator();
    var10.enqueue((java.lang.Object)false);
    java.lang.Object var17 = var10.dequeue();
    var1.enqueue((java.lang.Object)var10);
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var20 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var20.enqueue((java.lang.Object)'#');
    java.util.Iterator var23 = var20.iterator();
    java.util.Iterator var24 = var20.iterator();
    var20.enqueue((java.lang.Object)false);
    java.lang.Object var27 = var20.dequeue();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var29 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var30 = var29.isEmpty();
    boolean var31 = var29.isEmpty();
    java.util.Iterator var32 = var29.iterator();
    boolean var33 = var29.isEmpty();
    var29.enqueue((java.lang.Object)'#');
    boolean var36 = var29.isEmpty();
    int var37 = var29.size();
    java.util.Iterator var38 = var29.iterator();
    var20.enqueue((java.lang.Object)var29);
    var29.enqueue((java.lang.Object)100);
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var43 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var43.enqueue((java.lang.Object)'#');
    java.util.Iterator var46 = var43.iterator();
    var43.enqueue((java.lang.Object)100.0d);
    java.util.Iterator var49 = var43.iterator();
    var29.enqueue((java.lang.Object)var43);
    java.lang.Object var51 = var29.dequeue();
    var1.enqueue((java.lang.Object)var29);
    java.util.Iterator var53 = var29.iterator();
    java.util.Iterator var54 = var29.iterator();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + '#'+ "'", var17.equals('#'));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var27 + "' != '" + '#'+ "'", var27.equals('#'));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var51 + "' != '" + '#'+ "'", var51.equals('#'));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);

  }

  public void test342() throws Throwable {

    if (debug) System.out.printf("%nRingBufferMutantTest1.test342");


    at.fhhagenberg.sqe.exercise13.RingBufferMutant var1 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var1.enqueue((java.lang.Object)'#');
    var1.enqueue((java.lang.Object)' ');
    int var6 = var1.size();
    java.util.Iterator var7 = var1.iterator();
    boolean var8 = var1.isEmpty();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var10 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var11 = var10.isEmpty();
    boolean var12 = var10.isEmpty();
    java.util.Iterator var13 = var10.iterator();
    boolean var14 = var10.isEmpty();
    java.util.Iterator var15 = var10.iterator();
    int var16 = var10.size();
    var1.enqueue((java.lang.Object)var16);
    java.util.Iterator var18 = var1.iterator();
    java.util.Iterator var19 = var1.iterator();
    java.util.Iterator var20 = var1.iterator();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);

  }

  public void test343() throws Throwable {

    if (debug) System.out.printf("%nRingBufferMutantTest1.test343");


    at.fhhagenberg.sqe.exercise13.RingBufferMutant var1 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var1.enqueue((java.lang.Object)1.0d);
    int var4 = var1.size();
    boolean var5 = var1.isEmpty();
    java.util.Iterator var6 = var1.iterator();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);

  }

  public void test344() throws Throwable {

    if (debug) System.out.printf("%nRingBufferMutantTest1.test344");


    at.fhhagenberg.sqe.exercise13.RingBufferMutant var1 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var1.enqueue((java.lang.Object)'#');
    var1.enqueue((java.lang.Object)' ');
    int var6 = var1.size();
    var1.enqueue((java.lang.Object)1);
    boolean var9 = var1.isEmpty();
    boolean var10 = var1.isEmpty();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var12 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var13 = var12.isEmpty();
    boolean var14 = var12.isEmpty();
    java.util.Iterator var15 = var12.iterator();
    boolean var16 = var12.isEmpty();
    java.util.Iterator var17 = var12.iterator();
    java.util.Iterator var18 = var12.iterator();
    java.util.Iterator var19 = var12.iterator();
    var1.enqueue((java.lang.Object)var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);

  }

  public void test345() throws Throwable {

    if (debug) System.out.printf("%nRingBufferMutantTest1.test345");


    at.fhhagenberg.sqe.exercise13.RingBufferMutant var1 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var1.enqueue((java.lang.Object)'#');
    java.util.Iterator var4 = var1.iterator();
    java.util.Iterator var5 = var1.iterator();
    boolean var6 = var1.isEmpty();
    int var7 = var1.size();
    var1.enqueue((java.lang.Object)1.0d);
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var11 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var11.enqueue((java.lang.Object)'#');
    java.util.Iterator var14 = var11.iterator();
    java.util.Iterator var15 = var11.iterator();
    var11.enqueue((java.lang.Object)false);
    int var18 = var11.size();
    boolean var19 = var11.isEmpty();
    int var20 = var11.size();
    var1.enqueue((java.lang.Object)var20);
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var23 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var24 = var23.isEmpty();
    boolean var25 = var23.isEmpty();
    boolean var26 = var23.isEmpty();
    int var27 = var23.size();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var29 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(1);
    var23.enqueue((java.lang.Object)var29);
    java.lang.Object var31 = var23.dequeue();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var33 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var34 = var33.isEmpty();
    boolean var35 = var33.isEmpty();
    boolean var36 = var33.isEmpty();
    int var37 = var33.size();
    java.util.Iterator var38 = var33.iterator();
    var23.enqueue((java.lang.Object)var38);
    var1.enqueue((java.lang.Object)var38);
    java.util.Iterator var41 = var1.iterator();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var43 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var43.enqueue((java.lang.Object)'#');
    java.util.Iterator var46 = var43.iterator();
    java.util.Iterator var47 = var43.iterator();
    java.util.Iterator var48 = var43.iterator();
    java.lang.Object var49 = var43.dequeue();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var51 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var52 = var51.isEmpty();
    boolean var53 = var51.isEmpty();
    java.util.Iterator var54 = var51.iterator();
    boolean var55 = var51.isEmpty();
    int var56 = var51.size();
    int var57 = var51.size();
    java.util.Iterator var58 = var51.iterator();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var60 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var60.enqueue((java.lang.Object)'#');
    java.util.Iterator var63 = var60.iterator();
    java.util.Iterator var64 = var60.iterator();
    var60.enqueue((java.lang.Object)false);
    java.lang.Object var67 = var60.dequeue();
    var51.enqueue((java.lang.Object)var60);
    java.util.Iterator var69 = var51.iterator();
    boolean var70 = var51.isEmpty();
    var43.enqueue((java.lang.Object)var51);
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var73 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var73.enqueue((java.lang.Object)'#');
    var73.enqueue((java.lang.Object)' ');
    int var78 = var73.size();
    int var79 = var73.size();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var81 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var82 = var81.isEmpty();
    boolean var83 = var81.isEmpty();
    java.util.Iterator var84 = var81.iterator();
    boolean var85 = var81.isEmpty();
    var81.enqueue((java.lang.Object)'#');
    boolean var88 = var81.isEmpty();
    var73.enqueue((java.lang.Object)var88);
    var51.enqueue((java.lang.Object)var73);
    var1.enqueue((java.lang.Object)var51);
    java.util.Iterator var92 = var1.iterator();
    boolean var93 = var1.isEmpty();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var49 + "' != '" + '#'+ "'", var49.equals('#'));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var67 + "' != '" + '#'+ "'", var67.equals('#'));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var78 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var79 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var82 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var83 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var85 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var88 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var92);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var93 == false);

  }

  public void test346() throws Throwable {

    if (debug) System.out.printf("%nRingBufferMutantTest1.test346");


    at.fhhagenberg.sqe.exercise13.RingBufferMutant var1 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(100);
    int var2 = var1.size();
    int var3 = var1.size();
    boolean var4 = var1.isEmpty();
    boolean var5 = var1.isEmpty();
    int var6 = var1.size();
    boolean var7 = var1.isEmpty();
    java.util.Iterator var8 = var1.iterator();
    boolean var9 = var1.isEmpty();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.Object var10 = var1.dequeue();
      fail("Expected exception of type java.lang.RuntimeException");
    } catch (java.lang.RuntimeException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == true);

  }

  public void test347() throws Throwable {

    if (debug) System.out.printf("%nRingBufferMutantTest1.test347");


    at.fhhagenberg.sqe.exercise13.RingBufferMutant var1 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var2 = var1.isEmpty();
    boolean var3 = var1.isEmpty();
    java.util.Iterator var4 = var1.iterator();
    boolean var5 = var1.isEmpty();
    var1.enqueue((java.lang.Object)'#');
    boolean var8 = var1.isEmpty();
    int var9 = var1.size();
    java.util.Iterator var10 = var1.iterator();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var12 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var12.enqueue((java.lang.Object)'#');
    java.util.Iterator var15 = var12.iterator();
    var12.enqueue((java.lang.Object)100.0d);
    boolean var18 = var12.isEmpty();
    java.lang.Object var19 = var12.dequeue();
    var1.enqueue(var19);
    var1.enqueue((java.lang.Object)'4');
    boolean var23 = var1.isEmpty();
    java.util.Iterator var24 = var1.iterator();
    int var25 = var1.size();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + '#'+ "'", var19.equals('#'));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 3);

  }

  public void test348() throws Throwable {

    if (debug) System.out.printf("%nRingBufferMutantTest1.test348");


    at.fhhagenberg.sqe.exercise13.RingBufferMutant var1 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var1.enqueue((java.lang.Object)'#');
    java.util.Iterator var4 = var1.iterator();
    java.util.Iterator var5 = var1.iterator();
    boolean var6 = var1.isEmpty();
    int var7 = var1.size();
    var1.enqueue((java.lang.Object)1.0d);
    boolean var10 = var1.isEmpty();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var12 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var12.enqueue((java.lang.Object)'#');
    java.util.Iterator var15 = var12.iterator();
    java.util.Iterator var16 = var12.iterator();
    var12.enqueue((java.lang.Object)false);
    java.lang.Object var19 = var12.dequeue();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var21 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var22 = var21.isEmpty();
    boolean var23 = var21.isEmpty();
    java.util.Iterator var24 = var21.iterator();
    boolean var25 = var21.isEmpty();
    var21.enqueue((java.lang.Object)'#');
    boolean var28 = var21.isEmpty();
    int var29 = var21.size();
    java.util.Iterator var30 = var21.iterator();
    var12.enqueue((java.lang.Object)var21);
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var33 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var33.enqueue((java.lang.Object)'#');
    java.util.Iterator var36 = var33.iterator();
    java.util.Iterator var37 = var33.iterator();
    java.util.Iterator var38 = var33.iterator();
    boolean var39 = var33.isEmpty();
    int var40 = var33.size();
    var12.enqueue((java.lang.Object)var40);
    java.util.Iterator var42 = var12.iterator();
    var1.enqueue((java.lang.Object)var12);
    boolean var44 = var1.isEmpty();
    int var45 = var1.size();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var47 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var47.enqueue((java.lang.Object)'#');
    int var50 = var47.size();
    int var51 = var47.size();
    java.util.Iterator var52 = var47.iterator();
    java.util.Iterator var53 = var47.iterator();
    java.lang.Object var54 = var47.dequeue();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var56 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var57 = var56.isEmpty();
    boolean var58 = var56.isEmpty();
    java.util.Iterator var59 = var56.iterator();
    boolean var60 = var56.isEmpty();
    var56.enqueue((java.lang.Object)'#');
    boolean var63 = var56.isEmpty();
    int var64 = var56.size();
    java.util.Iterator var65 = var56.iterator();
    boolean var66 = var56.isEmpty();
    java.util.Iterator var67 = var56.iterator();
    boolean var68 = var56.isEmpty();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var70 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var70.enqueue((java.lang.Object)'#');
    java.util.Iterator var73 = var70.iterator();
    java.util.Iterator var74 = var70.iterator();
    var70.enqueue((java.lang.Object)false);
    java.lang.Object var77 = var70.dequeue();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var79 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var80 = var79.isEmpty();
    boolean var81 = var79.isEmpty();
    java.util.Iterator var82 = var79.iterator();
    boolean var83 = var79.isEmpty();
    var79.enqueue((java.lang.Object)'#');
    boolean var86 = var79.isEmpty();
    int var87 = var79.size();
    java.util.Iterator var88 = var79.iterator();
    var70.enqueue((java.lang.Object)var79);
    java.util.Iterator var90 = var70.iterator();
    var56.enqueue((java.lang.Object)var70);
    var47.enqueue((java.lang.Object)var56);
    boolean var93 = var56.isEmpty();
    java.lang.Object var94 = var56.dequeue();
    var1.enqueue((java.lang.Object)var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + '#'+ "'", var19.equals('#'));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var54 + "' != '" + '#'+ "'", var54.equals('#'));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var77 + "' != '" + '#'+ "'", var77.equals('#'));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var80 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var81 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var83 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var86 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var87 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var88);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var90);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var93 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var94 + "' != '" + '#'+ "'", var94.equals('#'));

  }

  public void test349() throws Throwable {

    if (debug) System.out.printf("%nRingBufferMutantTest1.test349");


    at.fhhagenberg.sqe.exercise13.RingBufferMutant var1 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(1);
    boolean var2 = var1.isEmpty();
    boolean var3 = var1.isEmpty();
    boolean var4 = var1.isEmpty();
    java.util.Iterator var5 = var1.iterator();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var7 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(1);
    java.util.Iterator var8 = var7.iterator();
    java.util.Iterator var9 = var7.iterator();
    java.util.Iterator var10 = var7.iterator();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var12 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var13 = var12.isEmpty();
    boolean var14 = var12.isEmpty();
    java.util.Iterator var15 = var12.iterator();
    boolean var16 = var12.isEmpty();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var18 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var18.enqueue((java.lang.Object)'#');
    java.util.Iterator var21 = var18.iterator();
    java.util.Iterator var22 = var18.iterator();
    var18.enqueue((java.lang.Object)false);
    int var25 = var18.size();
    var12.enqueue((java.lang.Object)var18);
    boolean var27 = var18.isEmpty();
    var7.enqueue((java.lang.Object)var18);
    var1.enqueue((java.lang.Object)var7);
    java.util.Iterator var30 = var1.iterator();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);

  }

  public void test350() throws Throwable {

    if (debug) System.out.printf("%nRingBufferMutantTest1.test350");


    at.fhhagenberg.sqe.exercise13.RingBufferMutant var1 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var1.enqueue((java.lang.Object)1.0d);
    java.util.Iterator var4 = var1.iterator();
    boolean var5 = var1.isEmpty();
    int var6 = var1.size();
    int var7 = var1.size();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var9 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var10 = var9.isEmpty();
    boolean var11 = var9.isEmpty();
    java.util.Iterator var12 = var9.iterator();
    boolean var13 = var9.isEmpty();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var15 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var15.enqueue((java.lang.Object)'#');
    java.util.Iterator var18 = var15.iterator();
    java.util.Iterator var19 = var15.iterator();
    var15.enqueue((java.lang.Object)false);
    int var22 = var15.size();
    var9.enqueue((java.lang.Object)var15);
    int var24 = var9.size();
    java.lang.Object var25 = var9.dequeue();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var27 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var27.enqueue((java.lang.Object)'#');
    java.util.Iterator var30 = var27.iterator();
    java.util.Iterator var31 = var27.iterator();
    java.util.Iterator var32 = var27.iterator();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var34 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var34.enqueue((java.lang.Object)'#');
    java.util.Iterator var37 = var34.iterator();
    java.util.Iterator var38 = var34.iterator();
    java.util.Iterator var39 = var34.iterator();
    boolean var40 = var34.isEmpty();
    int var41 = var34.size();
    var27.enqueue((java.lang.Object)var41);
    boolean var43 = var27.isEmpty();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var45 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var45.enqueue((java.lang.Object)1.0d);
    int var48 = var45.size();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var50 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var51 = var50.isEmpty();
    boolean var52 = var50.isEmpty();
    java.util.Iterator var53 = var50.iterator();
    boolean var54 = var50.isEmpty();
    java.util.Iterator var55 = var50.iterator();
    int var56 = var50.size();
    var45.enqueue((java.lang.Object)var50);
    var27.enqueue((java.lang.Object)var45);
    var9.enqueue((java.lang.Object)var45);
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var61 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(0);
    int var62 = var61.size();
    boolean var63 = var61.isEmpty();
    boolean var64 = var61.isEmpty();
    var45.enqueue((java.lang.Object)var61);
    var1.enqueue((java.lang.Object)var45);
    int var67 = var45.size();
    int var68 = var45.size();
    boolean var69 = var45.isEmpty();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == false);

  }

  public void test351() throws Throwable {

    if (debug) System.out.printf("%nRingBufferMutantTest1.test351");


    at.fhhagenberg.sqe.exercise13.RingBufferMutant var1 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var1.enqueue((java.lang.Object)1.0d);
    java.util.Iterator var4 = var1.iterator();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var6 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(1);
    boolean var7 = var6.isEmpty();
    boolean var8 = var6.isEmpty();
    java.util.Iterator var9 = var6.iterator();
    var1.enqueue((java.lang.Object)var6);
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var12 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var12.enqueue((java.lang.Object)'#');
    java.util.Iterator var15 = var12.iterator();
    java.util.Iterator var16 = var12.iterator();
    var12.enqueue((java.lang.Object)false);
    int var19 = var12.size();
    boolean var20 = var12.isEmpty();
    boolean var21 = var12.isEmpty();
    boolean var22 = var12.isEmpty();
    java.lang.Object var23 = var12.dequeue();
    java.util.Iterator var24 = var12.iterator();
    var1.enqueue((java.lang.Object)var12);
    java.lang.Object var26 = var1.dequeue();
    java.util.Iterator var27 = var1.iterator();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + '#'+ "'", var23.equals('#'));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var26 + "' != '" + 1.0d+ "'", var26.equals(1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);

  }

  public void test352() throws Throwable {

    if (debug) System.out.printf("%nRingBufferMutantTest1.test352");


    at.fhhagenberg.sqe.exercise13.RingBufferMutant var1 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var1.enqueue((java.lang.Object)'#');
    int var4 = var1.size();
    java.lang.Object var5 = var1.dequeue();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var7 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var7.enqueue((java.lang.Object)'#');
    java.util.Iterator var10 = var7.iterator();
    java.util.Iterator var11 = var7.iterator();
    var7.enqueue((java.lang.Object)false);
    int var14 = var7.size();
    boolean var15 = var7.isEmpty();
    boolean var16 = var7.isEmpty();
    boolean var17 = var7.isEmpty();
    int var18 = var7.size();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var20 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(100);
    int var21 = var20.size();
    java.util.Iterator var22 = var20.iterator();
    var7.enqueue((java.lang.Object)var20);
    var1.enqueue((java.lang.Object)var7);
    boolean var25 = var7.isEmpty();
    java.util.Iterator var26 = var7.iterator();
    int var27 = var7.size();
    int var28 = var7.size();
    java.lang.Object var29 = var7.dequeue();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + '#'+ "'", var5.equals('#'));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var29 + "' != '" + '#'+ "'", var29.equals('#'));

  }

  public void test353() throws Throwable {

    if (debug) System.out.printf("%nRingBufferMutantTest1.test353");


    at.fhhagenberg.sqe.exercise13.RingBufferMutant var1 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(100);
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var3 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var3.enqueue((java.lang.Object)'#');
    java.util.Iterator var6 = var3.iterator();
    java.util.Iterator var7 = var3.iterator();
    var3.enqueue((java.lang.Object)false);
    int var10 = var3.size();
    boolean var11 = var3.isEmpty();
    int var12 = var3.size();
    java.lang.Object var13 = new java.lang.Object();
    var3.enqueue(var13);
    var1.enqueue((java.lang.Object)var3);
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var17 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var17.enqueue((java.lang.Object)'#');
    java.util.Iterator var20 = var17.iterator();
    java.util.Iterator var21 = var17.iterator();
    var17.enqueue((java.lang.Object)false);
    int var24 = var17.size();
    boolean var25 = var17.isEmpty();
    boolean var26 = var17.isEmpty();
    boolean var27 = var17.isEmpty();
    int var28 = var17.size();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var30 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(100);
    int var31 = var30.size();
    java.util.Iterator var32 = var30.iterator();
    var17.enqueue((java.lang.Object)var30);
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var35 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var36 = var35.isEmpty();
    boolean var37 = var35.isEmpty();
    boolean var38 = var35.isEmpty();
    int var39 = var35.size();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var41 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(1);
    var35.enqueue((java.lang.Object)var41);
    java.lang.Object var43 = var35.dequeue();
    var17.enqueue(var43);
    int var45 = var17.size();
    boolean var46 = var17.isEmpty();
    var3.enqueue((java.lang.Object)var17);
    boolean var48 = var3.isEmpty();
    java.util.Iterator var49 = var3.iterator();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);

  }

  public void test354() throws Throwable {

    if (debug) System.out.printf("%nRingBufferMutantTest1.test354");


    at.fhhagenberg.sqe.exercise13.RingBufferMutant var1 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(100);
    int var2 = var1.size();
    int var3 = var1.size();
    boolean var4 = var1.isEmpty();
    boolean var5 = var1.isEmpty();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var7 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var7.enqueue((java.lang.Object)'#');
    int var10 = var7.size();
    java.lang.Object var11 = var7.dequeue();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var13 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(0);
    int var14 = var13.size();
    var7.enqueue((java.lang.Object)var14);
    var1.enqueue((java.lang.Object)var14);
    boolean var17 = var1.isEmpty();
    int var18 = var1.size();
    boolean var19 = var1.isEmpty();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + '#'+ "'", var11.equals('#'));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);

  }

  public void test355() throws Throwable {

    if (debug) System.out.printf("%nRingBufferMutantTest1.test355");


    at.fhhagenberg.sqe.exercise13.RingBufferMutant var1 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var1.enqueue((java.lang.Object)'#');
    int var4 = var1.size();
    java.lang.Object var5 = var1.dequeue();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var7 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var7.enqueue((java.lang.Object)'#');
    var7.enqueue((java.lang.Object)' ');
    int var12 = var7.size();
    int var13 = var7.size();
    java.util.Iterator var14 = var7.iterator();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var16 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(0);
    java.util.Iterator var17 = var16.iterator();
    var7.enqueue((java.lang.Object)var17);
    var1.enqueue((java.lang.Object)var7);
    boolean var20 = var7.isEmpty();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var22 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var23 = var22.isEmpty();
    boolean var24 = var22.isEmpty();
    java.util.Iterator var25 = var22.iterator();
    boolean var26 = var22.isEmpty();
    var22.enqueue((java.lang.Object)'#');
    boolean var29 = var22.isEmpty();
    int var30 = var22.size();
    java.util.Iterator var31 = var22.iterator();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var33 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var33.enqueue((java.lang.Object)'#');
    java.util.Iterator var36 = var33.iterator();
    var33.enqueue((java.lang.Object)100.0d);
    boolean var39 = var33.isEmpty();
    java.lang.Object var40 = var33.dequeue();
    var22.enqueue(var40);
    var22.enqueue((java.lang.Object)'4');
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var45 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var46 = var45.isEmpty();
    boolean var47 = var45.isEmpty();
    int var48 = var45.size();
    java.util.Iterator var49 = var45.iterator();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var51 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var51.enqueue((java.lang.Object)'#');
    int var54 = var51.size();
    var51.enqueue((java.lang.Object)true);
    java.util.Iterator var57 = var51.iterator();
    var45.enqueue((java.lang.Object)var57);
    java.util.Iterator var59 = var45.iterator();
    boolean var60 = var45.isEmpty();
    var22.enqueue((java.lang.Object)var60);
    int var62 = var22.size();
    var7.enqueue((java.lang.Object)var62);
    java.lang.Object var64 = var7.dequeue();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + '#'+ "'", var5.equals('#'));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var40 + "' != '" + '#'+ "'", var40.equals('#'));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var64 + "' != '" + '#'+ "'", var64.equals('#'));

  }

  public void test356() throws Throwable {

    if (debug) System.out.printf("%nRingBufferMutantTest1.test356");


    at.fhhagenberg.sqe.exercise13.RingBufferMutant var1 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var2 = var1.isEmpty();
    boolean var3 = var1.isEmpty();
    int var4 = var1.size();
    java.util.Iterator var5 = var1.iterator();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var7 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var7.enqueue((java.lang.Object)'#');
    int var10 = var7.size();
    var7.enqueue((java.lang.Object)true);
    java.util.Iterator var13 = var7.iterator();
    var1.enqueue((java.lang.Object)var13);
    java.util.Iterator var15 = var1.iterator();
    boolean var16 = var1.isEmpty();
    int var17 = var1.size();
    int var18 = var1.size();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 1);

  }

  public void test357() throws Throwable {

    if (debug) System.out.printf("%nRingBufferMutantTest1.test357");


    at.fhhagenberg.sqe.exercise13.RingBufferMutant var1 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(4);
    int var2 = var1.size();
    int var3 = var1.size();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0);

  }

  public void test358() throws Throwable {

    if (debug) System.out.printf("%nRingBufferMutantTest1.test358");


    at.fhhagenberg.sqe.exercise13.RingBufferMutant var1 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var2 = var1.isEmpty();
    boolean var3 = var1.isEmpty();
    java.util.Iterator var4 = var1.iterator();
    boolean var5 = var1.isEmpty();
    int var6 = var1.size();
    int var7 = var1.size();
    java.util.Iterator var8 = var1.iterator();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var10 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var10.enqueue((java.lang.Object)'#');
    java.util.Iterator var13 = var10.iterator();
    java.util.Iterator var14 = var10.iterator();
    java.util.Iterator var15 = var10.iterator();
    var1.enqueue((java.lang.Object)var10);
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var18 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(100);
    int var19 = var18.size();
    int var20 = var18.size();
    boolean var21 = var18.isEmpty();
    boolean var22 = var18.isEmpty();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var24 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var24.enqueue((java.lang.Object)'#');
    int var27 = var24.size();
    java.lang.Object var28 = var24.dequeue();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var30 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(0);
    int var31 = var30.size();
    var24.enqueue((java.lang.Object)var31);
    var18.enqueue((java.lang.Object)var31);
    boolean var34 = var18.isEmpty();
    boolean var35 = var18.isEmpty();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var37 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var37.enqueue((java.lang.Object)'#');
    int var40 = var37.size();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var42 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var43 = var42.isEmpty();
    boolean var44 = var42.isEmpty();
    java.util.Iterator var45 = var42.iterator();
    boolean var46 = var42.isEmpty();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var48 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var48.enqueue((java.lang.Object)'#');
    java.util.Iterator var51 = var48.iterator();
    java.util.Iterator var52 = var48.iterator();
    var48.enqueue((java.lang.Object)false);
    int var55 = var48.size();
    var42.enqueue((java.lang.Object)var48);
    var37.enqueue((java.lang.Object)var48);
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var59 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var59.enqueue((java.lang.Object)1.0d);
    java.util.Iterator var62 = var59.iterator();
    boolean var63 = var59.isEmpty();
    boolean var64 = var59.isEmpty();
    boolean var65 = var59.isEmpty();
    var37.enqueue((java.lang.Object)var59);
    int var67 = var37.size();
    var18.enqueue((java.lang.Object)var67);
    java.util.Iterator var69 = var18.iterator();
    var10.enqueue((java.lang.Object)var18);
    java.lang.Object var71 = var18.dequeue();
    java.util.Iterator var72 = var18.iterator();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var28 + "' != '" + '#'+ "'", var28.equals('#'));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var71 + "' != '" + 0+ "'", var71.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);

  }

  public void test359() throws Throwable {

    if (debug) System.out.printf("%nRingBufferMutantTest1.test359");


    at.fhhagenberg.sqe.exercise13.RingBufferMutant var1 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var1.enqueue((java.lang.Object)1.0d);
    java.util.Iterator var4 = var1.iterator();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var6 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(1);
    boolean var7 = var6.isEmpty();
    boolean var8 = var6.isEmpty();
    java.util.Iterator var9 = var6.iterator();
    var1.enqueue((java.lang.Object)var6);
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var12 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var12.enqueue((java.lang.Object)'#');
    java.util.Iterator var15 = var12.iterator();
    java.util.Iterator var16 = var12.iterator();
    var12.enqueue((java.lang.Object)false);
    int var19 = var12.size();
    boolean var20 = var12.isEmpty();
    boolean var21 = var12.isEmpty();
    boolean var22 = var12.isEmpty();
    java.lang.Object var23 = var12.dequeue();
    java.util.Iterator var24 = var12.iterator();
    var1.enqueue((java.lang.Object)var12);
    boolean var26 = var1.isEmpty();
    boolean var27 = var1.isEmpty();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var29 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var30 = var29.isEmpty();
    boolean var31 = var29.isEmpty();
    java.util.Iterator var32 = var29.iterator();
    boolean var33 = var29.isEmpty();
    var29.enqueue((java.lang.Object)'#');
    boolean var36 = var29.isEmpty();
    int var37 = var29.size();
    java.util.Iterator var38 = var29.iterator();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var40 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var40.enqueue((java.lang.Object)'#');
    java.util.Iterator var43 = var40.iterator();
    var40.enqueue((java.lang.Object)100.0d);
    boolean var46 = var40.isEmpty();
    java.lang.Object var47 = var40.dequeue();
    var29.enqueue(var47);
    var29.enqueue((java.lang.Object)'4');
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var52 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var52.enqueue((java.lang.Object)'#');
    int var55 = var52.size();
    var52.enqueue((java.lang.Object)true);
    java.util.Iterator var58 = var52.iterator();
    var29.enqueue((java.lang.Object)var52);
    java.lang.Object var60 = var29.dequeue();
    var1.enqueue((java.lang.Object)var29);
    java.util.Iterator var62 = var1.iterator();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + '#'+ "'", var23.equals('#'));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var47 + "' != '" + '#'+ "'", var47.equals('#'));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var60 + "' != '" + '#'+ "'", var60.equals('#'));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);

  }

  public void test360() throws Throwable {

    if (debug) System.out.printf("%nRingBufferMutantTest1.test360");


    at.fhhagenberg.sqe.exercise13.RingBufferMutant var1 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(1);
    boolean var2 = var1.isEmpty();
    boolean var3 = var1.isEmpty();
    boolean var4 = var1.isEmpty();
    java.util.Iterator var5 = var1.iterator();
    java.util.Iterator var6 = var1.iterator();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);

  }

  public void test361() throws Throwable {

    if (debug) System.out.printf("%nRingBufferMutantTest1.test361");


    at.fhhagenberg.sqe.exercise13.RingBufferMutant var1 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var2 = var1.isEmpty();
    boolean var3 = var1.isEmpty();
    java.util.Iterator var4 = var1.iterator();
    boolean var5 = var1.isEmpty();
    var1.enqueue((java.lang.Object)'#');
    boolean var8 = var1.isEmpty();
    int var9 = var1.size();
    java.util.Iterator var10 = var1.iterator();
    boolean var11 = var1.isEmpty();
    java.util.Iterator var12 = var1.iterator();
    boolean var13 = var1.isEmpty();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var15 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var15.enqueue((java.lang.Object)'#');
    java.util.Iterator var18 = var15.iterator();
    java.util.Iterator var19 = var15.iterator();
    var15.enqueue((java.lang.Object)false);
    java.lang.Object var22 = var15.dequeue();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var24 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var25 = var24.isEmpty();
    boolean var26 = var24.isEmpty();
    java.util.Iterator var27 = var24.iterator();
    boolean var28 = var24.isEmpty();
    var24.enqueue((java.lang.Object)'#');
    boolean var31 = var24.isEmpty();
    int var32 = var24.size();
    java.util.Iterator var33 = var24.iterator();
    var15.enqueue((java.lang.Object)var24);
    java.util.Iterator var35 = var15.iterator();
    var1.enqueue((java.lang.Object)var15);
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var38 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var38.enqueue((java.lang.Object)'#');
    java.util.Iterator var41 = var38.iterator();
    java.util.Iterator var42 = var38.iterator();
    var1.enqueue((java.lang.Object)var38);
    java.lang.Object var44 = var38.dequeue();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var22 + "' != '" + '#'+ "'", var22.equals('#'));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var44 + "' != '" + '#'+ "'", var44.equals('#'));

  }

  public void test362() throws Throwable {

    if (debug) System.out.printf("%nRingBufferMutantTest1.test362");


    at.fhhagenberg.sqe.exercise13.RingBufferMutant var1 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var2 = var1.isEmpty();
    boolean var3 = var1.isEmpty();
    boolean var4 = var1.isEmpty();
    int var5 = var1.size();
    java.util.Iterator var6 = var1.iterator();
    java.util.Iterator var7 = var1.iterator();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.Object var8 = var1.dequeue();
      fail("Expected exception of type java.lang.RuntimeException");
    } catch (java.lang.RuntimeException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);

  }

  public void test363() throws Throwable {

    if (debug) System.out.printf("%nRingBufferMutantTest1.test363");


    at.fhhagenberg.sqe.exercise13.RingBufferMutant var1 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(0);
    int var2 = var1.size();
    boolean var3 = var1.isEmpty();
    boolean var4 = var1.isEmpty();
    boolean var5 = var1.isEmpty();
    java.util.Iterator var6 = var1.iterator();
    int var7 = var1.size();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.Object var8 = var1.dequeue();
      fail("Expected exception of type java.lang.RuntimeException");
    } catch (java.lang.RuntimeException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0);

  }

  public void test364() throws Throwable {

    if (debug) System.out.printf("%nRingBufferMutantTest1.test364");


    at.fhhagenberg.sqe.exercise13.RingBufferMutant var1 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var1.enqueue((java.lang.Object)'#');
    java.util.Iterator var4 = var1.iterator();
    java.util.Iterator var5 = var1.iterator();
    var1.enqueue((java.lang.Object)false);
    int var8 = var1.size();
    boolean var9 = var1.isEmpty();
    int var10 = var1.size();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var12 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var12.enqueue((java.lang.Object)'#');
    java.util.Iterator var15 = var12.iterator();
    java.util.Iterator var16 = var12.iterator();
    var12.enqueue((java.lang.Object)false);
    java.lang.Object var19 = var12.dequeue();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var21 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var22 = var21.isEmpty();
    boolean var23 = var21.isEmpty();
    java.util.Iterator var24 = var21.iterator();
    boolean var25 = var21.isEmpty();
    var21.enqueue((java.lang.Object)'#');
    boolean var28 = var21.isEmpty();
    int var29 = var21.size();
    java.util.Iterator var30 = var21.iterator();
    var12.enqueue((java.lang.Object)var21);
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var33 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var33.enqueue((java.lang.Object)'#');
    java.util.Iterator var36 = var33.iterator();
    java.util.Iterator var37 = var33.iterator();
    java.util.Iterator var38 = var33.iterator();
    boolean var39 = var33.isEmpty();
    int var40 = var33.size();
    var12.enqueue((java.lang.Object)var40);
    var1.enqueue((java.lang.Object)var40);
    int var43 = var1.size();
    int var44 = var1.size();
    java.lang.Object var45 = var1.dequeue();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + '#'+ "'", var19.equals('#'));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var45 + "' != '" + '#'+ "'", var45.equals('#'));

  }

  public void test365() throws Throwable {

    if (debug) System.out.printf("%nRingBufferMutantTest1.test365");


    at.fhhagenberg.sqe.exercise13.RingBufferMutant var1 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    java.util.Iterator var2 = var1.iterator();
    java.util.Iterator var3 = var1.iterator();
    int var4 = var1.size();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 0);

  }

  public void test366() throws Throwable {

    if (debug) System.out.printf("%nRingBufferMutantTest1.test366");


    at.fhhagenberg.sqe.exercise13.RingBufferMutant var1 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var1.enqueue((java.lang.Object)1.0d);
    java.lang.Object var4 = var1.dequeue();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + 1.0d+ "'", var4.equals(1.0d));

  }

  public void test367() throws Throwable {

    if (debug) System.out.printf("%nRingBufferMutantTest1.test367");


    at.fhhagenberg.sqe.exercise13.RingBufferMutant var1 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var1.enqueue((java.lang.Object)'#');
    int var4 = var1.size();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var6 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var7 = var6.isEmpty();
    boolean var8 = var6.isEmpty();
    java.util.Iterator var9 = var6.iterator();
    boolean var10 = var6.isEmpty();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var12 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var12.enqueue((java.lang.Object)'#');
    java.util.Iterator var15 = var12.iterator();
    java.util.Iterator var16 = var12.iterator();
    var12.enqueue((java.lang.Object)false);
    int var19 = var12.size();
    var6.enqueue((java.lang.Object)var12);
    var1.enqueue((java.lang.Object)var12);
    java.util.Iterator var22 = var12.iterator();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var24 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var25 = var24.isEmpty();
    boolean var26 = var24.isEmpty();
    java.util.Iterator var27 = var24.iterator();
    boolean var28 = var24.isEmpty();
    var24.enqueue((java.lang.Object)'#');
    boolean var31 = var24.isEmpty();
    int var32 = var24.size();
    java.util.Iterator var33 = var24.iterator();
    boolean var34 = var24.isEmpty();
    var12.enqueue((java.lang.Object)var34);
    boolean var36 = var12.isEmpty();
    int var37 = var12.size();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var39 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(2);
    var12.enqueue((java.lang.Object)2);
    boolean var41 = var12.isEmpty();
    boolean var42 = var12.isEmpty();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);

  }

  public void test368() throws Throwable {

    if (debug) System.out.printf("%nRingBufferMutantTest1.test368");


    at.fhhagenberg.sqe.exercise13.RingBufferMutant var1 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var1.enqueue((java.lang.Object)'#');
    java.util.Iterator var4 = var1.iterator();
    java.util.Iterator var5 = var1.iterator();
    var1.enqueue((java.lang.Object)false);
    int var8 = var1.size();
    boolean var9 = var1.isEmpty();
    boolean var10 = var1.isEmpty();
    boolean var11 = var1.isEmpty();
    int var12 = var1.size();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var14 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(100);
    int var15 = var14.size();
    java.util.Iterator var16 = var14.iterator();
    var1.enqueue((java.lang.Object)var14);
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var19 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var20 = var19.isEmpty();
    boolean var21 = var19.isEmpty();
    boolean var22 = var19.isEmpty();
    int var23 = var19.size();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var25 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(1);
    var19.enqueue((java.lang.Object)var25);
    java.lang.Object var27 = var19.dequeue();
    var1.enqueue(var27);
    int var29 = var1.size();
    boolean var30 = var1.isEmpty();
    int var31 = var1.size();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 4);

  }

  public void test369() throws Throwable {

    if (debug) System.out.printf("%nRingBufferMutantTest1.test369");


    at.fhhagenberg.sqe.exercise13.RingBufferMutant var1 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var1.enqueue((java.lang.Object)1.0d);
    java.util.Iterator var4 = var1.iterator();
    boolean var5 = var1.isEmpty();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var7 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var8 = var7.isEmpty();
    boolean var9 = var7.isEmpty();
    java.util.Iterator var10 = var7.iterator();
    boolean var11 = var7.isEmpty();
    var7.enqueue((java.lang.Object)'#');
    boolean var14 = var7.isEmpty();
    int var15 = var7.size();
    java.util.Iterator var16 = var7.iterator();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var18 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var18.enqueue((java.lang.Object)'#');
    java.util.Iterator var21 = var18.iterator();
    var18.enqueue((java.lang.Object)100.0d);
    boolean var24 = var18.isEmpty();
    java.lang.Object var25 = var18.dequeue();
    var7.enqueue(var25);
    java.util.Iterator var27 = var7.iterator();
    var1.enqueue((java.lang.Object)var7);
    boolean var29 = var1.isEmpty();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var31 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var32 = var31.isEmpty();
    boolean var33 = var31.isEmpty();
    java.util.Iterator var34 = var31.iterator();
    boolean var35 = var31.isEmpty();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var37 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var37.enqueue((java.lang.Object)'#');
    java.util.Iterator var40 = var37.iterator();
    java.util.Iterator var41 = var37.iterator();
    var37.enqueue((java.lang.Object)false);
    int var44 = var37.size();
    var31.enqueue((java.lang.Object)var37);
    int var46 = var31.size();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var48 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var49 = var48.isEmpty();
    boolean var50 = var48.isEmpty();
    java.util.Iterator var51 = var48.iterator();
    boolean var52 = var48.isEmpty();
    java.util.Iterator var53 = var48.iterator();
    int var54 = var48.size();
    var31.enqueue((java.lang.Object)var54);
    var1.enqueue((java.lang.Object)var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var25 + "' != '" + '#'+ "'", var25.equals('#'));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == 0);

  }

  public void test370() throws Throwable {

    if (debug) System.out.printf("%nRingBufferMutantTest1.test370");


    at.fhhagenberg.sqe.exercise13.RingBufferMutant var1 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var1.enqueue((java.lang.Object)'#');
    int var4 = var1.size();
    var1.enqueue((java.lang.Object)true);
    java.util.Iterator var7 = var1.iterator();
    java.lang.Object var8 = var1.dequeue();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var10 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var11 = var10.isEmpty();
    boolean var12 = var10.isEmpty();
    java.util.Iterator var13 = var10.iterator();
    boolean var14 = var10.isEmpty();
    var1.enqueue((java.lang.Object)var10);
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var17 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var18 = var17.isEmpty();
    boolean var19 = var17.isEmpty();
    java.util.Iterator var20 = var17.iterator();
    boolean var21 = var17.isEmpty();
    var17.enqueue((java.lang.Object)'#');
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var25 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var26 = var25.isEmpty();
    boolean var27 = var25.isEmpty();
    java.util.Iterator var28 = var25.iterator();
    boolean var29 = var25.isEmpty();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var31 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var31.enqueue((java.lang.Object)'#');
    java.util.Iterator var34 = var31.iterator();
    java.util.Iterator var35 = var31.iterator();
    var31.enqueue((java.lang.Object)false);
    int var38 = var31.size();
    var25.enqueue((java.lang.Object)var31);
    int var40 = var25.size();
    var17.enqueue((java.lang.Object)var40);
    var1.enqueue((java.lang.Object)var17);
    int var43 = var17.size();
    int var44 = var17.size();
    int var45 = var17.size();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + '#'+ "'", var8.equals('#'));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == 2);

  }

  public void test371() throws Throwable {

    if (debug) System.out.printf("%nRingBufferMutantTest1.test371");


    at.fhhagenberg.sqe.exercise13.RingBufferMutant var1 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var2 = var1.isEmpty();
    boolean var3 = var1.isEmpty();
    java.util.Iterator var4 = var1.iterator();
    boolean var5 = var1.isEmpty();
    int var6 = var1.size();
    int var7 = var1.size();
    java.util.Iterator var8 = var1.iterator();
    int var9 = var1.size();
    boolean var10 = var1.isEmpty();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var12 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var12.enqueue((java.lang.Object)'#');
    java.util.Iterator var15 = var12.iterator();
    java.util.Iterator var16 = var12.iterator();
    boolean var17 = var12.isEmpty();
    int var18 = var12.size();
    var12.enqueue((java.lang.Object)1.0d);
    boolean var21 = var12.isEmpty();
    int var22 = var12.size();
    int var23 = var12.size();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var25 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var25.enqueue((java.lang.Object)'#');
    int var28 = var25.size();
    java.lang.Object var29 = var25.dequeue();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var31 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var31.enqueue((java.lang.Object)'#');
    var31.enqueue((java.lang.Object)' ');
    int var36 = var31.size();
    int var37 = var31.size();
    java.util.Iterator var38 = var31.iterator();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var40 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(0);
    java.util.Iterator var41 = var40.iterator();
    var31.enqueue((java.lang.Object)var41);
    var25.enqueue((java.lang.Object)var31);
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var45 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var45.enqueue((java.lang.Object)'#');
    java.util.Iterator var48 = var45.iterator();
    java.util.Iterator var49 = var45.iterator();
    var45.enqueue((java.lang.Object)false);
    java.lang.Object var52 = var45.dequeue();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var54 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var55 = var54.isEmpty();
    boolean var56 = var54.isEmpty();
    java.util.Iterator var57 = var54.iterator();
    boolean var58 = var54.isEmpty();
    var54.enqueue((java.lang.Object)'#');
    boolean var61 = var54.isEmpty();
    int var62 = var54.size();
    java.util.Iterator var63 = var54.iterator();
    var45.enqueue((java.lang.Object)var54);
    var31.enqueue((java.lang.Object)var45);
    var12.enqueue((java.lang.Object)var45);
    java.lang.Object var67 = var12.dequeue();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var69 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var69.enqueue((java.lang.Object)'#');
    java.util.Iterator var72 = var69.iterator();
    java.util.Iterator var73 = var69.iterator();
    boolean var74 = var69.isEmpty();
    int var75 = var69.size();
    var69.enqueue((java.lang.Object)1.0d);
    boolean var78 = var69.isEmpty();
    int var79 = var69.size();
    java.util.Iterator var80 = var69.iterator();
    java.lang.Object var81 = var69.dequeue();
    java.util.Iterator var82 = var69.iterator();
    java.util.Iterator var83 = var69.iterator();
    var12.enqueue((java.lang.Object)var69);
    var1.enqueue((java.lang.Object)var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var29 + "' != '" + '#'+ "'", var29.equals('#'));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var52 + "' != '" + '#'+ "'", var52.equals('#'));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var67 + "' != '" + '#'+ "'", var67.equals('#'));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var78 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var79 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var81 + "' != '" + '#'+ "'", var81.equals('#'));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);

  }

  public void test372() throws Throwable {

    if (debug) System.out.printf("%nRingBufferMutantTest1.test372");


    at.fhhagenberg.sqe.exercise13.RingBufferMutant var1 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var1.enqueue((java.lang.Object)'#');
    var1.enqueue((java.lang.Object)' ');
    int var6 = var1.size();
    java.util.Iterator var7 = var1.iterator();
    boolean var8 = var1.isEmpty();
    java.util.Iterator var9 = var1.iterator();
    int var10 = var1.size();
    boolean var11 = var1.isEmpty();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var13 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var13.enqueue((java.lang.Object)'#');
    java.util.Iterator var16 = var13.iterator();
    java.util.Iterator var17 = var13.iterator();
    var13.enqueue((java.lang.Object)false);
    int var20 = var13.size();
    boolean var21 = var13.isEmpty();
    java.lang.Object var22 = var13.dequeue();
    java.util.Iterator var23 = var13.iterator();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var25 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var25.enqueue((java.lang.Object)'#');
    java.util.Iterator var28 = var25.iterator();
    java.util.Iterator var29 = var25.iterator();
    java.util.Iterator var30 = var25.iterator();
    var13.enqueue((java.lang.Object)var25);
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var33 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(0);
    int var34 = var33.size();
    boolean var35 = var33.isEmpty();
    boolean var36 = var33.isEmpty();
    boolean var37 = var33.isEmpty();
    var25.enqueue((java.lang.Object)var33);
    java.util.Iterator var39 = var25.iterator();
    boolean var40 = var25.isEmpty();
    var1.enqueue((java.lang.Object)var25);
    java.util.Iterator var42 = var1.iterator();
    int var43 = var1.size();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var45 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var45.enqueue((java.lang.Object)'#');
    java.util.Iterator var48 = var45.iterator();
    java.util.Iterator var49 = var45.iterator();
    java.util.Iterator var50 = var45.iterator();
    boolean var51 = var45.isEmpty();
    java.util.Iterator var52 = var45.iterator();
    java.util.Iterator var53 = var45.iterator();
    java.util.Iterator var54 = var45.iterator();
    boolean var55 = var45.isEmpty();
    var1.enqueue((java.lang.Object)var45);
    java.lang.Object var57 = var1.dequeue();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var22 + "' != '" + '#'+ "'", var22.equals('#'));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var57 + "' != '" + '#'+ "'", var57.equals('#'));

  }

  public void test373() throws Throwable {

    if (debug) System.out.printf("%nRingBufferMutantTest1.test373");


    at.fhhagenberg.sqe.exercise13.RingBufferMutant var1 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var1.enqueue((java.lang.Object)'#');
    int var4 = var1.size();
    int var5 = var1.size();
    java.util.Iterator var6 = var1.iterator();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var8 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var9 = var8.isEmpty();
    boolean var10 = var8.isEmpty();
    java.util.Iterator var11 = var8.iterator();
    boolean var12 = var8.isEmpty();
    var8.enqueue((java.lang.Object)1.0d);
    java.util.Iterator var15 = var8.iterator();
    var1.enqueue((java.lang.Object)var15);
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var18 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var19 = var18.isEmpty();
    boolean var20 = var18.isEmpty();
    int var21 = var18.size();
    java.util.Iterator var22 = var18.iterator();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var24 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var24.enqueue((java.lang.Object)'#');
    int var27 = var24.size();
    var24.enqueue((java.lang.Object)true);
    java.util.Iterator var30 = var24.iterator();
    var18.enqueue((java.lang.Object)var30);
    java.lang.Object var32 = var18.dequeue();
    var18.enqueue((java.lang.Object)10.0f);
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var36 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var36.enqueue((java.lang.Object)'#');
    int var39 = var36.size();
    java.lang.Object var40 = var36.dequeue();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var42 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var42.enqueue((java.lang.Object)'#');
    var42.enqueue((java.lang.Object)' ');
    int var47 = var42.size();
    int var48 = var42.size();
    java.util.Iterator var49 = var42.iterator();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var51 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(0);
    java.util.Iterator var52 = var51.iterator();
    var42.enqueue((java.lang.Object)var52);
    var36.enqueue((java.lang.Object)var42);
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var56 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var57 = var56.isEmpty();
    boolean var58 = var56.isEmpty();
    java.util.Iterator var59 = var56.iterator();
    boolean var60 = var56.isEmpty();
    int var61 = var56.size();
    java.util.Iterator var62 = var56.iterator();
    int var63 = var56.size();
    int var64 = var56.size();
    java.util.Iterator var65 = var56.iterator();
    var36.enqueue((java.lang.Object)var65);
    var18.enqueue((java.lang.Object)var65);
    var1.enqueue((java.lang.Object)var18);
    boolean var69 = var1.isEmpty();
    java.lang.Object var70 = var1.dequeue();
    java.util.Iterator var71 = var1.iterator();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var40 + "' != '" + '#'+ "'", var40.equals('#'));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var70 + "' != '" + '#'+ "'", var70.equals('#'));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);

  }

  public void test374() throws Throwable {

    if (debug) System.out.printf("%nRingBufferMutantTest1.test374");


    at.fhhagenberg.sqe.exercise13.RingBufferMutant var1 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var1.enqueue((java.lang.Object)'#');
    int var4 = var1.size();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var6 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var7 = var6.isEmpty();
    boolean var8 = var6.isEmpty();
    java.util.Iterator var9 = var6.iterator();
    boolean var10 = var6.isEmpty();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var12 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var12.enqueue((java.lang.Object)'#');
    java.util.Iterator var15 = var12.iterator();
    java.util.Iterator var16 = var12.iterator();
    var12.enqueue((java.lang.Object)false);
    int var19 = var12.size();
    var6.enqueue((java.lang.Object)var12);
    var1.enqueue((java.lang.Object)var12);
    java.util.Iterator var22 = var1.iterator();
    java.lang.Object var23 = var1.dequeue();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + '#'+ "'", var23.equals('#'));

  }

  public void test375() throws Throwable {

    if (debug) System.out.printf("%nRingBufferMutantTest1.test375");


    at.fhhagenberg.sqe.exercise13.RingBufferMutant var1 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var1.enqueue((java.lang.Object)'#');
    int var4 = var1.size();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var6 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var7 = var6.isEmpty();
    boolean var8 = var6.isEmpty();
    java.util.Iterator var9 = var6.iterator();
    boolean var10 = var6.isEmpty();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var12 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var12.enqueue((java.lang.Object)'#');
    java.util.Iterator var15 = var12.iterator();
    java.util.Iterator var16 = var12.iterator();
    var12.enqueue((java.lang.Object)false);
    int var19 = var12.size();
    var6.enqueue((java.lang.Object)var12);
    var1.enqueue((java.lang.Object)var12);
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var23 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var23.enqueue((java.lang.Object)1.0d);
    java.util.Iterator var26 = var23.iterator();
    boolean var27 = var23.isEmpty();
    boolean var28 = var23.isEmpty();
    boolean var29 = var23.isEmpty();
    var1.enqueue((java.lang.Object)var23);
    int var31 = var23.size();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var33 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var33.enqueue((java.lang.Object)'#');
    java.util.Iterator var36 = var33.iterator();
    java.util.Iterator var37 = var33.iterator();
    var33.enqueue((java.lang.Object)false);
    int var40 = var33.size();
    boolean var41 = var33.isEmpty();
    boolean var42 = var33.isEmpty();
    boolean var43 = var33.isEmpty();
    int var44 = var33.size();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var46 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(100);
    int var47 = var46.size();
    java.util.Iterator var48 = var46.iterator();
    var33.enqueue((java.lang.Object)var46);
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var51 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var52 = var51.isEmpty();
    boolean var53 = var51.isEmpty();
    boolean var54 = var51.isEmpty();
    int var55 = var51.size();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var57 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(1);
    var51.enqueue((java.lang.Object)var57);
    java.lang.Object var59 = var51.dequeue();
    var33.enqueue(var59);
    int var61 = var33.size();
    int var62 = var33.size();
    boolean var63 = var33.isEmpty();
    var23.enqueue((java.lang.Object)var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == false);

  }

  public void test376() throws Throwable {

    if (debug) System.out.printf("%nRingBufferMutantTest1.test376");


    at.fhhagenberg.sqe.exercise13.RingBufferMutant var1 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var1.enqueue((java.lang.Object)'#');
    var1.enqueue((java.lang.Object)' ');
    int var6 = var1.size();
    int var7 = var1.size();
    boolean var8 = var1.isEmpty();
    java.lang.Object var9 = var1.dequeue();
    java.util.Iterator var10 = var1.iterator();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + '#'+ "'", var9.equals('#'));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);

  }

  public void test377() throws Throwable {

    if (debug) System.out.printf("%nRingBufferMutantTest1.test377");


    at.fhhagenberg.sqe.exercise13.RingBufferMutant var1 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(100);
    int var2 = var1.size();
    int var3 = var1.size();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var5 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var6 = var5.isEmpty();
    boolean var7 = var5.isEmpty();
    java.util.Iterator var8 = var5.iterator();
    boolean var9 = var5.isEmpty();
    java.util.Iterator var10 = var5.iterator();
    var1.enqueue((java.lang.Object)var10);
    boolean var12 = var1.isEmpty();
    boolean var13 = var1.isEmpty();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);

  }

  public void test378() throws Throwable {

    if (debug) System.out.printf("%nRingBufferMutantTest1.test378");


    at.fhhagenberg.sqe.exercise13.RingBufferMutant var1 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var2 = var1.isEmpty();
    boolean var3 = var1.isEmpty();
    java.util.Iterator var4 = var1.iterator();
    boolean var5 = var1.isEmpty();
    int var6 = var1.size();
    int var7 = var1.size();
    boolean var8 = var1.isEmpty();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var10 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(100);
    int var11 = var10.size();
    int var12 = var10.size();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var14 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var14.enqueue((java.lang.Object)1.0d);
    java.util.Iterator var17 = var14.iterator();
    boolean var18 = var14.isEmpty();
    boolean var19 = var14.isEmpty();
    boolean var20 = var14.isEmpty();
    java.util.Iterator var21 = var14.iterator();
    var14.enqueue((java.lang.Object)(short)0);
    var10.enqueue((java.lang.Object)var14);
    var1.enqueue((java.lang.Object)var14);
    int var26 = var1.size();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var28 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var28.enqueue((java.lang.Object)1.0d);
    java.util.Iterator var31 = var28.iterator();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var33 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(1);
    boolean var34 = var33.isEmpty();
    boolean var35 = var33.isEmpty();
    java.util.Iterator var36 = var33.iterator();
    var28.enqueue((java.lang.Object)var33);
    java.util.Iterator var38 = var33.iterator();
    var1.enqueue((java.lang.Object)var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);

  }

  public void test379() throws Throwable {

    if (debug) System.out.printf("%nRingBufferMutantTest1.test379");


    at.fhhagenberg.sqe.exercise13.RingBufferMutant var1 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var1.enqueue((java.lang.Object)'#');
    java.util.Iterator var4 = var1.iterator();
    java.util.Iterator var5 = var1.iterator();
    int var6 = var1.size();
    boolean var7 = var1.isEmpty();
    int var8 = var1.size();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var10 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var10.enqueue((java.lang.Object)'#');
    java.util.Iterator var13 = var10.iterator();
    java.util.Iterator var14 = var10.iterator();
    var10.enqueue((java.lang.Object)false);
    int var17 = var10.size();
    boolean var18 = var10.isEmpty();
    int var19 = var10.size();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var21 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var21.enqueue((java.lang.Object)'#');
    java.util.Iterator var24 = var21.iterator();
    java.util.Iterator var25 = var21.iterator();
    var21.enqueue((java.lang.Object)false);
    java.lang.Object var28 = var21.dequeue();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var30 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var31 = var30.isEmpty();
    boolean var32 = var30.isEmpty();
    java.util.Iterator var33 = var30.iterator();
    boolean var34 = var30.isEmpty();
    var30.enqueue((java.lang.Object)'#');
    boolean var37 = var30.isEmpty();
    int var38 = var30.size();
    java.util.Iterator var39 = var30.iterator();
    var21.enqueue((java.lang.Object)var30);
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var42 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var42.enqueue((java.lang.Object)'#');
    java.util.Iterator var45 = var42.iterator();
    java.util.Iterator var46 = var42.iterator();
    java.util.Iterator var47 = var42.iterator();
    boolean var48 = var42.isEmpty();
    int var49 = var42.size();
    var21.enqueue((java.lang.Object)var49);
    var10.enqueue((java.lang.Object)var49);
    int var52 = var10.size();
    int var53 = var10.size();
    boolean var54 = var10.isEmpty();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var56 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var57 = var56.isEmpty();
    boolean var58 = var56.isEmpty();
    java.util.Iterator var59 = var56.iterator();
    boolean var60 = var56.isEmpty();
    var56.enqueue((java.lang.Object)'#');
    java.util.Iterator var63 = var56.iterator();
    boolean var64 = var56.isEmpty();
    var10.enqueue((java.lang.Object)var56);
    var1.enqueue((java.lang.Object)var10);
    var10.enqueue((java.lang.Object)(short)(-1));
    int var69 = var10.size();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var28 + "' != '" + '#'+ "'", var28.equals('#'));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == 5);

  }

  public void test380() throws Throwable {

    if (debug) System.out.printf("%nRingBufferMutantTest1.test380");


    at.fhhagenberg.sqe.exercise13.RingBufferMutant var1 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var1.enqueue((java.lang.Object)'#');
    var1.enqueue((java.lang.Object)' ');
    int var6 = var1.size();
    java.util.Iterator var7 = var1.iterator();
    java.util.Iterator var8 = var1.iterator();
    boolean var9 = var1.isEmpty();
    java.lang.Object var10 = var1.dequeue();
    java.util.Iterator var11 = var1.iterator();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + '#'+ "'", var10.equals('#'));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);

  }

  public void test381() throws Throwable {

    if (debug) System.out.printf("%nRingBufferMutantTest1.test381");


    at.fhhagenberg.sqe.exercise13.RingBufferMutant var1 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var2 = var1.isEmpty();
    boolean var3 = var1.isEmpty();
    java.util.Iterator var4 = var1.iterator();
    boolean var5 = var1.isEmpty();
    int var6 = var1.size();
    int var7 = var1.size();
    boolean var8 = var1.isEmpty();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var10 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(100);
    int var11 = var10.size();
    int var12 = var10.size();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var14 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var14.enqueue((java.lang.Object)1.0d);
    java.util.Iterator var17 = var14.iterator();
    boolean var18 = var14.isEmpty();
    boolean var19 = var14.isEmpty();
    boolean var20 = var14.isEmpty();
    java.util.Iterator var21 = var14.iterator();
    var14.enqueue((java.lang.Object)(short)0);
    var10.enqueue((java.lang.Object)var14);
    var1.enqueue((java.lang.Object)var14);
    boolean var26 = var14.isEmpty();
    boolean var27 = var14.isEmpty();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);

  }

  public void test382() throws Throwable {

    if (debug) System.out.printf("%nRingBufferMutantTest1.test382");


    at.fhhagenberg.sqe.exercise13.RingBufferMutant var1 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var2 = var1.isEmpty();
    boolean var3 = var1.isEmpty();
    int var4 = var1.size();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var6 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var7 = var6.isEmpty();
    boolean var8 = var6.isEmpty();
    var1.enqueue((java.lang.Object)var8);
    boolean var10 = var1.isEmpty();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var12 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var12.enqueue((java.lang.Object)'#');
    java.util.Iterator var15 = var12.iterator();
    java.util.Iterator var16 = var12.iterator();
    java.util.Iterator var17 = var12.iterator();
    boolean var18 = var12.isEmpty();
    java.util.Iterator var19 = var12.iterator();
    int var20 = var12.size();
    int var21 = var12.size();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var23 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var23.enqueue((java.lang.Object)'#');
    int var26 = var23.size();
    var23.enqueue((java.lang.Object)true);
    java.util.Iterator var29 = var23.iterator();
    var12.enqueue((java.lang.Object)var23);
    java.util.Iterator var31 = var12.iterator();
    var1.enqueue((java.lang.Object)var12);
    int var33 = var1.size();
    boolean var34 = var1.isEmpty();
    java.util.Iterator var35 = var1.iterator();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var37 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var38 = var37.isEmpty();
    boolean var39 = var37.isEmpty();
    boolean var40 = var37.isEmpty();
    int var41 = var37.size();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var43 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(1);
    var37.enqueue((java.lang.Object)var43);
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var46 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(100);
    int var47 = var46.size();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var49 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var49.enqueue((java.lang.Object)'#');
    java.util.Iterator var52 = var49.iterator();
    java.util.Iterator var53 = var49.iterator();
    var49.enqueue((java.lang.Object)false);
    java.lang.Object var56 = var49.dequeue();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var58 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var59 = var58.isEmpty();
    boolean var60 = var58.isEmpty();
    java.util.Iterator var61 = var58.iterator();
    boolean var62 = var58.isEmpty();
    var58.enqueue((java.lang.Object)'#');
    boolean var65 = var58.isEmpty();
    int var66 = var58.size();
    java.util.Iterator var67 = var58.iterator();
    var49.enqueue((java.lang.Object)var58);
    int var69 = var58.size();
    int var70 = var58.size();
    var46.enqueue((java.lang.Object)var70);
    java.lang.Object var72 = var46.dequeue();
    var43.enqueue(var72);
    java.util.Iterator var74 = var43.iterator();
    var1.enqueue((java.lang.Object)var43);
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var77 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(100);
    int var78 = var77.size();
    int var79 = var77.size();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var81 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var81.enqueue((java.lang.Object)1.0d);
    java.util.Iterator var84 = var81.iterator();
    boolean var85 = var81.isEmpty();
    boolean var86 = var81.isEmpty();
    boolean var87 = var81.isEmpty();
    java.util.Iterator var88 = var81.iterator();
    var81.enqueue((java.lang.Object)(short)0);
    var77.enqueue((java.lang.Object)var81);
    int var92 = var81.size();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var43.enqueue((java.lang.Object)var81);
      fail("Expected exception of type java.lang.RuntimeException");
    } catch (java.lang.RuntimeException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var56 + "' != '" + '#'+ "'", var56.equals('#'));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var72 + "' != '" + 1+ "'", var72.equals(1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var78 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var79 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var85 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var86 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var87 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var88);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var92 == 2);

  }

  public void test383() throws Throwable {

    if (debug) System.out.printf("%nRingBufferMutantTest1.test383");


    at.fhhagenberg.sqe.exercise13.RingBufferMutant var1 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var2 = var1.isEmpty();
    boolean var3 = var1.isEmpty();
    java.util.Iterator var4 = var1.iterator();
    boolean var5 = var1.isEmpty();
    var1.enqueue((java.lang.Object)'#');
    java.util.Iterator var8 = var1.iterator();
    boolean var9 = var1.isEmpty();
    java.util.Iterator var10 = var1.iterator();
    java.util.Iterator var11 = var1.iterator();
    int var12 = var1.size();
    java.util.Iterator var13 = var1.iterator();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);

  }

  public void test384() throws Throwable {

    if (debug) System.out.printf("%nRingBufferMutantTest1.test384");


    at.fhhagenberg.sqe.exercise13.RingBufferMutant var1 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var2 = var1.isEmpty();
    boolean var3 = var1.isEmpty();
    int var4 = var1.size();
    java.util.Iterator var5 = var1.iterator();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var7 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var7.enqueue((java.lang.Object)'#');
    int var10 = var7.size();
    var7.enqueue((java.lang.Object)true);
    java.util.Iterator var13 = var7.iterator();
    var1.enqueue((java.lang.Object)var13);
    java.util.Iterator var15 = var1.iterator();
    int var16 = var1.size();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var18 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var19 = var18.isEmpty();
    boolean var20 = var18.isEmpty();
    int var21 = var18.size();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var23 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var24 = var23.isEmpty();
    boolean var25 = var23.isEmpty();
    var18.enqueue((java.lang.Object)var25);
    boolean var27 = var18.isEmpty();
    var1.enqueue((java.lang.Object)var27);
    java.lang.Object var29 = var1.dequeue();
    java.util.Iterator var30 = var1.iterator();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var32 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var32.enqueue((java.lang.Object)'#');
    java.util.Iterator var35 = var32.iterator();
    java.util.Iterator var36 = var32.iterator();
    java.util.Iterator var37 = var32.iterator();
    boolean var38 = var32.isEmpty();
    java.util.Iterator var39 = var32.iterator();
    java.util.Iterator var40 = var32.iterator();
    java.util.Iterator var41 = var32.iterator();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var43 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var44 = var43.isEmpty();
    boolean var45 = var43.isEmpty();
    java.util.Iterator var46 = var43.iterator();
    boolean var47 = var43.isEmpty();
    var43.enqueue((java.lang.Object)'#');
    boolean var50 = var43.isEmpty();
    int var51 = var43.size();
    boolean var52 = var43.isEmpty();
    var32.enqueue((java.lang.Object)var43);
    int var54 = var43.size();
    var1.enqueue((java.lang.Object)var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == 1);

  }

  public void test385() throws Throwable {

    if (debug) System.out.printf("%nRingBufferMutantTest1.test385");


    at.fhhagenberg.sqe.exercise13.RingBufferMutant var1 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var2 = var1.isEmpty();
    boolean var3 = var1.isEmpty();
    int var4 = var1.size();
    java.util.Iterator var5 = var1.iterator();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var7 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var7.enqueue((java.lang.Object)'#');
    int var10 = var7.size();
    var7.enqueue((java.lang.Object)true);
    java.util.Iterator var13 = var7.iterator();
    var1.enqueue((java.lang.Object)var13);
    java.util.Iterator var15 = var1.iterator();
    int var16 = var1.size();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var18 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var19 = var18.isEmpty();
    boolean var20 = var18.isEmpty();
    int var21 = var18.size();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var23 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var24 = var23.isEmpty();
    boolean var25 = var23.isEmpty();
    var18.enqueue((java.lang.Object)var25);
    boolean var27 = var18.isEmpty();
    var1.enqueue((java.lang.Object)var27);
    java.util.Iterator var29 = var1.iterator();
    int var30 = var1.size();
    java.lang.Object var31 = var1.dequeue();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);

  }

  public void test386() throws Throwable {

    if (debug) System.out.printf("%nRingBufferMutantTest1.test386");


    at.fhhagenberg.sqe.exercise13.RingBufferMutant var1 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var1.enqueue((java.lang.Object)'#');
    int var4 = var1.size();
    var1.enqueue((java.lang.Object)true);
    java.util.Iterator var7 = var1.iterator();
    boolean var8 = var1.isEmpty();
    boolean var9 = var1.isEmpty();
    boolean var10 = var1.isEmpty();
    int var11 = var1.size();
    java.util.Iterator var12 = var1.iterator();
    boolean var13 = var1.isEmpty();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);

  }

  public void test387() throws Throwable {

    if (debug) System.out.printf("%nRingBufferMutantTest1.test387");


    at.fhhagenberg.sqe.exercise13.RingBufferMutant var1 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var2 = var1.isEmpty();
    boolean var3 = var1.isEmpty();
    java.util.Iterator var4 = var1.iterator();
    boolean var5 = var1.isEmpty();
    var1.enqueue((java.lang.Object)1.0d);
    java.util.Iterator var8 = var1.iterator();
    boolean var9 = var1.isEmpty();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var11 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var11.enqueue((java.lang.Object)'#');
    java.util.Iterator var14 = var11.iterator();
    java.util.Iterator var15 = var11.iterator();
    boolean var16 = var11.isEmpty();
    var1.enqueue((java.lang.Object)var16);
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var19 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var20 = var19.isEmpty();
    boolean var21 = var19.isEmpty();
    java.util.Iterator var22 = var19.iterator();
    boolean var23 = var19.isEmpty();
    var19.enqueue((java.lang.Object)'#');
    boolean var26 = var19.isEmpty();
    int var27 = var19.size();
    java.util.Iterator var28 = var19.iterator();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var30 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var30.enqueue((java.lang.Object)'#');
    java.util.Iterator var33 = var30.iterator();
    var30.enqueue((java.lang.Object)100.0d);
    boolean var36 = var30.isEmpty();
    java.lang.Object var37 = var30.dequeue();
    var19.enqueue(var37);
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var40 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var40.enqueue((java.lang.Object)'#');
    java.util.Iterator var43 = var40.iterator();
    var19.enqueue((java.lang.Object)var40);
    boolean var45 = var40.isEmpty();
    java.util.Iterator var46 = var40.iterator();
    java.util.Iterator var47 = var40.iterator();
    boolean var48 = var40.isEmpty();
    var1.enqueue((java.lang.Object)var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var37 + "' != '" + '#'+ "'", var37.equals('#'));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);

  }

  public void test388() throws Throwable {

    if (debug) System.out.printf("%nRingBufferMutantTest1.test388");


    at.fhhagenberg.sqe.exercise13.RingBufferMutant var1 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var2 = var1.isEmpty();
    boolean var3 = var1.isEmpty();
    java.util.Iterator var4 = var1.iterator();
    boolean var5 = var1.isEmpty();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var7 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var7.enqueue((java.lang.Object)'#');
    java.util.Iterator var10 = var7.iterator();
    java.util.Iterator var11 = var7.iterator();
    var7.enqueue((java.lang.Object)false);
    int var14 = var7.size();
    var1.enqueue((java.lang.Object)var7);
    int var16 = var1.size();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var18 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var19 = var18.isEmpty();
    boolean var20 = var18.isEmpty();
    java.util.Iterator var21 = var18.iterator();
    boolean var22 = var18.isEmpty();
    java.util.Iterator var23 = var18.iterator();
    int var24 = var18.size();
    var1.enqueue((java.lang.Object)var24);
    java.util.Iterator var26 = var1.iterator();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var28 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var29 = var28.isEmpty();
    boolean var30 = var28.isEmpty();
    java.util.Iterator var31 = var28.iterator();
    boolean var32 = var28.isEmpty();
    var28.enqueue((java.lang.Object)'#');
    boolean var35 = var28.isEmpty();
    int var36 = var28.size();
    java.util.Iterator var37 = var28.iterator();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var39 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var39.enqueue((java.lang.Object)'#');
    java.util.Iterator var42 = var39.iterator();
    var39.enqueue((java.lang.Object)100.0d);
    boolean var45 = var39.isEmpty();
    java.lang.Object var46 = var39.dequeue();
    var28.enqueue(var46);
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var49 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var49.enqueue((java.lang.Object)'#');
    java.util.Iterator var52 = var49.iterator();
    var28.enqueue((java.lang.Object)var49);
    boolean var54 = var49.isEmpty();
    int var55 = var49.size();
    java.util.Iterator var56 = var49.iterator();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var58 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var58.enqueue((java.lang.Object)'#');
    int var61 = var58.size();
    var58.enqueue((java.lang.Object)true);
    java.util.Iterator var64 = var58.iterator();
    boolean var65 = var58.isEmpty();
    java.util.Iterator var66 = var58.iterator();
    var49.enqueue((java.lang.Object)var66);
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var69 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var69.enqueue((java.lang.Object)'#');
    var69.enqueue((java.lang.Object)' ');
    int var74 = var69.size();
    int var75 = var69.size();
    int var76 = var69.size();
    int var77 = var69.size();
    java.util.Iterator var78 = var69.iterator();
    var49.enqueue((java.lang.Object)var69);
    java.lang.Object var80 = var69.dequeue();
    var1.enqueue((java.lang.Object)var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var46 + "' != '" + '#'+ "'", var46.equals('#'));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var76 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var77 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var80 + "' != '" + '#'+ "'", var80.equals('#'));

  }

  public void test389() throws Throwable {

    if (debug) System.out.printf("%nRingBufferMutantTest1.test389");


    at.fhhagenberg.sqe.exercise13.RingBufferMutant var1 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var1.enqueue((java.lang.Object)'#');
    var1.enqueue((java.lang.Object)' ');
    int var6 = var1.size();
    java.util.Iterator var7 = var1.iterator();
    boolean var8 = var1.isEmpty();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var10 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var11 = var10.isEmpty();
    boolean var12 = var10.isEmpty();
    java.util.Iterator var13 = var10.iterator();
    boolean var14 = var10.isEmpty();
    java.util.Iterator var15 = var10.iterator();
    int var16 = var10.size();
    var1.enqueue((java.lang.Object)var16);
    boolean var18 = var1.isEmpty();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);

  }

  public void test390() throws Throwable {

    if (debug) System.out.printf("%nRingBufferMutantTest1.test390");


    at.fhhagenberg.sqe.exercise13.RingBufferMutant var1 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var1.enqueue((java.lang.Object)'#');
    int var4 = var1.size();
    var1.enqueue((java.lang.Object)true);
    java.util.Iterator var7 = var1.iterator();
    java.lang.Object var8 = var1.dequeue();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var10 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var11 = var10.isEmpty();
    boolean var12 = var10.isEmpty();
    java.util.Iterator var13 = var10.iterator();
    boolean var14 = var10.isEmpty();
    var1.enqueue((java.lang.Object)var10);
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var17 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var18 = var17.isEmpty();
    boolean var19 = var17.isEmpty();
    java.util.Iterator var20 = var17.iterator();
    boolean var21 = var17.isEmpty();
    var17.enqueue((java.lang.Object)'#');
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var25 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var26 = var25.isEmpty();
    boolean var27 = var25.isEmpty();
    java.util.Iterator var28 = var25.iterator();
    boolean var29 = var25.isEmpty();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var31 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var31.enqueue((java.lang.Object)'#');
    java.util.Iterator var34 = var31.iterator();
    java.util.Iterator var35 = var31.iterator();
    var31.enqueue((java.lang.Object)false);
    int var38 = var31.size();
    var25.enqueue((java.lang.Object)var31);
    int var40 = var25.size();
    var17.enqueue((java.lang.Object)var40);
    var1.enqueue((java.lang.Object)var17);
    boolean var43 = var17.isEmpty();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + '#'+ "'", var8.equals('#'));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);

  }

  public void test391() throws Throwable {

    if (debug) System.out.printf("%nRingBufferMutantTest1.test391");


    at.fhhagenberg.sqe.exercise13.RingBufferMutant var1 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var1.enqueue((java.lang.Object)'#');
    java.util.Iterator var4 = var1.iterator();
    java.util.Iterator var5 = var1.iterator();
    var1.enqueue((java.lang.Object)false);
    int var8 = var1.size();
    boolean var9 = var1.isEmpty();
    java.util.Iterator var10 = var1.iterator();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var12 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var13 = var12.isEmpty();
    boolean var14 = var12.isEmpty();
    java.util.Iterator var15 = var12.iterator();
    boolean var16 = var12.isEmpty();
    int var17 = var12.size();
    java.util.Iterator var18 = var12.iterator();
    var1.enqueue((java.lang.Object)var18);
    java.util.Iterator var20 = var1.iterator();
    java.util.Iterator var21 = var1.iterator();
    int var22 = var1.size();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 3);

  }

  public void test392() throws Throwable {

    if (debug) System.out.printf("%nRingBufferMutantTest1.test392");


    at.fhhagenberg.sqe.exercise13.RingBufferMutant var1 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var2 = var1.isEmpty();
    boolean var3 = var1.isEmpty();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var5 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var5.enqueue((java.lang.Object)'#');
    java.util.Iterator var8 = var5.iterator();
    java.util.Iterator var9 = var5.iterator();
    var5.enqueue((java.lang.Object)false);
    int var12 = var5.size();
    boolean var13 = var5.isEmpty();
    java.lang.Object var14 = var5.dequeue();
    java.util.Iterator var15 = var5.iterator();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var17 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var17.enqueue((java.lang.Object)'#');
    java.util.Iterator var20 = var17.iterator();
    java.util.Iterator var21 = var17.iterator();
    java.util.Iterator var22 = var17.iterator();
    var5.enqueue((java.lang.Object)var17);
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var25 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(0);
    int var26 = var25.size();
    boolean var27 = var25.isEmpty();
    boolean var28 = var25.isEmpty();
    boolean var29 = var25.isEmpty();
    var17.enqueue((java.lang.Object)var25);
    var1.enqueue((java.lang.Object)var25);
    int var32 = var1.size();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var34 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var34.enqueue((java.lang.Object)'#');
    java.util.Iterator var37 = var34.iterator();
    java.util.Iterator var38 = var34.iterator();
    var34.enqueue((java.lang.Object)false);
    int var41 = var34.size();
    boolean var42 = var34.isEmpty();
    boolean var43 = var34.isEmpty();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var45 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var45.enqueue((java.lang.Object)'#');
    int var48 = var45.size();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var50 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var51 = var50.isEmpty();
    boolean var52 = var50.isEmpty();
    java.util.Iterator var53 = var50.iterator();
    boolean var54 = var50.isEmpty();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var56 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var56.enqueue((java.lang.Object)'#');
    java.util.Iterator var59 = var56.iterator();
    java.util.Iterator var60 = var56.iterator();
    var56.enqueue((java.lang.Object)false);
    int var63 = var56.size();
    var50.enqueue((java.lang.Object)var56);
    var45.enqueue((java.lang.Object)var56);
    java.util.Iterator var66 = var56.iterator();
    var34.enqueue((java.lang.Object)var56);
    var1.enqueue((java.lang.Object)var34);
    java.lang.Object var69 = var1.dequeue();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + '#'+ "'", var14.equals('#'));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);

  }

  public void test393() throws Throwable {

    if (debug) System.out.printf("%nRingBufferMutantTest1.test393");


    at.fhhagenberg.sqe.exercise13.RingBufferMutant var1 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var1.enqueue((java.lang.Object)1.0d);
    java.util.Iterator var4 = var1.iterator();
    boolean var5 = var1.isEmpty();
    int var6 = var1.size();
    int var7 = var1.size();
    java.lang.Object var8 = var1.dequeue();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var10 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var11 = var10.isEmpty();
    boolean var12 = var10.isEmpty();
    java.util.Iterator var13 = var10.iterator();
    boolean var14 = var10.isEmpty();
    int var15 = var10.size();
    int var16 = var10.size();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var18 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var18.enqueue((java.lang.Object)'#');
    int var21 = var18.size();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var23 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var24 = var23.isEmpty();
    boolean var25 = var23.isEmpty();
    java.util.Iterator var26 = var23.iterator();
    boolean var27 = var23.isEmpty();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var29 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var29.enqueue((java.lang.Object)'#');
    java.util.Iterator var32 = var29.iterator();
    java.util.Iterator var33 = var29.iterator();
    var29.enqueue((java.lang.Object)false);
    int var36 = var29.size();
    var23.enqueue((java.lang.Object)var29);
    var18.enqueue((java.lang.Object)var29);
    java.util.Iterator var39 = var29.iterator();
    java.util.Iterator var40 = var29.iterator();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var42 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var43 = var42.isEmpty();
    boolean var44 = var42.isEmpty();
    java.util.Iterator var45 = var42.iterator();
    boolean var46 = var42.isEmpty();
    var42.enqueue((java.lang.Object)'#');
    int var49 = var42.size();
    var29.enqueue((java.lang.Object)var49);
    boolean var51 = var29.isEmpty();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var53 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var53.enqueue((java.lang.Object)'#');
    int var56 = var53.size();
    int var57 = var53.size();
    java.util.Iterator var58 = var53.iterator();
    java.util.Iterator var59 = var53.iterator();
    var29.enqueue((java.lang.Object)var53);
    var10.enqueue((java.lang.Object)var29);
    java.lang.Object var62 = var29.dequeue();
    var1.enqueue(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + 1.0d+ "'", var8.equals(1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var62 + "' != '" + '#'+ "'", var62.equals('#'));

  }

  public void test394() throws Throwable {

    if (debug) System.out.printf("%nRingBufferMutantTest1.test394");


    at.fhhagenberg.sqe.exercise13.RingBufferMutant var1 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var1.enqueue((java.lang.Object)'#');
    int var4 = var1.size();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var6 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var7 = var6.isEmpty();
    boolean var8 = var6.isEmpty();
    java.util.Iterator var9 = var6.iterator();
    boolean var10 = var6.isEmpty();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var12 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var12.enqueue((java.lang.Object)'#');
    java.util.Iterator var15 = var12.iterator();
    java.util.Iterator var16 = var12.iterator();
    var12.enqueue((java.lang.Object)false);
    int var19 = var12.size();
    var6.enqueue((java.lang.Object)var12);
    var1.enqueue((java.lang.Object)var12);
    java.util.Iterator var22 = var12.iterator();
    java.util.Iterator var23 = var12.iterator();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var25 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var26 = var25.isEmpty();
    boolean var27 = var25.isEmpty();
    java.util.Iterator var28 = var25.iterator();
    boolean var29 = var25.isEmpty();
    var25.enqueue((java.lang.Object)'#');
    int var32 = var25.size();
    var12.enqueue((java.lang.Object)var32);
    boolean var34 = var12.isEmpty();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var36 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var36.enqueue((java.lang.Object)'#');
    int var39 = var36.size();
    int var40 = var36.size();
    java.util.Iterator var41 = var36.iterator();
    java.util.Iterator var42 = var36.iterator();
    var12.enqueue((java.lang.Object)var36);
    java.util.Iterator var44 = var36.iterator();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);

  }

  public void test395() throws Throwable {

    if (debug) System.out.printf("%nRingBufferMutantTest1.test395");


    at.fhhagenberg.sqe.exercise13.RingBufferMutant var1 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var1.enqueue((java.lang.Object)'#');
    java.util.Iterator var4 = var1.iterator();
    java.util.Iterator var5 = var1.iterator();
    var1.enqueue((java.lang.Object)false);
    int var8 = var1.size();
    boolean var9 = var1.isEmpty();
    boolean var10 = var1.isEmpty();
    boolean var11 = var1.isEmpty();
    int var12 = var1.size();
    boolean var13 = var1.isEmpty();
    int var14 = var1.size();
    int var15 = var1.size();
    java.util.Iterator var16 = var1.iterator();
    boolean var17 = var1.isEmpty();
    boolean var18 = var1.isEmpty();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);

  }

  public void test396() throws Throwable {

    if (debug) System.out.printf("%nRingBufferMutantTest1.test396");


    at.fhhagenberg.sqe.exercise13.RingBufferMutant var1 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(100);
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var3 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var3.enqueue((java.lang.Object)'#');
    java.util.Iterator var6 = var3.iterator();
    java.util.Iterator var7 = var3.iterator();
    var3.enqueue((java.lang.Object)false);
    int var10 = var3.size();
    boolean var11 = var3.isEmpty();
    int var12 = var3.size();
    java.lang.Object var13 = new java.lang.Object();
    var3.enqueue(var13);
    var1.enqueue((java.lang.Object)var3);
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var17 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var17.enqueue((java.lang.Object)'#');
    java.util.Iterator var20 = var17.iterator();
    java.util.Iterator var21 = var17.iterator();
    var17.enqueue((java.lang.Object)false);
    int var24 = var17.size();
    boolean var25 = var17.isEmpty();
    boolean var26 = var17.isEmpty();
    boolean var27 = var17.isEmpty();
    int var28 = var17.size();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var30 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(100);
    int var31 = var30.size();
    java.util.Iterator var32 = var30.iterator();
    var17.enqueue((java.lang.Object)var30);
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var35 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var36 = var35.isEmpty();
    boolean var37 = var35.isEmpty();
    boolean var38 = var35.isEmpty();
    int var39 = var35.size();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var41 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(1);
    var35.enqueue((java.lang.Object)var41);
    java.lang.Object var43 = var35.dequeue();
    var17.enqueue(var43);
    int var45 = var17.size();
    boolean var46 = var17.isEmpty();
    var3.enqueue((java.lang.Object)var17);
    boolean var48 = var3.isEmpty();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var50 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var51 = var50.isEmpty();
    boolean var52 = var50.isEmpty();
    java.util.Iterator var53 = var50.iterator();
    boolean var54 = var50.isEmpty();
    int var55 = var50.size();
    int var56 = var50.size();
    java.util.Iterator var57 = var50.iterator();
    var3.enqueue((java.lang.Object)var57);
    boolean var59 = var3.isEmpty();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);

  }

  public void test397() throws Throwable {

    if (debug) System.out.printf("%nRingBufferMutantTest1.test397");


    at.fhhagenberg.sqe.exercise13.RingBufferMutant var1 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var1.enqueue((java.lang.Object)'#');
    java.util.Iterator var4 = var1.iterator();
    java.util.Iterator var5 = var1.iterator();
    java.util.Iterator var6 = var1.iterator();
    boolean var7 = var1.isEmpty();
    java.util.Iterator var8 = var1.iterator();
    java.util.Iterator var9 = var1.iterator();
    java.util.Iterator var10 = var1.iterator();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var12 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var13 = var12.isEmpty();
    boolean var14 = var12.isEmpty();
    java.util.Iterator var15 = var12.iterator();
    boolean var16 = var12.isEmpty();
    var12.enqueue((java.lang.Object)'#');
    boolean var19 = var12.isEmpty();
    int var20 = var12.size();
    boolean var21 = var12.isEmpty();
    var1.enqueue((java.lang.Object)var12);
    int var23 = var1.size();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var25 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var26 = var25.isEmpty();
    boolean var27 = var25.isEmpty();
    java.util.Iterator var28 = var25.iterator();
    boolean var29 = var25.isEmpty();
    var25.enqueue((java.lang.Object)'#');
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var33 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var34 = var33.isEmpty();
    boolean var35 = var33.isEmpty();
    java.util.Iterator var36 = var33.iterator();
    boolean var37 = var33.isEmpty();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var39 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var39.enqueue((java.lang.Object)'#');
    java.util.Iterator var42 = var39.iterator();
    java.util.Iterator var43 = var39.iterator();
    var39.enqueue((java.lang.Object)false);
    int var46 = var39.size();
    var33.enqueue((java.lang.Object)var39);
    int var48 = var33.size();
    var25.enqueue((java.lang.Object)var48);
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var51 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var51.enqueue((java.lang.Object)'#');
    java.util.Iterator var54 = var51.iterator();
    java.util.Iterator var55 = var51.iterator();
    var51.enqueue((java.lang.Object)false);
    java.lang.Object var58 = var51.dequeue();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var60 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var61 = var60.isEmpty();
    boolean var62 = var60.isEmpty();
    java.util.Iterator var63 = var60.iterator();
    boolean var64 = var60.isEmpty();
    var60.enqueue((java.lang.Object)'#');
    boolean var67 = var60.isEmpty();
    int var68 = var60.size();
    java.util.Iterator var69 = var60.iterator();
    var51.enqueue((java.lang.Object)var60);
    var60.enqueue((java.lang.Object)100);
    var25.enqueue((java.lang.Object)var60);
    int var74 = var25.size();
    var1.enqueue((java.lang.Object)var25);
    java.lang.Object var76 = var25.dequeue();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var58 + "' != '" + '#'+ "'", var58.equals('#'));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var76 + "' != '" + '#'+ "'", var76.equals('#'));

  }

  public void test398() throws Throwable {

    if (debug) System.out.printf("%nRingBufferMutantTest1.test398");


    at.fhhagenberg.sqe.exercise13.RingBufferMutant var1 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var1.enqueue((java.lang.Object)'#');
    java.util.Iterator var4 = var1.iterator();
    java.util.Iterator var5 = var1.iterator();
    var1.enqueue((java.lang.Object)false);
    int var8 = var1.size();
    boolean var9 = var1.isEmpty();
    java.util.Iterator var10 = var1.iterator();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var12 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var13 = var12.isEmpty();
    boolean var14 = var12.isEmpty();
    java.util.Iterator var15 = var12.iterator();
    boolean var16 = var12.isEmpty();
    int var17 = var12.size();
    java.util.Iterator var18 = var12.iterator();
    var1.enqueue((java.lang.Object)var18);
    java.util.Iterator var20 = var1.iterator();
    java.util.Iterator var21 = var1.iterator();
    boolean var22 = var1.isEmpty();
    java.util.Iterator var23 = var1.iterator();
    boolean var24 = var1.isEmpty();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);

  }

  public void test399() throws Throwable {

    if (debug) System.out.printf("%nRingBufferMutantTest1.test399");


    at.fhhagenberg.sqe.exercise13.RingBufferMutant var1 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var1.enqueue((java.lang.Object)'#');
    java.util.Iterator var4 = var1.iterator();
    java.util.Iterator var5 = var1.iterator();
    var1.enqueue((java.lang.Object)false);
    int var8 = var1.size();
    boolean var9 = var1.isEmpty();
    boolean var10 = var1.isEmpty();
    boolean var11 = var1.isEmpty();
    int var12 = var1.size();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var14 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(100);
    int var15 = var14.size();
    java.util.Iterator var16 = var14.iterator();
    var1.enqueue((java.lang.Object)var14);
    java.util.Iterator var18 = var14.iterator();
    int var19 = var14.size();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.Object var20 = var14.dequeue();
      fail("Expected exception of type java.lang.RuntimeException");
    } catch (java.lang.RuntimeException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 0);

  }

  public void test400() throws Throwable {

    if (debug) System.out.printf("%nRingBufferMutantTest1.test400");


    at.fhhagenberg.sqe.exercise13.RingBufferMutant var1 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var1.enqueue((java.lang.Object)'#');
    int var4 = var1.size();
    java.lang.Object var5 = var1.dequeue();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var7 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var7.enqueue((java.lang.Object)'#');
    var7.enqueue((java.lang.Object)' ');
    int var12 = var7.size();
    int var13 = var7.size();
    java.util.Iterator var14 = var7.iterator();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var16 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(0);
    java.util.Iterator var17 = var16.iterator();
    var7.enqueue((java.lang.Object)var17);
    var1.enqueue((java.lang.Object)var7);
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var21 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var22 = var21.isEmpty();
    boolean var23 = var21.isEmpty();
    java.util.Iterator var24 = var21.iterator();
    boolean var25 = var21.isEmpty();
    int var26 = var21.size();
    java.util.Iterator var27 = var21.iterator();
    int var28 = var21.size();
    int var29 = var21.size();
    java.util.Iterator var30 = var21.iterator();
    var1.enqueue((java.lang.Object)var30);
    java.util.Iterator var32 = var1.iterator();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + '#'+ "'", var5.equals('#'));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);

  }

  public void test401() throws Throwable {

    if (debug) System.out.printf("%nRingBufferMutantTest1.test401");


    at.fhhagenberg.sqe.exercise13.RingBufferMutant var1 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var1.enqueue((java.lang.Object)'#');
    java.util.Iterator var4 = var1.iterator();
    java.util.Iterator var5 = var1.iterator();
    var1.enqueue((java.lang.Object)false);
    int var8 = var1.size();
    boolean var9 = var1.isEmpty();
    boolean var10 = var1.isEmpty();
    boolean var11 = var1.isEmpty();
    int var12 = var1.size();
    boolean var13 = var1.isEmpty();
    java.util.Iterator var14 = var1.iterator();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);

  }

  public void test402() throws Throwable {

    if (debug) System.out.printf("%nRingBufferMutantTest1.test402");


    at.fhhagenberg.sqe.exercise13.RingBufferMutant var1 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(100);
    int var2 = var1.size();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var4 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var4.enqueue((java.lang.Object)'#');
    java.util.Iterator var7 = var4.iterator();
    java.util.Iterator var8 = var4.iterator();
    var4.enqueue((java.lang.Object)false);
    java.lang.Object var11 = var4.dequeue();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var13 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var14 = var13.isEmpty();
    boolean var15 = var13.isEmpty();
    java.util.Iterator var16 = var13.iterator();
    boolean var17 = var13.isEmpty();
    var13.enqueue((java.lang.Object)'#');
    boolean var20 = var13.isEmpty();
    int var21 = var13.size();
    java.util.Iterator var22 = var13.iterator();
    var4.enqueue((java.lang.Object)var13);
    int var24 = var13.size();
    int var25 = var13.size();
    var1.enqueue((java.lang.Object)var25);
    boolean var27 = var1.isEmpty();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var29 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var29.enqueue((java.lang.Object)'#');
    var29.enqueue((java.lang.Object)' ');
    int var34 = var29.size();
    int var35 = var29.size();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var37 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(1);
    java.util.Iterator var38 = var37.iterator();
    java.util.Iterator var39 = var37.iterator();
    var29.enqueue((java.lang.Object)var37);
    int var41 = var29.size();
    var1.enqueue((java.lang.Object)var29);
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var44 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var44.enqueue((java.lang.Object)'#');
    java.util.Iterator var47 = var44.iterator();
    java.util.Iterator var48 = var44.iterator();
    java.util.Iterator var49 = var44.iterator();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var51 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var51.enqueue((java.lang.Object)'#');
    java.util.Iterator var54 = var51.iterator();
    java.util.Iterator var55 = var51.iterator();
    java.util.Iterator var56 = var51.iterator();
    boolean var57 = var51.isEmpty();
    int var58 = var51.size();
    var44.enqueue((java.lang.Object)var58);
    var29.enqueue((java.lang.Object)var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + '#'+ "'", var11.equals('#'));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == 1);

  }

  public void test403() throws Throwable {

    if (debug) System.out.printf("%nRingBufferMutantTest1.test403");


    at.fhhagenberg.sqe.exercise13.RingBufferMutant var1 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var1.enqueue((java.lang.Object)'#');
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var5 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var5.enqueue((java.lang.Object)'#');
    java.util.Iterator var8 = var5.iterator();
    java.util.Iterator var9 = var5.iterator();
    var5.enqueue((java.lang.Object)false);
    int var12 = var5.size();
    boolean var13 = var5.isEmpty();
    java.lang.Object var14 = var5.dequeue();
    java.util.Iterator var15 = var5.iterator();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var17 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var17.enqueue((java.lang.Object)'#');
    java.util.Iterator var20 = var17.iterator();
    java.util.Iterator var21 = var17.iterator();
    java.util.Iterator var22 = var17.iterator();
    var5.enqueue((java.lang.Object)var17);
    var1.enqueue((java.lang.Object)var17);
    java.util.Iterator var25 = var17.iterator();
    boolean var26 = var17.isEmpty();
    boolean var27 = var17.isEmpty();
    int var28 = var17.size();
    java.util.Iterator var29 = var17.iterator();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + '#'+ "'", var14.equals('#'));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);

  }

  public void test404() throws Throwable {

    if (debug) System.out.printf("%nRingBufferMutantTest1.test404");


    at.fhhagenberg.sqe.exercise13.RingBufferMutant var1 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var2 = var1.isEmpty();
    boolean var3 = var1.isEmpty();
    java.util.Iterator var4 = var1.iterator();
    boolean var5 = var1.isEmpty();
    int var6 = var1.size();
    java.util.Iterator var7 = var1.iterator();
    int var8 = var1.size();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var10 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var10.enqueue((java.lang.Object)'#');
    java.util.Iterator var13 = var10.iterator();
    java.util.Iterator var14 = var10.iterator();
    var10.enqueue((java.lang.Object)false);
    java.lang.Object var17 = var10.dequeue();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var19 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var20 = var19.isEmpty();
    boolean var21 = var19.isEmpty();
    java.util.Iterator var22 = var19.iterator();
    boolean var23 = var19.isEmpty();
    var19.enqueue((java.lang.Object)'#');
    boolean var26 = var19.isEmpty();
    int var27 = var19.size();
    java.util.Iterator var28 = var19.iterator();
    var10.enqueue((java.lang.Object)var19);
    int var30 = var19.size();
    int var31 = var19.size();
    var1.enqueue((java.lang.Object)var19);
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var34 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var35 = var34.isEmpty();
    boolean var36 = var34.isEmpty();
    int var37 = var34.size();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var39 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var40 = var39.isEmpty();
    boolean var41 = var39.isEmpty();
    var34.enqueue((java.lang.Object)var41);
    boolean var43 = var34.isEmpty();
    var19.enqueue((java.lang.Object)var43);
    boolean var45 = var19.isEmpty();
    int var46 = var19.size();
    var19.enqueue((java.lang.Object)'#');
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + '#'+ "'", var17.equals('#'));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == 2);

  }

  public void test405() throws Throwable {

    if (debug) System.out.printf("%nRingBufferMutantTest1.test405");


    at.fhhagenberg.sqe.exercise13.RingBufferMutant var1 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var1.enqueue((java.lang.Object)1.0d);
    java.util.Iterator var4 = var1.iterator();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var6 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(1);
    boolean var7 = var6.isEmpty();
    boolean var8 = var6.isEmpty();
    java.util.Iterator var9 = var6.iterator();
    var1.enqueue((java.lang.Object)var6);
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var12 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var12.enqueue((java.lang.Object)'#');
    java.util.Iterator var15 = var12.iterator();
    java.util.Iterator var16 = var12.iterator();
    var12.enqueue((java.lang.Object)false);
    int var19 = var12.size();
    boolean var20 = var12.isEmpty();
    boolean var21 = var12.isEmpty();
    boolean var22 = var12.isEmpty();
    java.lang.Object var23 = var12.dequeue();
    java.util.Iterator var24 = var12.iterator();
    var1.enqueue((java.lang.Object)var12);
    boolean var26 = var1.isEmpty();
    boolean var27 = var1.isEmpty();
    boolean var28 = var1.isEmpty();
    int var29 = var1.size();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var31 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var31.enqueue((java.lang.Object)'#');
    java.util.Iterator var34 = var31.iterator();
    java.util.Iterator var35 = var31.iterator();
    java.util.Iterator var36 = var31.iterator();
    boolean var37 = var31.isEmpty();
    java.util.Iterator var38 = var31.iterator();
    int var39 = var31.size();
    int var40 = var31.size();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var42 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var42.enqueue((java.lang.Object)'#');
    int var45 = var42.size();
    var42.enqueue((java.lang.Object)true);
    java.util.Iterator var48 = var42.iterator();
    var31.enqueue((java.lang.Object)var42);
    java.util.Iterator var50 = var31.iterator();
    var1.enqueue((java.lang.Object)var31);
    java.util.Iterator var52 = var1.iterator();
    java.util.Iterator var53 = var1.iterator();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + '#'+ "'", var23.equals('#'));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);

  }

  public void test406() throws Throwable {

    if (debug) System.out.printf("%nRingBufferMutantTest1.test406");


    at.fhhagenberg.sqe.exercise13.RingBufferMutant var1 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(0);
    int var2 = var1.size();
    boolean var3 = var1.isEmpty();
    int var4 = var1.size();
    boolean var5 = var1.isEmpty();
    java.util.Iterator var6 = var1.iterator();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);

  }

  public void test407() throws Throwable {

    if (debug) System.out.printf("%nRingBufferMutantTest1.test407");


    at.fhhagenberg.sqe.exercise13.RingBufferMutant var1 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var2 = var1.isEmpty();
    boolean var3 = var1.isEmpty();
    int var4 = var1.size();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var6 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var7 = var6.isEmpty();
    boolean var8 = var6.isEmpty();
    var1.enqueue((java.lang.Object)var8);
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var11 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var11.enqueue((java.lang.Object)'#');
    int var14 = var11.size();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var16 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var17 = var16.isEmpty();
    boolean var18 = var16.isEmpty();
    java.util.Iterator var19 = var16.iterator();
    boolean var20 = var16.isEmpty();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var22 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var22.enqueue((java.lang.Object)'#');
    java.util.Iterator var25 = var22.iterator();
    java.util.Iterator var26 = var22.iterator();
    var22.enqueue((java.lang.Object)false);
    int var29 = var22.size();
    var16.enqueue((java.lang.Object)var22);
    var11.enqueue((java.lang.Object)var22);
    java.util.Iterator var32 = var22.iterator();
    java.util.Iterator var33 = var22.iterator();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var35 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var36 = var35.isEmpty();
    boolean var37 = var35.isEmpty();
    java.util.Iterator var38 = var35.iterator();
    boolean var39 = var35.isEmpty();
    var35.enqueue((java.lang.Object)'#');
    int var42 = var35.size();
    var22.enqueue((java.lang.Object)var42);
    boolean var44 = var22.isEmpty();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var46 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var46.enqueue((java.lang.Object)'#');
    int var49 = var46.size();
    int var50 = var46.size();
    java.util.Iterator var51 = var46.iterator();
    java.util.Iterator var52 = var46.iterator();
    var22.enqueue((java.lang.Object)var46);
    java.util.Iterator var54 = var22.iterator();
    var1.enqueue((java.lang.Object)var22);
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var57 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var57.enqueue((java.lang.Object)'#');
    java.util.Iterator var60 = var57.iterator();
    java.util.Iterator var61 = var57.iterator();
    var57.enqueue((java.lang.Object)false);
    java.lang.Object var64 = var57.dequeue();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var66 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var67 = var66.isEmpty();
    boolean var68 = var66.isEmpty();
    java.util.Iterator var69 = var66.iterator();
    boolean var70 = var66.isEmpty();
    var66.enqueue((java.lang.Object)'#');
    boolean var73 = var66.isEmpty();
    int var74 = var66.size();
    java.util.Iterator var75 = var66.iterator();
    var57.enqueue((java.lang.Object)var66);
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var78 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var78.enqueue((java.lang.Object)'#');
    java.util.Iterator var81 = var78.iterator();
    java.util.Iterator var82 = var78.iterator();
    java.util.Iterator var83 = var78.iterator();
    boolean var84 = var78.isEmpty();
    int var85 = var78.size();
    var57.enqueue((java.lang.Object)var85);
    java.util.Iterator var87 = var57.iterator();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var89 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var90 = var89.isEmpty();
    boolean var91 = var89.isEmpty();
    java.util.Iterator var92 = var89.iterator();
    boolean var93 = var89.isEmpty();
    var89.enqueue((java.lang.Object)1.0d);
    java.util.Iterator var96 = var89.iterator();
    var57.enqueue((java.lang.Object)var89);
    var22.enqueue((java.lang.Object)var89);
    int var99 = var89.size();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var64 + "' != '" + '#'+ "'", var64.equals('#'));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var84 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var85 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var87);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var90 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var91 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var92);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var93 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var96);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var99 == 1);

  }

  public void test408() throws Throwable {

    if (debug) System.out.printf("%nRingBufferMutantTest1.test408");


    at.fhhagenberg.sqe.exercise13.RingBufferMutant var1 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var1.enqueue((java.lang.Object)'#');
    var1.enqueue((java.lang.Object)' ');
    int var6 = var1.size();
    int var7 = var1.size();
    int var8 = var1.size();
    int var9 = var1.size();
    int var10 = var1.size();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var12 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var12.enqueue((java.lang.Object)'#');
    boolean var15 = var12.isEmpty();
    int var16 = var12.size();
    var1.enqueue((java.lang.Object)var16);
    int var18 = var1.size();
    int var19 = var1.size();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var21 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var21.enqueue((java.lang.Object)'#');
    java.util.Iterator var24 = var21.iterator();
    java.util.Iterator var25 = var21.iterator();
    var21.enqueue((java.lang.Object)false);
    int var28 = var21.size();
    boolean var29 = var21.isEmpty();
    int var30 = var21.size();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var32 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var32.enqueue((java.lang.Object)'#');
    java.util.Iterator var35 = var32.iterator();
    java.util.Iterator var36 = var32.iterator();
    var32.enqueue((java.lang.Object)false);
    java.lang.Object var39 = var32.dequeue();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var41 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var42 = var41.isEmpty();
    boolean var43 = var41.isEmpty();
    java.util.Iterator var44 = var41.iterator();
    boolean var45 = var41.isEmpty();
    var41.enqueue((java.lang.Object)'#');
    boolean var48 = var41.isEmpty();
    int var49 = var41.size();
    java.util.Iterator var50 = var41.iterator();
    var32.enqueue((java.lang.Object)var41);
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var53 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var53.enqueue((java.lang.Object)'#');
    java.util.Iterator var56 = var53.iterator();
    java.util.Iterator var57 = var53.iterator();
    java.util.Iterator var58 = var53.iterator();
    boolean var59 = var53.isEmpty();
    int var60 = var53.size();
    var32.enqueue((java.lang.Object)var60);
    var21.enqueue((java.lang.Object)var60);
    java.util.Iterator var63 = var21.iterator();
    var1.enqueue((java.lang.Object)var63);
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var66 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var66.enqueue((java.lang.Object)'#');
    int var69 = var66.size();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var71 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var72 = var71.isEmpty();
    boolean var73 = var71.isEmpty();
    java.util.Iterator var74 = var71.iterator();
    boolean var75 = var71.isEmpty();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var77 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var77.enqueue((java.lang.Object)'#');
    java.util.Iterator var80 = var77.iterator();
    java.util.Iterator var81 = var77.iterator();
    var77.enqueue((java.lang.Object)false);
    int var84 = var77.size();
    var71.enqueue((java.lang.Object)var77);
    var66.enqueue((java.lang.Object)var77);
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var88 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var88.enqueue((java.lang.Object)1.0d);
    java.util.Iterator var91 = var88.iterator();
    boolean var92 = var88.isEmpty();
    boolean var93 = var88.isEmpty();
    boolean var94 = var88.isEmpty();
    var66.enqueue((java.lang.Object)var88);
    int var96 = var66.size();
    var1.enqueue((java.lang.Object)var96);
    java.util.Iterator var98 = var1.iterator();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var39 + "' != '" + '#'+ "'", var39.equals('#'));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var84 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var91);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var92 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var93 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var94 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var96 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var98);

  }

  public void test409() throws Throwable {

    if (debug) System.out.printf("%nRingBufferMutantTest1.test409");


    at.fhhagenberg.sqe.exercise13.RingBufferMutant var1 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var2 = var1.isEmpty();
    boolean var3 = var1.isEmpty();
    java.util.Iterator var4 = var1.iterator();
    boolean var5 = var1.isEmpty();
    var1.enqueue((java.lang.Object)'#');
    boolean var8 = var1.isEmpty();
    int var9 = var1.size();
    int var10 = var1.size();
    int var11 = var1.size();
    int var12 = var1.size();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 1);

  }

  public void test410() throws Throwable {

    if (debug) System.out.printf("%nRingBufferMutantTest1.test410");


    at.fhhagenberg.sqe.exercise13.RingBufferMutant var1 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var1.enqueue((java.lang.Object)'#');
    int var4 = var1.size();
    var1.enqueue((java.lang.Object)true);
    int var7 = var1.size();
    java.util.Iterator var8 = var1.iterator();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var10 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var10.enqueue((java.lang.Object)'#');
    int var13 = var10.size();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var15 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var16 = var15.isEmpty();
    boolean var17 = var15.isEmpty();
    java.util.Iterator var18 = var15.iterator();
    boolean var19 = var15.isEmpty();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var21 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var21.enqueue((java.lang.Object)'#');
    java.util.Iterator var24 = var21.iterator();
    java.util.Iterator var25 = var21.iterator();
    var21.enqueue((java.lang.Object)false);
    int var28 = var21.size();
    var15.enqueue((java.lang.Object)var21);
    var10.enqueue((java.lang.Object)var21);
    java.util.Iterator var31 = var21.iterator();
    boolean var32 = var21.isEmpty();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var34 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var34.enqueue((java.lang.Object)'#');
    java.util.Iterator var37 = var34.iterator();
    java.util.Iterator var38 = var34.iterator();
    var34.enqueue((java.lang.Object)false);
    java.lang.Object var41 = var34.dequeue();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var43 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var44 = var43.isEmpty();
    boolean var45 = var43.isEmpty();
    java.util.Iterator var46 = var43.iterator();
    boolean var47 = var43.isEmpty();
    var43.enqueue((java.lang.Object)'#');
    boolean var50 = var43.isEmpty();
    int var51 = var43.size();
    java.util.Iterator var52 = var43.iterator();
    var34.enqueue((java.lang.Object)var43);
    var21.enqueue((java.lang.Object)var34);
    var1.enqueue((java.lang.Object)var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var41 + "' != '" + '#'+ "'", var41.equals('#'));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);

  }

  public void test411() throws Throwable {

    if (debug) System.out.printf("%nRingBufferMutantTest1.test411");


    at.fhhagenberg.sqe.exercise13.RingBufferMutant var1 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(4);
    boolean var2 = var1.isEmpty();
    int var3 = var1.size();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var5 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var6 = var5.isEmpty();
    boolean var7 = var5.isEmpty();
    java.util.Iterator var8 = var5.iterator();
    boolean var9 = var5.isEmpty();
    int var10 = var5.size();
    int var11 = var5.size();
    java.util.Iterator var12 = var5.iterator();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var14 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var14.enqueue((java.lang.Object)'#');
    java.util.Iterator var17 = var14.iterator();
    java.util.Iterator var18 = var14.iterator();
    java.util.Iterator var19 = var14.iterator();
    var5.enqueue((java.lang.Object)var14);
    int var21 = var14.size();
    boolean var22 = var14.isEmpty();
    boolean var23 = var14.isEmpty();
    java.util.Iterator var24 = var14.iterator();
    var1.enqueue((java.lang.Object)var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);

  }

  public void test412() throws Throwable {

    if (debug) System.out.printf("%nRingBufferMutantTest1.test412");


    at.fhhagenberg.sqe.exercise13.RingBufferMutant var1 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var2 = var1.isEmpty();
    boolean var3 = var1.isEmpty();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var5 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var5.enqueue((java.lang.Object)1.0d);
    java.util.Iterator var8 = var5.iterator();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var10 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(1);
    boolean var11 = var10.isEmpty();
    boolean var12 = var10.isEmpty();
    java.util.Iterator var13 = var10.iterator();
    var5.enqueue((java.lang.Object)var10);
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var16 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var16.enqueue((java.lang.Object)'#');
    java.util.Iterator var19 = var16.iterator();
    java.util.Iterator var20 = var16.iterator();
    var16.enqueue((java.lang.Object)false);
    int var23 = var16.size();
    boolean var24 = var16.isEmpty();
    boolean var25 = var16.isEmpty();
    boolean var26 = var16.isEmpty();
    java.lang.Object var27 = var16.dequeue();
    java.util.Iterator var28 = var16.iterator();
    var5.enqueue((java.lang.Object)var16);
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var31 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(0);
    int var32 = var31.size();
    boolean var33 = var31.isEmpty();
    boolean var34 = var31.isEmpty();
    boolean var35 = var31.isEmpty();
    var16.enqueue((java.lang.Object)var31);
    var1.enqueue((java.lang.Object)var16);
    boolean var38 = var1.isEmpty();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var40 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var40.enqueue((java.lang.Object)'#');
    int var43 = var40.size();
    var40.enqueue((java.lang.Object)true);
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var47 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var47.enqueue((java.lang.Object)'#');
    java.util.Iterator var50 = var47.iterator();
    java.util.Iterator var51 = var47.iterator();
    var47.enqueue((java.lang.Object)false);
    int var54 = var47.size();
    boolean var55 = var47.isEmpty();
    boolean var56 = var47.isEmpty();
    var47.enqueue((java.lang.Object)(short)0);
    var40.enqueue((java.lang.Object)(short)0);
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var61 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var61.enqueue((java.lang.Object)'#');
    java.util.Iterator var64 = var61.iterator();
    var61.enqueue((java.lang.Object)100.0d);
    java.util.Iterator var67 = var61.iterator();
    var40.enqueue((java.lang.Object)var61);
    java.lang.Object var69 = var40.dequeue();
    var1.enqueue(var69);
    boolean var71 = var1.isEmpty();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var27 + "' != '" + '#'+ "'", var27.equals('#'));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var69 + "' != '" + '#'+ "'", var69.equals('#'));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == false);

  }

  public void test413() throws Throwable {

    if (debug) System.out.printf("%nRingBufferMutantTest1.test413");


    at.fhhagenberg.sqe.exercise13.RingBufferMutant var1 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var2 = var1.isEmpty();
    boolean var3 = var1.isEmpty();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var5 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var5.enqueue((java.lang.Object)'#');
    java.util.Iterator var8 = var5.iterator();
    java.util.Iterator var9 = var5.iterator();
    var5.enqueue((java.lang.Object)false);
    int var12 = var5.size();
    boolean var13 = var5.isEmpty();
    java.lang.Object var14 = var5.dequeue();
    java.util.Iterator var15 = var5.iterator();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var17 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var17.enqueue((java.lang.Object)'#');
    java.util.Iterator var20 = var17.iterator();
    java.util.Iterator var21 = var17.iterator();
    java.util.Iterator var22 = var17.iterator();
    var5.enqueue((java.lang.Object)var17);
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var25 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(0);
    int var26 = var25.size();
    boolean var27 = var25.isEmpty();
    boolean var28 = var25.isEmpty();
    boolean var29 = var25.isEmpty();
    var17.enqueue((java.lang.Object)var25);
    var1.enqueue((java.lang.Object)var25);
    int var32 = var25.size();
    java.util.Iterator var33 = var25.iterator();
    int var34 = var25.size();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + '#'+ "'", var14.equals('#'));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == 0);

  }

  public void test414() throws Throwable {

    if (debug) System.out.printf("%nRingBufferMutantTest1.test414");


    at.fhhagenberg.sqe.exercise13.RingBufferMutant var1 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var1.enqueue((java.lang.Object)'#');
    java.util.Iterator var4 = var1.iterator();
    java.util.Iterator var5 = var1.iterator();
    var1.enqueue((java.lang.Object)false);
    java.lang.Object var8 = var1.dequeue();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var10 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var11 = var10.isEmpty();
    boolean var12 = var10.isEmpty();
    java.util.Iterator var13 = var10.iterator();
    boolean var14 = var10.isEmpty();
    var10.enqueue((java.lang.Object)'#');
    boolean var17 = var10.isEmpty();
    int var18 = var10.size();
    java.util.Iterator var19 = var10.iterator();
    var1.enqueue((java.lang.Object)var10);
    int var21 = var10.size();
    int var22 = var10.size();
    java.lang.Object var23 = var10.dequeue();
    java.util.Iterator var24 = var10.iterator();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + '#'+ "'", var8.equals('#'));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + '#'+ "'", var23.equals('#'));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);

  }

  public void test415() throws Throwable {

    if (debug) System.out.printf("%nRingBufferMutantTest1.test415");


    at.fhhagenberg.sqe.exercise13.RingBufferMutant var1 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var1.enqueue((java.lang.Object)1.0d);
    java.util.Iterator var4 = var1.iterator();
    boolean var5 = var1.isEmpty();
    int var6 = var1.size();
    java.util.Iterator var7 = var1.iterator();
    boolean var8 = var1.isEmpty();
    java.util.Iterator var9 = var1.iterator();
    java.lang.Object var10 = var1.dequeue();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + 1.0d+ "'", var10.equals(1.0d));

  }

  public void test416() throws Throwable {

    if (debug) System.out.printf("%nRingBufferMutantTest1.test416");


    at.fhhagenberg.sqe.exercise13.RingBufferMutant var1 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var1.enqueue((java.lang.Object)'#');
    boolean var4 = var1.isEmpty();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var6 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var7 = var6.isEmpty();
    boolean var8 = var6.isEmpty();
    int var9 = var6.size();
    java.util.Iterator var10 = var6.iterator();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var12 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var12.enqueue((java.lang.Object)'#');
    int var15 = var12.size();
    var12.enqueue((java.lang.Object)true);
    java.util.Iterator var18 = var12.iterator();
    var6.enqueue((java.lang.Object)var18);
    java.lang.Object var20 = var6.dequeue();
    var6.enqueue((java.lang.Object)10.0f);
    var1.enqueue((java.lang.Object)10.0f);
    java.lang.Object var24 = var1.dequeue();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var26 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(0);
    int var27 = var26.size();
    boolean var28 = var26.isEmpty();
    boolean var29 = var26.isEmpty();
    boolean var30 = var26.isEmpty();
    java.util.Iterator var31 = var26.iterator();
    int var32 = var26.size();
    java.util.Iterator var33 = var26.iterator();
    var1.enqueue((java.lang.Object)var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var24 + "' != '" + '#'+ "'", var24.equals('#'));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);

  }

  public void test417() throws Throwable {

    if (debug) System.out.printf("%nRingBufferMutantTest1.test417");


    at.fhhagenberg.sqe.exercise13.RingBufferMutant var1 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var2 = var1.isEmpty();
    boolean var3 = var1.isEmpty();
    int var4 = var1.size();
    java.util.Iterator var5 = var1.iterator();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var7 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var7.enqueue((java.lang.Object)'#');
    int var10 = var7.size();
    var7.enqueue((java.lang.Object)true);
    java.util.Iterator var13 = var7.iterator();
    var1.enqueue((java.lang.Object)var13);
    java.util.Iterator var15 = var1.iterator();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var17 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var18 = var17.isEmpty();
    boolean var19 = var17.isEmpty();
    boolean var20 = var17.isEmpty();
    int var21 = var17.size();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var23 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(1);
    var17.enqueue((java.lang.Object)var23);
    java.lang.Object var25 = var17.dequeue();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var27 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var28 = var27.isEmpty();
    boolean var29 = var27.isEmpty();
    boolean var30 = var27.isEmpty();
    int var31 = var27.size();
    java.util.Iterator var32 = var27.iterator();
    var17.enqueue((java.lang.Object)var32);
    var1.enqueue((java.lang.Object)var32);
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var36 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var36.enqueue((java.lang.Object)'#');
    var36.enqueue((java.lang.Object)' ');
    int var41 = var36.size();
    int var42 = var36.size();
    int var43 = var36.size();
    java.util.Iterator var44 = var36.iterator();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var46 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var46.enqueue((java.lang.Object)'#');
    java.util.Iterator var49 = var46.iterator();
    java.util.Iterator var50 = var46.iterator();
    boolean var51 = var46.isEmpty();
    int var52 = var46.size();
    java.lang.Object var53 = var46.dequeue();
    var36.enqueue(var53);
    var1.enqueue(var53);
    java.lang.Object var56 = var1.dequeue();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var53 + "' != '" + '#'+ "'", var53.equals('#'));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);

  }

  public void test418() throws Throwable {

    if (debug) System.out.printf("%nRingBufferMutantTest1.test418");


    at.fhhagenberg.sqe.exercise13.RingBufferMutant var1 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var2 = var1.isEmpty();
    boolean var3 = var1.isEmpty();
    boolean var4 = var1.isEmpty();
    int var5 = var1.size();
    int var6 = var1.size();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var8 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var9 = var8.isEmpty();
    boolean var10 = var8.isEmpty();
    java.util.Iterator var11 = var8.iterator();
    boolean var12 = var8.isEmpty();
    int var13 = var8.size();
    java.util.Iterator var14 = var8.iterator();
    int var15 = var8.size();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var17 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var17.enqueue((java.lang.Object)'#');
    java.util.Iterator var20 = var17.iterator();
    java.util.Iterator var21 = var17.iterator();
    var17.enqueue((java.lang.Object)false);
    java.lang.Object var24 = var17.dequeue();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var26 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var27 = var26.isEmpty();
    boolean var28 = var26.isEmpty();
    java.util.Iterator var29 = var26.iterator();
    boolean var30 = var26.isEmpty();
    var26.enqueue((java.lang.Object)'#');
    boolean var33 = var26.isEmpty();
    int var34 = var26.size();
    java.util.Iterator var35 = var26.iterator();
    var17.enqueue((java.lang.Object)var26);
    int var37 = var26.size();
    int var38 = var26.size();
    var8.enqueue((java.lang.Object)var26);
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var41 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var42 = var41.isEmpty();
    boolean var43 = var41.isEmpty();
    int var44 = var41.size();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var46 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var47 = var46.isEmpty();
    boolean var48 = var46.isEmpty();
    var41.enqueue((java.lang.Object)var48);
    boolean var50 = var41.isEmpty();
    var26.enqueue((java.lang.Object)var50);
    boolean var52 = var26.isEmpty();
    var1.enqueue((java.lang.Object)var26);
    int var54 = var1.size();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var24 + "' != '" + '#'+ "'", var24.equals('#'));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == 1);

  }

  public void test419() throws Throwable {

    if (debug) System.out.printf("%nRingBufferMutantTest1.test419");


    at.fhhagenberg.sqe.exercise13.RingBufferMutant var1 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var2 = var1.isEmpty();
    boolean var3 = var1.isEmpty();
    java.util.Iterator var4 = var1.iterator();
    boolean var5 = var1.isEmpty();
    int var6 = var1.size();
    int var7 = var1.size();
    java.util.Iterator var8 = var1.iterator();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var10 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var10.enqueue((java.lang.Object)'#');
    java.util.Iterator var13 = var10.iterator();
    java.util.Iterator var14 = var10.iterator();
    var10.enqueue((java.lang.Object)false);
    java.lang.Object var17 = var10.dequeue();
    var1.enqueue((java.lang.Object)var10);
    int var19 = var1.size();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + '#'+ "'", var17.equals('#'));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 1);

  }

  public void test420() throws Throwable {

    if (debug) System.out.printf("%nRingBufferMutantTest1.test420");


    at.fhhagenberg.sqe.exercise13.RingBufferMutant var1 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var1.enqueue((java.lang.Object)'#');
    int var4 = var1.size();
    java.lang.Object var5 = var1.dequeue();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var7 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var7.enqueue((java.lang.Object)'#');
    java.util.Iterator var10 = var7.iterator();
    java.util.Iterator var11 = var7.iterator();
    var7.enqueue((java.lang.Object)false);
    int var14 = var7.size();
    boolean var15 = var7.isEmpty();
    boolean var16 = var7.isEmpty();
    boolean var17 = var7.isEmpty();
    int var18 = var7.size();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var20 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(100);
    int var21 = var20.size();
    java.util.Iterator var22 = var20.iterator();
    var7.enqueue((java.lang.Object)var20);
    var1.enqueue((java.lang.Object)var7);
    boolean var25 = var7.isEmpty();
    java.util.Iterator var26 = var7.iterator();
    int var27 = var7.size();
    int var28 = var7.size();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var30 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var31 = var30.isEmpty();
    boolean var32 = var30.isEmpty();
    java.util.Iterator var33 = var30.iterator();
    boolean var34 = var30.isEmpty();
    var30.enqueue((java.lang.Object)'#');
    boolean var37 = var30.isEmpty();
    boolean var38 = var30.isEmpty();
    int var39 = var30.size();
    java.lang.Object var40 = var30.dequeue();
    var7.enqueue((java.lang.Object)var30);
    java.util.Iterator var42 = var30.iterator();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + '#'+ "'", var5.equals('#'));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var40 + "' != '" + '#'+ "'", var40.equals('#'));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);

  }

  public void test421() throws Throwable {

    if (debug) System.out.printf("%nRingBufferMutantTest1.test421");


    at.fhhagenberg.sqe.exercise13.RingBufferMutant var1 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(0);
    int var2 = var1.size();
    boolean var3 = var1.isEmpty();
    boolean var4 = var1.isEmpty();
    int var5 = var1.size();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var7 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var8 = var7.isEmpty();
    boolean var9 = var7.isEmpty();
    int var10 = var7.size();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var12 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var13 = var12.isEmpty();
    boolean var14 = var12.isEmpty();
    var7.enqueue((java.lang.Object)var14);
    boolean var16 = var7.isEmpty();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var18 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var18.enqueue((java.lang.Object)'#');
    java.util.Iterator var21 = var18.iterator();
    java.util.Iterator var22 = var18.iterator();
    java.util.Iterator var23 = var18.iterator();
    boolean var24 = var18.isEmpty();
    java.util.Iterator var25 = var18.iterator();
    int var26 = var18.size();
    int var27 = var18.size();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var29 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var29.enqueue((java.lang.Object)'#');
    int var32 = var29.size();
    var29.enqueue((java.lang.Object)true);
    java.util.Iterator var35 = var29.iterator();
    var18.enqueue((java.lang.Object)var29);
    java.util.Iterator var37 = var18.iterator();
    var7.enqueue((java.lang.Object)var18);
    int var39 = var18.size();
    java.util.Iterator var40 = var18.iterator();
    java.util.Iterator var41 = var18.iterator();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var1.enqueue((java.lang.Object)var18);
      fail("Expected exception of type java.lang.RuntimeException");
    } catch (java.lang.RuntimeException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);

  }

  public void test422() throws Throwable {

    if (debug) System.out.printf("%nRingBufferMutantTest1.test422");


    at.fhhagenberg.sqe.exercise13.RingBufferMutant var1 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var2 = var1.isEmpty();
    boolean var3 = var1.isEmpty();
    java.util.Iterator var4 = var1.iterator();
    boolean var5 = var1.isEmpty();
    int var6 = var1.size();
    java.util.Iterator var7 = var1.iterator();
    int var8 = var1.size();
    boolean var9 = var1.isEmpty();
    int var10 = var1.size();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var12 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var13 = var12.isEmpty();
    boolean var14 = var12.isEmpty();
    java.util.Iterator var15 = var12.iterator();
    boolean var16 = var12.isEmpty();
    int var17 = var12.size();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var19 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var19.enqueue((java.lang.Object)'#');
    int var22 = var19.size();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var24 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var25 = var24.isEmpty();
    boolean var26 = var24.isEmpty();
    java.util.Iterator var27 = var24.iterator();
    boolean var28 = var24.isEmpty();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var30 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var30.enqueue((java.lang.Object)'#');
    java.util.Iterator var33 = var30.iterator();
    java.util.Iterator var34 = var30.iterator();
    var30.enqueue((java.lang.Object)false);
    int var37 = var30.size();
    var24.enqueue((java.lang.Object)var30);
    var19.enqueue((java.lang.Object)var30);
    java.util.Iterator var40 = var30.iterator();
    java.util.Iterator var41 = var30.iterator();
    java.util.Iterator var42 = var30.iterator();
    var12.enqueue((java.lang.Object)var30);
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var45 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var45.enqueue((java.lang.Object)1.0d);
    java.util.Iterator var48 = var45.iterator();
    boolean var49 = var45.isEmpty();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var51 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var52 = var51.isEmpty();
    boolean var53 = var51.isEmpty();
    java.util.Iterator var54 = var51.iterator();
    boolean var55 = var51.isEmpty();
    var51.enqueue((java.lang.Object)'#');
    boolean var58 = var51.isEmpty();
    int var59 = var51.size();
    java.util.Iterator var60 = var51.iterator();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var62 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var62.enqueue((java.lang.Object)'#');
    java.util.Iterator var65 = var62.iterator();
    var62.enqueue((java.lang.Object)100.0d);
    boolean var68 = var62.isEmpty();
    java.lang.Object var69 = var62.dequeue();
    var51.enqueue(var69);
    java.util.Iterator var71 = var51.iterator();
    var45.enqueue((java.lang.Object)var51);
    var30.enqueue((java.lang.Object)var51);
    java.lang.Object var74 = var51.dequeue();
    var1.enqueue(var74);
    java.util.Iterator var76 = var1.iterator();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var78 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var78.enqueue((java.lang.Object)'#');
    java.util.Iterator var81 = var78.iterator();
    java.util.Iterator var82 = var78.iterator();
    var78.enqueue((java.lang.Object)false);
    int var85 = var78.size();
    boolean var86 = var78.isEmpty();
    boolean var87 = var78.isEmpty();
    boolean var88 = var78.isEmpty();
    boolean var89 = var78.isEmpty();
    var1.enqueue((java.lang.Object)var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var69 + "' != '" + '#'+ "'", var69.equals('#'));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var74 + "' != '" + '#'+ "'", var74.equals('#'));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var85 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var86 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var87 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var88 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var89 == false);

  }

  public void test423() throws Throwable {

    if (debug) System.out.printf("%nRingBufferMutantTest1.test423");


    at.fhhagenberg.sqe.exercise13.RingBufferMutant var1 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var1.enqueue((java.lang.Object)'#');
    var1.enqueue((java.lang.Object)' ');
    int var6 = var1.size();
    var1.enqueue((java.lang.Object)1);
    boolean var9 = var1.isEmpty();
    java.lang.Object var10 = var1.dequeue();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var12 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var13 = var12.isEmpty();
    boolean var14 = var12.isEmpty();
    java.util.Iterator var15 = var12.iterator();
    boolean var16 = var12.isEmpty();
    var12.enqueue((java.lang.Object)'#');
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var20 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var21 = var20.isEmpty();
    boolean var22 = var20.isEmpty();
    java.util.Iterator var23 = var20.iterator();
    boolean var24 = var20.isEmpty();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var26 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var26.enqueue((java.lang.Object)'#');
    java.util.Iterator var29 = var26.iterator();
    java.util.Iterator var30 = var26.iterator();
    var26.enqueue((java.lang.Object)false);
    int var33 = var26.size();
    var20.enqueue((java.lang.Object)var26);
    int var35 = var20.size();
    var12.enqueue((java.lang.Object)var35);
    int var37 = var12.size();
    java.lang.Object var38 = var12.dequeue();
    var1.enqueue(var38);
    java.util.Iterator var40 = var1.iterator();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var42 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var43 = var42.isEmpty();
    boolean var44 = var42.isEmpty();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var46 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var46.enqueue((java.lang.Object)'#');
    java.util.Iterator var49 = var46.iterator();
    java.util.Iterator var50 = var46.iterator();
    var46.enqueue((java.lang.Object)false);
    int var53 = var46.size();
    boolean var54 = var46.isEmpty();
    java.lang.Object var55 = var46.dequeue();
    java.util.Iterator var56 = var46.iterator();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var58 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var58.enqueue((java.lang.Object)'#');
    java.util.Iterator var61 = var58.iterator();
    java.util.Iterator var62 = var58.iterator();
    java.util.Iterator var63 = var58.iterator();
    var46.enqueue((java.lang.Object)var58);
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var66 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(0);
    int var67 = var66.size();
    boolean var68 = var66.isEmpty();
    boolean var69 = var66.isEmpty();
    boolean var70 = var66.isEmpty();
    var58.enqueue((java.lang.Object)var66);
    var42.enqueue((java.lang.Object)var66);
    int var73 = var42.size();
    boolean var74 = var42.isEmpty();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var76 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var76.enqueue((java.lang.Object)1.0d);
    java.util.Iterator var79 = var76.iterator();
    boolean var80 = var76.isEmpty();
    boolean var81 = var76.isEmpty();
    java.util.Iterator var82 = var76.iterator();
    java.lang.Object var83 = var76.dequeue();
    var42.enqueue((java.lang.Object)var76);
    var1.enqueue((java.lang.Object)var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + '#'+ "'", var10.equals('#'));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var38 + "' != '" + '#'+ "'", var38.equals('#'));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var55 + "' != '" + '#'+ "'", var55.equals('#'));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var80 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var81 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var83 + "' != '" + 1.0d+ "'", var83.equals(1.0d));

  }

  public void test424() throws Throwable {

    if (debug) System.out.printf("%nRingBufferMutantTest1.test424");


    at.fhhagenberg.sqe.exercise13.RingBufferMutant var1 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var1.enqueue((java.lang.Object)'#');
    java.util.Iterator var4 = var1.iterator();
    java.util.Iterator var5 = var1.iterator();
    var1.enqueue((java.lang.Object)false);
    int var8 = var1.size();
    boolean var9 = var1.isEmpty();
    java.lang.Object var10 = var1.dequeue();
    java.util.Iterator var11 = var1.iterator();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var13 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var13.enqueue((java.lang.Object)'#');
    java.util.Iterator var16 = var13.iterator();
    java.util.Iterator var17 = var13.iterator();
    java.util.Iterator var18 = var13.iterator();
    var1.enqueue((java.lang.Object)var13);
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var21 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(0);
    int var22 = var21.size();
    boolean var23 = var21.isEmpty();
    boolean var24 = var21.isEmpty();
    boolean var25 = var21.isEmpty();
    var13.enqueue((java.lang.Object)var21);
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var28 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var28.enqueue((java.lang.Object)'#');
    int var31 = var28.size();
    int var32 = var28.size();
    int var33 = var28.size();
    int var34 = var28.size();
    java.util.Iterator var35 = var28.iterator();
    var13.enqueue((java.lang.Object)var28);
    boolean var37 = var28.isEmpty();
    boolean var38 = var28.isEmpty();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + '#'+ "'", var10.equals('#'));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);

  }

  public void test425() throws Throwable {

    if (debug) System.out.printf("%nRingBufferMutantTest1.test425");


    at.fhhagenberg.sqe.exercise13.RingBufferMutant var1 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var2 = var1.isEmpty();
    boolean var3 = var1.isEmpty();
    java.util.Iterator var4 = var1.iterator();
    boolean var5 = var1.isEmpty();
    var1.enqueue((java.lang.Object)'#');
    boolean var8 = var1.isEmpty();
    int var9 = var1.size();
    boolean var10 = var1.isEmpty();
    java.util.Iterator var11 = var1.iterator();
    boolean var12 = var1.isEmpty();
    java.util.Iterator var13 = var1.iterator();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);

  }

  public void test426() throws Throwable {

    if (debug) System.out.printf("%nRingBufferMutantTest1.test426");


    at.fhhagenberg.sqe.exercise13.RingBufferMutant var1 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var1.enqueue((java.lang.Object)'#');
    int var4 = var1.size();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var6 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var7 = var6.isEmpty();
    boolean var8 = var6.isEmpty();
    java.util.Iterator var9 = var6.iterator();
    boolean var10 = var6.isEmpty();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var12 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var12.enqueue((java.lang.Object)'#');
    java.util.Iterator var15 = var12.iterator();
    java.util.Iterator var16 = var12.iterator();
    var12.enqueue((java.lang.Object)false);
    int var19 = var12.size();
    var6.enqueue((java.lang.Object)var12);
    var1.enqueue((java.lang.Object)var12);
    int var22 = var12.size();
    int var23 = var12.size();
    boolean var24 = var12.isEmpty();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);

  }

  public void test427() throws Throwable {

    if (debug) System.out.printf("%nRingBufferMutantTest1.test427");


    at.fhhagenberg.sqe.exercise13.RingBufferMutant var1 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var2 = var1.isEmpty();
    boolean var3 = var1.isEmpty();
    java.util.Iterator var4 = var1.iterator();
    boolean var5 = var1.isEmpty();
    var1.enqueue((java.lang.Object)'#');
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var9 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var10 = var9.isEmpty();
    boolean var11 = var9.isEmpty();
    java.util.Iterator var12 = var9.iterator();
    boolean var13 = var9.isEmpty();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var15 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var15.enqueue((java.lang.Object)'#');
    java.util.Iterator var18 = var15.iterator();
    java.util.Iterator var19 = var15.iterator();
    var15.enqueue((java.lang.Object)false);
    int var22 = var15.size();
    var9.enqueue((java.lang.Object)var15);
    int var24 = var9.size();
    var1.enqueue((java.lang.Object)var24);
    int var26 = var1.size();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var28 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var29 = var28.isEmpty();
    boolean var30 = var28.isEmpty();
    java.util.Iterator var31 = var28.iterator();
    boolean var32 = var28.isEmpty();
    var28.enqueue((java.lang.Object)1.0d);
    java.util.Iterator var35 = var28.iterator();
    boolean var36 = var28.isEmpty();
    var1.enqueue((java.lang.Object)var36);
    boolean var38 = var1.isEmpty();
    boolean var39 = var1.isEmpty();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var41 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var42 = var41.isEmpty();
    boolean var43 = var41.isEmpty();
    java.util.Iterator var44 = var41.iterator();
    boolean var45 = var41.isEmpty();
    var41.enqueue((java.lang.Object)'#');
    boolean var48 = var41.isEmpty();
    int var49 = var41.size();
    java.util.Iterator var50 = var41.iterator();
    boolean var51 = var41.isEmpty();
    java.util.Iterator var52 = var41.iterator();
    int var53 = var41.size();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var55 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var55.enqueue((java.lang.Object)'#');
    int var58 = var55.size();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var60 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var61 = var60.isEmpty();
    boolean var62 = var60.isEmpty();
    java.util.Iterator var63 = var60.iterator();
    boolean var64 = var60.isEmpty();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var66 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var66.enqueue((java.lang.Object)'#');
    java.util.Iterator var69 = var66.iterator();
    java.util.Iterator var70 = var66.iterator();
    var66.enqueue((java.lang.Object)false);
    int var73 = var66.size();
    var60.enqueue((java.lang.Object)var66);
    var55.enqueue((java.lang.Object)var66);
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var77 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var77.enqueue((java.lang.Object)1.0d);
    java.util.Iterator var80 = var77.iterator();
    boolean var81 = var77.isEmpty();
    boolean var82 = var77.isEmpty();
    boolean var83 = var77.isEmpty();
    var55.enqueue((java.lang.Object)var77);
    var41.enqueue((java.lang.Object)var55);
    boolean var86 = var41.isEmpty();
    int var87 = var41.size();
    java.util.Iterator var88 = var41.iterator();
    java.lang.Object var89 = var41.dequeue();
    var1.enqueue((java.lang.Object)var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var81 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var82 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var83 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var86 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var87 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var88);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var89 + "' != '" + '#'+ "'", var89.equals('#'));

  }

  public void test428() throws Throwable {

    if (debug) System.out.printf("%nRingBufferMutantTest1.test428");


    at.fhhagenberg.sqe.exercise13.RingBufferMutant var1 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var2 = var1.isEmpty();
    boolean var3 = var1.isEmpty();
    int var4 = var1.size();
    int var5 = var1.size();
    boolean var6 = var1.isEmpty();
    int var7 = var1.size();
    boolean var8 = var1.isEmpty();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);

  }

  public void test429() throws Throwable {

    if (debug) System.out.printf("%nRingBufferMutantTest1.test429");


    at.fhhagenberg.sqe.exercise13.RingBufferMutant var1 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var2 = var1.isEmpty();
    boolean var3 = var1.isEmpty();
    java.util.Iterator var4 = var1.iterator();
    boolean var5 = var1.isEmpty();
    int var6 = var1.size();
    int var7 = var1.size();
    java.util.Iterator var8 = var1.iterator();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var10 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var10.enqueue((java.lang.Object)'#');
    java.util.Iterator var13 = var10.iterator();
    java.util.Iterator var14 = var10.iterator();
    java.util.Iterator var15 = var10.iterator();
    var1.enqueue((java.lang.Object)var10);
    int var17 = var10.size();
    boolean var18 = var10.isEmpty();
    java.lang.Object var19 = var10.dequeue();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + '#'+ "'", var19.equals('#'));

  }

  public void test430() throws Throwable {

    if (debug) System.out.printf("%nRingBufferMutantTest1.test430");


    at.fhhagenberg.sqe.exercise13.RingBufferMutant var1 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var1.enqueue((java.lang.Object)'#');
    int var4 = var1.size();
    var1.enqueue((java.lang.Object)true);
    java.util.Iterator var7 = var1.iterator();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var9 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(100);
    var1.enqueue((java.lang.Object)100);
    int var11 = var1.size();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var13 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var14 = var13.isEmpty();
    boolean var15 = var13.isEmpty();
    java.util.Iterator var16 = var13.iterator();
    boolean var17 = var13.isEmpty();
    var13.enqueue((java.lang.Object)'#');
    boolean var20 = var13.isEmpty();
    int var21 = var13.size();
    java.util.Iterator var22 = var13.iterator();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var24 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var24.enqueue((java.lang.Object)'#');
    java.util.Iterator var27 = var24.iterator();
    var24.enqueue((java.lang.Object)100.0d);
    boolean var30 = var24.isEmpty();
    java.lang.Object var31 = var24.dequeue();
    var13.enqueue(var31);
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var34 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var34.enqueue((java.lang.Object)'#');
    java.util.Iterator var37 = var34.iterator();
    var13.enqueue((java.lang.Object)var34);
    boolean var39 = var34.isEmpty();
    int var40 = var34.size();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var42 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var42.enqueue((java.lang.Object)'#');
    java.util.Iterator var45 = var42.iterator();
    java.util.Iterator var46 = var42.iterator();
    var42.enqueue((java.lang.Object)false);
    int var49 = var42.size();
    boolean var50 = var42.isEmpty();
    java.lang.Object var51 = var42.dequeue();
    java.util.Iterator var52 = var42.iterator();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var54 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var54.enqueue((java.lang.Object)'#');
    java.util.Iterator var57 = var54.iterator();
    java.util.Iterator var58 = var54.iterator();
    java.util.Iterator var59 = var54.iterator();
    var42.enqueue((java.lang.Object)var54);
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var62 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(0);
    int var63 = var62.size();
    boolean var64 = var62.isEmpty();
    boolean var65 = var62.isEmpty();
    boolean var66 = var62.isEmpty();
    var54.enqueue((java.lang.Object)var62);
    java.util.Iterator var68 = var54.iterator();
    var34.enqueue((java.lang.Object)var68);
    java.lang.Object var70 = var34.dequeue();
    java.util.Iterator var71 = var34.iterator();
    java.util.Iterator var72 = var34.iterator();
    var1.enqueue((java.lang.Object)var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var31 + "' != '" + '#'+ "'", var31.equals('#'));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var51 + "' != '" + '#'+ "'", var51.equals('#'));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var70 + "' != '" + '#'+ "'", var70.equals('#'));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);

  }

  public void test431() throws Throwable {

    if (debug) System.out.printf("%nRingBufferMutantTest1.test431");


    at.fhhagenberg.sqe.exercise13.RingBufferMutant var1 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var1.enqueue((java.lang.Object)'#');
    java.util.Iterator var4 = var1.iterator();
    var1.enqueue((java.lang.Object)100.0d);
    java.util.Iterator var7 = var1.iterator();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var9 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(0);
    java.util.Iterator var10 = var9.iterator();
    java.util.Iterator var11 = var9.iterator();
    var1.enqueue((java.lang.Object)var9);
    boolean var13 = var9.isEmpty();
    boolean var14 = var9.isEmpty();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);

  }

  public void test432() throws Throwable {

    if (debug) System.out.printf("%nRingBufferMutantTest1.test432");


    at.fhhagenberg.sqe.exercise13.RingBufferMutant var1 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var1.enqueue((java.lang.Object)'#');
    var1.enqueue((java.lang.Object)' ');
    int var6 = var1.size();
    var1.enqueue((java.lang.Object)1);
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var10 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var10.enqueue((java.lang.Object)'#');
    java.util.Iterator var13 = var10.iterator();
    java.util.Iterator var14 = var10.iterator();
    var10.enqueue((java.lang.Object)false);
    int var17 = var10.size();
    boolean var18 = var10.isEmpty();
    int var19 = var10.size();
    java.lang.Object var20 = new java.lang.Object();
    var10.enqueue(var20);
    var1.enqueue((java.lang.Object)var10);
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var24 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var24.enqueue((java.lang.Object)'#');
    int var27 = var24.size();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var29 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var30 = var29.isEmpty();
    boolean var31 = var29.isEmpty();
    java.util.Iterator var32 = var29.iterator();
    boolean var33 = var29.isEmpty();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var35 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var35.enqueue((java.lang.Object)'#');
    java.util.Iterator var38 = var35.iterator();
    java.util.Iterator var39 = var35.iterator();
    var35.enqueue((java.lang.Object)false);
    int var42 = var35.size();
    var29.enqueue((java.lang.Object)var35);
    var24.enqueue((java.lang.Object)var35);
    java.util.Iterator var45 = var35.iterator();
    java.util.Iterator var46 = var35.iterator();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var48 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var49 = var48.isEmpty();
    boolean var50 = var48.isEmpty();
    java.util.Iterator var51 = var48.iterator();
    boolean var52 = var48.isEmpty();
    var48.enqueue((java.lang.Object)'#');
    int var55 = var48.size();
    var35.enqueue((java.lang.Object)var55);
    boolean var57 = var35.isEmpty();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var59 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var59.enqueue((java.lang.Object)'#');
    int var62 = var59.size();
    int var63 = var59.size();
    java.util.Iterator var64 = var59.iterator();
    java.util.Iterator var65 = var59.iterator();
    var35.enqueue((java.lang.Object)var59);
    boolean var67 = var59.isEmpty();
    java.lang.Object var68 = var59.dequeue();
    var10.enqueue((java.lang.Object)var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var68 + "' != '" + '#'+ "'", var68.equals('#'));

  }

  public void test433() throws Throwable {

    if (debug) System.out.printf("%nRingBufferMutantTest1.test433");


    at.fhhagenberg.sqe.exercise13.RingBufferMutant var1 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var2 = var1.isEmpty();
    boolean var3 = var1.isEmpty();
    boolean var4 = var1.isEmpty();
    int var5 = var1.size();
    boolean var6 = var1.isEmpty();
    int var7 = var1.size();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0);

  }

  public void test434() throws Throwable {

    if (debug) System.out.printf("%nRingBufferMutantTest1.test434");


    at.fhhagenberg.sqe.exercise13.RingBufferMutant var1 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var2 = var1.isEmpty();
    boolean var3 = var1.isEmpty();
    java.util.Iterator var4 = var1.iterator();
    boolean var5 = var1.isEmpty();
    var1.enqueue((java.lang.Object)'#');
    boolean var8 = var1.isEmpty();
    int var9 = var1.size();
    java.util.Iterator var10 = var1.iterator();
    boolean var11 = var1.isEmpty();
    java.util.Iterator var12 = var1.iterator();
    boolean var13 = var1.isEmpty();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var15 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var15.enqueue((java.lang.Object)'#');
    java.util.Iterator var18 = var15.iterator();
    java.util.Iterator var19 = var15.iterator();
    var15.enqueue((java.lang.Object)false);
    java.lang.Object var22 = var15.dequeue();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var24 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var25 = var24.isEmpty();
    boolean var26 = var24.isEmpty();
    java.util.Iterator var27 = var24.iterator();
    boolean var28 = var24.isEmpty();
    var24.enqueue((java.lang.Object)'#');
    boolean var31 = var24.isEmpty();
    int var32 = var24.size();
    java.util.Iterator var33 = var24.iterator();
    var15.enqueue((java.lang.Object)var24);
    java.util.Iterator var35 = var15.iterator();
    var1.enqueue((java.lang.Object)var15);
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var38 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var38.enqueue((java.lang.Object)1.0d);
    java.util.Iterator var41 = var38.iterator();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var43 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(1);
    boolean var44 = var43.isEmpty();
    boolean var45 = var43.isEmpty();
    java.util.Iterator var46 = var43.iterator();
    var38.enqueue((java.lang.Object)var43);
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var49 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var49.enqueue((java.lang.Object)'#');
    java.util.Iterator var52 = var49.iterator();
    java.util.Iterator var53 = var49.iterator();
    var49.enqueue((java.lang.Object)false);
    int var56 = var49.size();
    boolean var57 = var49.isEmpty();
    boolean var58 = var49.isEmpty();
    boolean var59 = var49.isEmpty();
    java.lang.Object var60 = var49.dequeue();
    java.util.Iterator var61 = var49.iterator();
    var38.enqueue((java.lang.Object)var49);
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var64 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var64.enqueue((java.lang.Object)'#');
    int var67 = var64.size();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var69 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var70 = var69.isEmpty();
    boolean var71 = var69.isEmpty();
    java.util.Iterator var72 = var69.iterator();
    boolean var73 = var69.isEmpty();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var75 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var75.enqueue((java.lang.Object)'#');
    java.util.Iterator var78 = var75.iterator();
    java.util.Iterator var79 = var75.iterator();
    var75.enqueue((java.lang.Object)false);
    int var82 = var75.size();
    var69.enqueue((java.lang.Object)var75);
    var64.enqueue((java.lang.Object)var75);
    java.util.Iterator var85 = var64.iterator();
    java.util.Iterator var86 = var64.iterator();
    var38.enqueue((java.lang.Object)var64);
    java.util.Iterator var88 = var64.iterator();
    boolean var89 = var64.isEmpty();
    java.util.Iterator var90 = var64.iterator();
    var1.enqueue((java.lang.Object)var64);
    int var92 = var1.size();
    int var93 = var1.size();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var22 + "' != '" + '#'+ "'", var22.equals('#'));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var60 + "' != '" + '#'+ "'", var60.equals('#'));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var82 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var85);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var86);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var88);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var89 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var90);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var92 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var93 == 3);

  }

  public void test435() throws Throwable {

    if (debug) System.out.printf("%nRingBufferMutantTest1.test435");


    at.fhhagenberg.sqe.exercise13.RingBufferMutant var1 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(4);
    int var2 = var1.size();
    boolean var3 = var1.isEmpty();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);

  }

  public void test436() throws Throwable {

    if (debug) System.out.printf("%nRingBufferMutantTest1.test436");


    at.fhhagenberg.sqe.exercise13.RingBufferMutant var1 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var1.enqueue((java.lang.Object)1.0d);
    int var4 = var1.size();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var6 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var7 = var6.isEmpty();
    boolean var8 = var6.isEmpty();
    java.util.Iterator var9 = var6.iterator();
    boolean var10 = var6.isEmpty();
    java.util.Iterator var11 = var6.iterator();
    int var12 = var6.size();
    var1.enqueue((java.lang.Object)var6);
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var15 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(100);
    int var16 = var15.size();
    int var17 = var15.size();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var19 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var20 = var19.isEmpty();
    boolean var21 = var19.isEmpty();
    java.util.Iterator var22 = var19.iterator();
    boolean var23 = var19.isEmpty();
    java.util.Iterator var24 = var19.iterator();
    var15.enqueue((java.lang.Object)var24);
    java.util.Iterator var26 = var15.iterator();
    java.util.Iterator var27 = var15.iterator();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var29 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(0);
    java.util.Iterator var30 = var29.iterator();
    java.util.Iterator var31 = var29.iterator();
    var15.enqueue((java.lang.Object)var29);
    java.util.Iterator var33 = var15.iterator();
    var1.enqueue((java.lang.Object)var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);

  }

  public void test437() throws Throwable {

    if (debug) System.out.printf("%nRingBufferMutantTest1.test437");


    at.fhhagenberg.sqe.exercise13.RingBufferMutant var1 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var2 = var1.isEmpty();
    boolean var3 = var1.isEmpty();
    java.util.Iterator var4 = var1.iterator();
    boolean var5 = var1.isEmpty();
    var1.enqueue((java.lang.Object)'#');
    java.util.Iterator var8 = var1.iterator();
    boolean var9 = var1.isEmpty();
    java.util.Iterator var10 = var1.iterator();
    java.util.Iterator var11 = var1.iterator();
    int var12 = var1.size();
    boolean var13 = var1.isEmpty();
    int var14 = var1.size();
    java.lang.Object var15 = var1.dequeue();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var15 + "' != '" + '#'+ "'", var15.equals('#'));

  }

  public void test438() throws Throwable {

    if (debug) System.out.printf("%nRingBufferMutantTest1.test438");


    at.fhhagenberg.sqe.exercise13.RingBufferMutant var1 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var2 = var1.isEmpty();
    boolean var3 = var1.isEmpty();
    java.util.Iterator var4 = var1.iterator();
    boolean var5 = var1.isEmpty();
    int var6 = var1.size();
    int var7 = var1.size();
    java.util.Iterator var8 = var1.iterator();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var10 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var10.enqueue((java.lang.Object)'#');
    java.util.Iterator var13 = var10.iterator();
    java.util.Iterator var14 = var10.iterator();
    java.util.Iterator var15 = var10.iterator();
    var1.enqueue((java.lang.Object)var10);
    int var17 = var10.size();
    boolean var18 = var10.isEmpty();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var20 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var20.enqueue((java.lang.Object)'#');
    java.util.Iterator var23 = var20.iterator();
    java.util.Iterator var24 = var20.iterator();
    var20.enqueue((java.lang.Object)false);
    java.lang.Object var27 = var20.dequeue();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var29 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var30 = var29.isEmpty();
    boolean var31 = var29.isEmpty();
    java.util.Iterator var32 = var29.iterator();
    boolean var33 = var29.isEmpty();
    var29.enqueue((java.lang.Object)'#');
    boolean var36 = var29.isEmpty();
    int var37 = var29.size();
    java.util.Iterator var38 = var29.iterator();
    var20.enqueue((java.lang.Object)var29);
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var41 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var42 = var41.isEmpty();
    boolean var43 = var41.isEmpty();
    java.util.Iterator var44 = var41.iterator();
    boolean var45 = var41.isEmpty();
    int var46 = var41.size();
    int var47 = var41.size();
    java.util.Iterator var48 = var41.iterator();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var50 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var50.enqueue((java.lang.Object)'#');
    java.util.Iterator var53 = var50.iterator();
    java.util.Iterator var54 = var50.iterator();
    var50.enqueue((java.lang.Object)false);
    java.lang.Object var57 = var50.dequeue();
    var41.enqueue((java.lang.Object)var50);
    java.util.Iterator var59 = var41.iterator();
    var20.enqueue((java.lang.Object)var59);
    java.util.Iterator var61 = var20.iterator();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var63 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(1);
    java.util.Iterator var64 = var63.iterator();
    java.util.Iterator var65 = var63.iterator();
    java.util.Iterator var66 = var63.iterator();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var68 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var69 = var68.isEmpty();
    boolean var70 = var68.isEmpty();
    java.util.Iterator var71 = var68.iterator();
    boolean var72 = var68.isEmpty();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var74 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var74.enqueue((java.lang.Object)'#');
    java.util.Iterator var77 = var74.iterator();
    java.util.Iterator var78 = var74.iterator();
    var74.enqueue((java.lang.Object)false);
    int var81 = var74.size();
    var68.enqueue((java.lang.Object)var74);
    boolean var83 = var74.isEmpty();
    var63.enqueue((java.lang.Object)var74);
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var86 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(1);
    java.util.Iterator var87 = var86.iterator();
    var74.enqueue((java.lang.Object)var86);
    java.util.Iterator var89 = var74.iterator();
    var20.enqueue((java.lang.Object)var74);
    java.util.Iterator var91 = var74.iterator();
    var10.enqueue((java.lang.Object)var91);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var27 + "' != '" + '#'+ "'", var27.equals('#'));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var57 + "' != '" + '#'+ "'", var57.equals('#'));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var81 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var83 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var87);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var89);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var91);

  }

  public void test439() throws Throwable {

    if (debug) System.out.printf("%nRingBufferMutantTest1.test439");


    at.fhhagenberg.sqe.exercise13.RingBufferMutant var1 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var1.enqueue((java.lang.Object)'#');
    int var4 = var1.size();
    int var5 = var1.size();
    java.util.Iterator var6 = var1.iterator();
    java.util.Iterator var7 = var1.iterator();
    java.lang.Object var8 = var1.dequeue();
    java.util.Iterator var9 = var1.iterator();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + '#'+ "'", var8.equals('#'));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);

  }

  public void test440() throws Throwable {

    if (debug) System.out.printf("%nRingBufferMutantTest1.test440");


    at.fhhagenberg.sqe.exercise13.RingBufferMutant var1 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var1.enqueue((java.lang.Object)'#');
    var1.enqueue((java.lang.Object)' ');
    int var6 = var1.size();
    java.util.Iterator var7 = var1.iterator();
    boolean var8 = var1.isEmpty();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var10 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var11 = var10.isEmpty();
    boolean var12 = var10.isEmpty();
    java.util.Iterator var13 = var10.iterator();
    boolean var14 = var10.isEmpty();
    java.util.Iterator var15 = var10.iterator();
    int var16 = var10.size();
    var1.enqueue((java.lang.Object)var16);
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var19 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var19.enqueue((java.lang.Object)1.0d);
    java.util.Iterator var22 = var19.iterator();
    var1.enqueue((java.lang.Object)var22);
    boolean var24 = var1.isEmpty();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var26 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var26.enqueue((java.lang.Object)'#');
    int var29 = var26.size();
    int var30 = var26.size();
    java.lang.Object var31 = var26.dequeue();
    java.util.Iterator var32 = var26.iterator();
    java.util.Iterator var33 = var26.iterator();
    var1.enqueue((java.lang.Object)var33);
    int var35 = var1.size();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var31 + "' != '" + '#'+ "'", var31.equals('#'));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 5);

  }

  public void test441() throws Throwable {

    if (debug) System.out.printf("%nRingBufferMutantTest1.test441");


    at.fhhagenberg.sqe.exercise13.RingBufferMutant var1 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var2 = var1.isEmpty();
    boolean var3 = var1.isEmpty();
    java.util.Iterator var4 = var1.iterator();
    boolean var5 = var1.isEmpty();
    var1.enqueue((java.lang.Object)'#');
    boolean var8 = var1.isEmpty();
    int var9 = var1.size();
    java.util.Iterator var10 = var1.iterator();
    boolean var11 = var1.isEmpty();
    java.util.Iterator var12 = var1.iterator();
    boolean var13 = var1.isEmpty();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var15 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var15.enqueue((java.lang.Object)'#');
    java.util.Iterator var18 = var15.iterator();
    java.util.Iterator var19 = var15.iterator();
    var15.enqueue((java.lang.Object)false);
    java.lang.Object var22 = var15.dequeue();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var24 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var25 = var24.isEmpty();
    boolean var26 = var24.isEmpty();
    java.util.Iterator var27 = var24.iterator();
    boolean var28 = var24.isEmpty();
    var24.enqueue((java.lang.Object)'#');
    boolean var31 = var24.isEmpty();
    int var32 = var24.size();
    java.util.Iterator var33 = var24.iterator();
    var15.enqueue((java.lang.Object)var24);
    java.util.Iterator var35 = var15.iterator();
    var1.enqueue((java.lang.Object)var15);
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var38 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var38.enqueue((java.lang.Object)'#');
    java.util.Iterator var41 = var38.iterator();
    java.util.Iterator var42 = var38.iterator();
    var1.enqueue((java.lang.Object)var38);
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var45 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(1);
    boolean var46 = var45.isEmpty();
    boolean var47 = var45.isEmpty();
    boolean var48 = var45.isEmpty();
    java.util.Iterator var49 = var45.iterator();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var51 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(1);
    java.util.Iterator var52 = var51.iterator();
    java.util.Iterator var53 = var51.iterator();
    java.util.Iterator var54 = var51.iterator();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var56 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var57 = var56.isEmpty();
    boolean var58 = var56.isEmpty();
    java.util.Iterator var59 = var56.iterator();
    boolean var60 = var56.isEmpty();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var62 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var62.enqueue((java.lang.Object)'#');
    java.util.Iterator var65 = var62.iterator();
    java.util.Iterator var66 = var62.iterator();
    var62.enqueue((java.lang.Object)false);
    int var69 = var62.size();
    var56.enqueue((java.lang.Object)var62);
    boolean var71 = var62.isEmpty();
    var51.enqueue((java.lang.Object)var62);
    var45.enqueue((java.lang.Object)var51);
    var38.enqueue((java.lang.Object)var45);
    int var75 = var38.size();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var22 + "' != '" + '#'+ "'", var22.equals('#'));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == 2);

  }

  public void test442() throws Throwable {

    if (debug) System.out.printf("%nRingBufferMutantTest1.test442");


    at.fhhagenberg.sqe.exercise13.RingBufferMutant var1 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var1.enqueue((java.lang.Object)'#');
    var1.enqueue((java.lang.Object)' ');
    int var6 = var1.size();
    java.util.Iterator var7 = var1.iterator();
    boolean var8 = var1.isEmpty();
    java.util.Iterator var9 = var1.iterator();
    int var10 = var1.size();
    java.util.Iterator var11 = var1.iterator();
    java.util.Iterator var12 = var1.iterator();
    java.lang.Object var13 = var1.dequeue();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var15 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var16 = var15.isEmpty();
    boolean var17 = var15.isEmpty();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var19 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var19.enqueue((java.lang.Object)'#');
    java.util.Iterator var22 = var19.iterator();
    java.util.Iterator var23 = var19.iterator();
    var19.enqueue((java.lang.Object)false);
    int var26 = var19.size();
    boolean var27 = var19.isEmpty();
    java.lang.Object var28 = var19.dequeue();
    java.util.Iterator var29 = var19.iterator();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var31 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var31.enqueue((java.lang.Object)'#');
    java.util.Iterator var34 = var31.iterator();
    java.util.Iterator var35 = var31.iterator();
    java.util.Iterator var36 = var31.iterator();
    var19.enqueue((java.lang.Object)var31);
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var39 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(0);
    int var40 = var39.size();
    boolean var41 = var39.isEmpty();
    boolean var42 = var39.isEmpty();
    boolean var43 = var39.isEmpty();
    var31.enqueue((java.lang.Object)var39);
    var15.enqueue((java.lang.Object)var39);
    int var46 = var39.size();
    int var47 = var39.size();
    var1.enqueue((java.lang.Object)var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + '#'+ "'", var13.equals('#'));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var28 + "' != '" + '#'+ "'", var28.equals('#'));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == 0);

  }

  public void test443() throws Throwable {

    if (debug) System.out.printf("%nRingBufferMutantTest1.test443");


    at.fhhagenberg.sqe.exercise13.RingBufferMutant var1 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var2 = var1.isEmpty();
    boolean var3 = var1.isEmpty();
    java.util.Iterator var4 = var1.iterator();
    boolean var5 = var1.isEmpty();
    int var6 = var1.size();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var8 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var8.enqueue((java.lang.Object)'#');
    int var11 = var8.size();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var13 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var14 = var13.isEmpty();
    boolean var15 = var13.isEmpty();
    java.util.Iterator var16 = var13.iterator();
    boolean var17 = var13.isEmpty();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var19 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var19.enqueue((java.lang.Object)'#');
    java.util.Iterator var22 = var19.iterator();
    java.util.Iterator var23 = var19.iterator();
    var19.enqueue((java.lang.Object)false);
    int var26 = var19.size();
    var13.enqueue((java.lang.Object)var19);
    var8.enqueue((java.lang.Object)var19);
    java.util.Iterator var29 = var19.iterator();
    java.util.Iterator var30 = var19.iterator();
    java.util.Iterator var31 = var19.iterator();
    var1.enqueue((java.lang.Object)var19);
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var34 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var34.enqueue((java.lang.Object)'#');
    var34.enqueue((java.lang.Object)' ');
    int var39 = var34.size();
    java.util.Iterator var40 = var34.iterator();
    boolean var41 = var34.isEmpty();
    java.util.Iterator var42 = var34.iterator();
    int var43 = var34.size();
    boolean var44 = var34.isEmpty();
    java.lang.Object var45 = var34.dequeue();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var47 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var48 = var47.isEmpty();
    boolean var49 = var47.isEmpty();
    java.util.Iterator var50 = var47.iterator();
    boolean var51 = var47.isEmpty();
    var47.enqueue((java.lang.Object)1.0d);
    java.util.Iterator var54 = var47.iterator();
    var34.enqueue((java.lang.Object)var54);
    var1.enqueue((java.lang.Object)var34);
    boolean var57 = var1.isEmpty();
    java.lang.Object var58 = var1.dequeue();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var45 + "' != '" + '#'+ "'", var45.equals('#'));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);

  }

  public void test444() throws Throwable {

    if (debug) System.out.printf("%nRingBufferMutantTest1.test444");


    at.fhhagenberg.sqe.exercise13.RingBufferMutant var1 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var1.enqueue((java.lang.Object)'#');
    java.util.Iterator var4 = var1.iterator();
    java.util.Iterator var5 = var1.iterator();
    java.util.Iterator var6 = var1.iterator();
    java.lang.Object var7 = var1.dequeue();
    java.util.Iterator var8 = var1.iterator();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var10 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var11 = var10.isEmpty();
    boolean var12 = var10.isEmpty();
    java.util.Iterator var13 = var10.iterator();
    boolean var14 = var10.isEmpty();
    int var15 = var10.size();
    java.util.Iterator var16 = var10.iterator();
    var1.enqueue((java.lang.Object)var10);
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var19 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var20 = var19.isEmpty();
    boolean var21 = var19.isEmpty();
    java.util.Iterator var22 = var19.iterator();
    boolean var23 = var19.isEmpty();
    var19.enqueue((java.lang.Object)'#');
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var27 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var28 = var27.isEmpty();
    boolean var29 = var27.isEmpty();
    java.util.Iterator var30 = var27.iterator();
    boolean var31 = var27.isEmpty();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var33 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var33.enqueue((java.lang.Object)'#');
    java.util.Iterator var36 = var33.iterator();
    java.util.Iterator var37 = var33.iterator();
    var33.enqueue((java.lang.Object)false);
    int var40 = var33.size();
    var27.enqueue((java.lang.Object)var33);
    int var42 = var27.size();
    var19.enqueue((java.lang.Object)var42);
    int var44 = var19.size();
    java.lang.Object var45 = var19.dequeue();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var47 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var48 = var47.isEmpty();
    boolean var49 = var47.isEmpty();
    java.util.Iterator var50 = var47.iterator();
    boolean var51 = var47.isEmpty();
    var47.enqueue((java.lang.Object)'#');
    var19.enqueue((java.lang.Object)var47);
    var10.enqueue((java.lang.Object)var47);
    java.lang.Object var56 = var47.dequeue();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + '#'+ "'", var7.equals('#'));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var45 + "' != '" + '#'+ "'", var45.equals('#'));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var56 + "' != '" + '#'+ "'", var56.equals('#'));

  }

  public void test445() throws Throwable {

    if (debug) System.out.printf("%nRingBufferMutantTest1.test445");


    at.fhhagenberg.sqe.exercise13.RingBufferMutant var1 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var1.enqueue((java.lang.Object)'#');
    java.util.Iterator var4 = var1.iterator();
    java.util.Iterator var5 = var1.iterator();
    java.util.Iterator var6 = var1.iterator();
    boolean var7 = var1.isEmpty();
    java.util.Iterator var8 = var1.iterator();
    java.util.Iterator var9 = var1.iterator();
    java.util.Iterator var10 = var1.iterator();
    java.util.Iterator var11 = var1.iterator();
    java.lang.Object var12 = var1.dequeue();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var14 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var14.enqueue((java.lang.Object)1.0d);
    java.util.Iterator var17 = var14.iterator();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var19 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(1);
    boolean var20 = var19.isEmpty();
    boolean var21 = var19.isEmpty();
    java.util.Iterator var22 = var19.iterator();
    var14.enqueue((java.lang.Object)var19);
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var25 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var25.enqueue((java.lang.Object)'#');
    java.util.Iterator var28 = var25.iterator();
    java.util.Iterator var29 = var25.iterator();
    var25.enqueue((java.lang.Object)false);
    int var32 = var25.size();
    boolean var33 = var25.isEmpty();
    boolean var34 = var25.isEmpty();
    boolean var35 = var25.isEmpty();
    java.lang.Object var36 = var25.dequeue();
    java.util.Iterator var37 = var25.iterator();
    var14.enqueue((java.lang.Object)var25);
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var40 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(0);
    int var41 = var40.size();
    boolean var42 = var40.isEmpty();
    boolean var43 = var40.isEmpty();
    boolean var44 = var40.isEmpty();
    var25.enqueue((java.lang.Object)var40);
    var1.enqueue((java.lang.Object)var25);
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var48 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var49 = var48.isEmpty();
    boolean var50 = var48.isEmpty();
    boolean var51 = var48.isEmpty();
    var1.enqueue((java.lang.Object)var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + '#'+ "'", var12.equals('#'));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var36 + "' != '" + '#'+ "'", var36.equals('#'));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == true);

  }

  public void test446() throws Throwable {

    if (debug) System.out.printf("%nRingBufferMutantTest1.test446");


    at.fhhagenberg.sqe.exercise13.RingBufferMutant var1 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(2);
    java.util.Iterator var2 = var1.iterator();
    boolean var3 = var1.isEmpty();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.Object var4 = var1.dequeue();
      fail("Expected exception of type java.lang.RuntimeException");
    } catch (java.lang.RuntimeException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);

  }

  public void test447() throws Throwable {

    if (debug) System.out.printf("%nRingBufferMutantTest1.test447");


    at.fhhagenberg.sqe.exercise13.RingBufferMutant var1 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var1.enqueue((java.lang.Object)'#');
    java.util.Iterator var4 = var1.iterator();
    java.util.Iterator var5 = var1.iterator();
    java.util.Iterator var6 = var1.iterator();
    boolean var7 = var1.isEmpty();
    java.util.Iterator var8 = var1.iterator();
    java.util.Iterator var9 = var1.iterator();
    java.util.Iterator var10 = var1.iterator();
    java.util.Iterator var11 = var1.iterator();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var13 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var13.enqueue((java.lang.Object)'#');
    java.util.Iterator var16 = var13.iterator();
    java.util.Iterator var17 = var13.iterator();
    java.util.Iterator var18 = var13.iterator();
    java.lang.Object var19 = var13.dequeue();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var21 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var22 = var21.isEmpty();
    boolean var23 = var21.isEmpty();
    java.util.Iterator var24 = var21.iterator();
    boolean var25 = var21.isEmpty();
    int var26 = var21.size();
    int var27 = var21.size();
    java.util.Iterator var28 = var21.iterator();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var30 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var30.enqueue((java.lang.Object)'#');
    java.util.Iterator var33 = var30.iterator();
    java.util.Iterator var34 = var30.iterator();
    var30.enqueue((java.lang.Object)false);
    java.lang.Object var37 = var30.dequeue();
    var21.enqueue((java.lang.Object)var30);
    java.util.Iterator var39 = var21.iterator();
    boolean var40 = var21.isEmpty();
    var13.enqueue((java.lang.Object)var21);
    var1.enqueue((java.lang.Object)var13);
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var44 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var44.enqueue((java.lang.Object)'#');
    java.util.Iterator var47 = var44.iterator();
    java.util.Iterator var48 = var44.iterator();
    var44.enqueue((java.lang.Object)false);
    java.lang.Object var51 = var44.dequeue();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var53 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var54 = var53.isEmpty();
    boolean var55 = var53.isEmpty();
    java.util.Iterator var56 = var53.iterator();
    boolean var57 = var53.isEmpty();
    var53.enqueue((java.lang.Object)'#');
    boolean var60 = var53.isEmpty();
    int var61 = var53.size();
    java.util.Iterator var62 = var53.iterator();
    var44.enqueue((java.lang.Object)var53);
    java.util.Iterator var64 = var53.iterator();
    boolean var65 = var53.isEmpty();
    java.lang.Object var66 = var53.dequeue();
    var13.enqueue((java.lang.Object)var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + '#'+ "'", var19.equals('#'));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var37 + "' != '" + '#'+ "'", var37.equals('#'));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var51 + "' != '" + '#'+ "'", var51.equals('#'));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var66 + "' != '" + '#'+ "'", var66.equals('#'));

  }

  public void test448() throws Throwable {

    if (debug) System.out.printf("%nRingBufferMutantTest1.test448");


    at.fhhagenberg.sqe.exercise13.RingBufferMutant var1 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var1.enqueue((java.lang.Object)'#');
    java.util.Iterator var4 = var1.iterator();
    java.util.Iterator var5 = var1.iterator();
    var1.enqueue((java.lang.Object)false);
    int var8 = var1.size();
    boolean var9 = var1.isEmpty();
    boolean var10 = var1.isEmpty();
    boolean var11 = var1.isEmpty();
    int var12 = var1.size();
    boolean var13 = var1.isEmpty();
    int var14 = var1.size();
    int var15 = var1.size();
    java.util.Iterator var16 = var1.iterator();
    java.util.Iterator var17 = var1.iterator();
    java.util.Iterator var18 = var1.iterator();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);

  }

  public void test449() throws Throwable {

    if (debug) System.out.printf("%nRingBufferMutantTest1.test449");


    at.fhhagenberg.sqe.exercise13.RingBufferMutant var1 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var1.enqueue((java.lang.Object)'#');
    var1.enqueue((java.lang.Object)' ');
    int var6 = var1.size();
    java.util.Iterator var7 = var1.iterator();
    boolean var8 = var1.isEmpty();
    java.util.Iterator var9 = var1.iterator();
    int var10 = var1.size();
    boolean var11 = var1.isEmpty();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var13 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var13.enqueue((java.lang.Object)'#');
    java.util.Iterator var16 = var13.iterator();
    java.util.Iterator var17 = var13.iterator();
    var13.enqueue((java.lang.Object)false);
    int var20 = var13.size();
    boolean var21 = var13.isEmpty();
    java.lang.Object var22 = var13.dequeue();
    java.util.Iterator var23 = var13.iterator();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var25 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var25.enqueue((java.lang.Object)'#');
    java.util.Iterator var28 = var25.iterator();
    java.util.Iterator var29 = var25.iterator();
    java.util.Iterator var30 = var25.iterator();
    var13.enqueue((java.lang.Object)var25);
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var33 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(0);
    int var34 = var33.size();
    boolean var35 = var33.isEmpty();
    boolean var36 = var33.isEmpty();
    boolean var37 = var33.isEmpty();
    var25.enqueue((java.lang.Object)var33);
    java.util.Iterator var39 = var25.iterator();
    boolean var40 = var25.isEmpty();
    var1.enqueue((java.lang.Object)var25);
    java.util.Iterator var42 = var1.iterator();
    int var43 = var1.size();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var45 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var45.enqueue((java.lang.Object)'#');
    java.util.Iterator var48 = var45.iterator();
    java.util.Iterator var49 = var45.iterator();
    java.util.Iterator var50 = var45.iterator();
    boolean var51 = var45.isEmpty();
    java.util.Iterator var52 = var45.iterator();
    java.util.Iterator var53 = var45.iterator();
    java.util.Iterator var54 = var45.iterator();
    boolean var55 = var45.isEmpty();
    var1.enqueue((java.lang.Object)var45);
    java.util.Iterator var57 = var1.iterator();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var22 + "' != '" + '#'+ "'", var22.equals('#'));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);

  }

  public void test450() throws Throwable {

    if (debug) System.out.printf("%nRingBufferMutantTest1.test450");


    at.fhhagenberg.sqe.exercise13.RingBufferMutant var1 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(100);
    int var2 = var1.size();
    int var3 = var1.size();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var5 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var6 = var5.isEmpty();
    boolean var7 = var5.isEmpty();
    java.util.Iterator var8 = var5.iterator();
    boolean var9 = var5.isEmpty();
    java.util.Iterator var10 = var5.iterator();
    var1.enqueue((java.lang.Object)var10);
    java.util.Iterator var12 = var1.iterator();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var14 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var14.enqueue((java.lang.Object)1.0d);
    java.util.Iterator var17 = var14.iterator();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var19 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(1);
    boolean var20 = var19.isEmpty();
    boolean var21 = var19.isEmpty();
    java.util.Iterator var22 = var19.iterator();
    var14.enqueue((java.lang.Object)var19);
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var25 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var25.enqueue((java.lang.Object)'#');
    java.util.Iterator var28 = var25.iterator();
    java.util.Iterator var29 = var25.iterator();
    var25.enqueue((java.lang.Object)false);
    int var32 = var25.size();
    boolean var33 = var25.isEmpty();
    boolean var34 = var25.isEmpty();
    boolean var35 = var25.isEmpty();
    java.lang.Object var36 = var25.dequeue();
    java.util.Iterator var37 = var25.iterator();
    var14.enqueue((java.lang.Object)var25);
    boolean var39 = var14.isEmpty();
    boolean var40 = var14.isEmpty();
    var1.enqueue((java.lang.Object)var14);
    java.util.Iterator var42 = var14.iterator();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var36 + "' != '" + '#'+ "'", var36.equals('#'));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);

  }

  public void test451() throws Throwable {

    if (debug) System.out.printf("%nRingBufferMutantTest1.test451");


    at.fhhagenberg.sqe.exercise13.RingBufferMutant var1 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var1.enqueue((java.lang.Object)'#');
    int var4 = var1.size();
    int var5 = var1.size();
    int var6 = var1.size();
    int var7 = var1.size();
    java.util.Iterator var8 = var1.iterator();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var10 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var10.enqueue((java.lang.Object)'#');
    var10.enqueue((java.lang.Object)' ');
    int var15 = var10.size();
    java.util.Iterator var16 = var10.iterator();
    boolean var17 = var10.isEmpty();
    java.util.Iterator var18 = var10.iterator();
    java.util.Iterator var19 = var10.iterator();
    int var20 = var10.size();
    var1.enqueue((java.lang.Object)var10);
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var23 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(1);
    int var24 = var23.size();
    var1.enqueue((java.lang.Object)var23);
    int var26 = var23.size();
    java.util.Iterator var27 = var23.iterator();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);

  }

  public void test452() throws Throwable {

    if (debug) System.out.printf("%nRingBufferMutantTest1.test452");


    at.fhhagenberg.sqe.exercise13.RingBufferMutant var1 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var2 = var1.isEmpty();
    boolean var3 = var1.isEmpty();
    java.util.Iterator var4 = var1.iterator();
    boolean var5 = var1.isEmpty();
    int var6 = var1.size();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var8 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var8.enqueue((java.lang.Object)'#');
    int var11 = var8.size();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var13 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var14 = var13.isEmpty();
    boolean var15 = var13.isEmpty();
    java.util.Iterator var16 = var13.iterator();
    boolean var17 = var13.isEmpty();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var19 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var19.enqueue((java.lang.Object)'#');
    java.util.Iterator var22 = var19.iterator();
    java.util.Iterator var23 = var19.iterator();
    var19.enqueue((java.lang.Object)false);
    int var26 = var19.size();
    var13.enqueue((java.lang.Object)var19);
    var8.enqueue((java.lang.Object)var19);
    java.util.Iterator var29 = var19.iterator();
    java.util.Iterator var30 = var19.iterator();
    java.util.Iterator var31 = var19.iterator();
    var1.enqueue((java.lang.Object)var19);
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var34 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var34.enqueue((java.lang.Object)'#');
    var34.enqueue((java.lang.Object)' ');
    int var39 = var34.size();
    java.util.Iterator var40 = var34.iterator();
    boolean var41 = var34.isEmpty();
    java.util.Iterator var42 = var34.iterator();
    int var43 = var34.size();
    boolean var44 = var34.isEmpty();
    java.lang.Object var45 = var34.dequeue();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var47 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var48 = var47.isEmpty();
    boolean var49 = var47.isEmpty();
    java.util.Iterator var50 = var47.iterator();
    boolean var51 = var47.isEmpty();
    var47.enqueue((java.lang.Object)1.0d);
    java.util.Iterator var54 = var47.iterator();
    var34.enqueue((java.lang.Object)var54);
    var1.enqueue((java.lang.Object)var34);
    boolean var57 = var1.isEmpty();
    boolean var58 = var1.isEmpty();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var60 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var60.enqueue((java.lang.Object)'#');
    java.util.Iterator var63 = var60.iterator();
    java.util.Iterator var64 = var60.iterator();
    var60.enqueue((java.lang.Object)false);
    int var67 = var60.size();
    boolean var68 = var60.isEmpty();
    java.lang.Object var69 = var60.dequeue();
    java.util.Iterator var70 = var60.iterator();
    var1.enqueue((java.lang.Object)var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var45 + "' != '" + '#'+ "'", var45.equals('#'));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var69 + "' != '" + '#'+ "'", var69.equals('#'));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);

  }

  public void test453() throws Throwable {

    if (debug) System.out.printf("%nRingBufferMutantTest1.test453");


    at.fhhagenberg.sqe.exercise13.RingBufferMutant var1 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(100);
    int var2 = var1.size();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var4 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var4.enqueue((java.lang.Object)'#');
    java.util.Iterator var7 = var4.iterator();
    java.util.Iterator var8 = var4.iterator();
    var4.enqueue((java.lang.Object)false);
    java.lang.Object var11 = var4.dequeue();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var13 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var14 = var13.isEmpty();
    boolean var15 = var13.isEmpty();
    java.util.Iterator var16 = var13.iterator();
    boolean var17 = var13.isEmpty();
    var13.enqueue((java.lang.Object)'#');
    boolean var20 = var13.isEmpty();
    int var21 = var13.size();
    java.util.Iterator var22 = var13.iterator();
    var4.enqueue((java.lang.Object)var13);
    int var24 = var13.size();
    int var25 = var13.size();
    var1.enqueue((java.lang.Object)var25);
    boolean var27 = var1.isEmpty();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var29 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var29.enqueue((java.lang.Object)'#');
    var29.enqueue((java.lang.Object)' ');
    int var34 = var29.size();
    int var35 = var29.size();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var37 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(1);
    java.util.Iterator var38 = var37.iterator();
    java.util.Iterator var39 = var37.iterator();
    var29.enqueue((java.lang.Object)var37);
    int var41 = var29.size();
    var1.enqueue((java.lang.Object)var29);
    int var43 = var1.size();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + '#'+ "'", var11.equals('#'));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == 2);

  }

  public void test454() throws Throwable {

    if (debug) System.out.printf("%nRingBufferMutantTest1.test454");


    at.fhhagenberg.sqe.exercise13.RingBufferMutant var1 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var1.enqueue((java.lang.Object)'#');
    java.util.Iterator var4 = var1.iterator();
    java.util.Iterator var5 = var1.iterator();
    var1.enqueue((java.lang.Object)false);
    int var8 = var1.size();
    boolean var9 = var1.isEmpty();
    boolean var10 = var1.isEmpty();
    boolean var11 = var1.isEmpty();
    int var12 = var1.size();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var14 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var15 = var14.isEmpty();
    boolean var16 = var14.isEmpty();
    java.util.Iterator var17 = var14.iterator();
    boolean var18 = var14.isEmpty();
    int var19 = var14.size();
    int var20 = var14.size();
    var1.enqueue((java.lang.Object)var14);
    boolean var22 = var14.isEmpty();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == true);

  }

  public void test455() throws Throwable {

    if (debug) System.out.printf("%nRingBufferMutantTest1.test455");


    at.fhhagenberg.sqe.exercise13.RingBufferMutant var1 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var2 = var1.isEmpty();
    boolean var3 = var1.isEmpty();
    java.util.Iterator var4 = var1.iterator();
    boolean var5 = var1.isEmpty();
    var1.enqueue((java.lang.Object)'#');
    java.util.Iterator var8 = var1.iterator();
    boolean var9 = var1.isEmpty();
    java.util.Iterator var10 = var1.iterator();
    java.util.Iterator var11 = var1.iterator();
    int var12 = var1.size();
    boolean var13 = var1.isEmpty();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var15 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var15.enqueue((java.lang.Object)'#');
    java.util.Iterator var18 = var15.iterator();
    java.util.Iterator var19 = var15.iterator();
    java.util.Iterator var20 = var15.iterator();
    boolean var21 = var15.isEmpty();
    java.util.Iterator var22 = var15.iterator();
    int var23 = var15.size();
    int var24 = var15.size();
    var1.enqueue((java.lang.Object)var15);
    java.lang.Object var26 = var1.dequeue();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var28 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var28.enqueue((java.lang.Object)'#');
    java.util.Iterator var31 = var28.iterator();
    java.util.Iterator var32 = var28.iterator();
    var28.enqueue((java.lang.Object)false);
    int var35 = var28.size();
    boolean var36 = var28.isEmpty();
    boolean var37 = var28.isEmpty();
    boolean var38 = var28.isEmpty();
    int var39 = var28.size();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var41 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(100);
    int var42 = var41.size();
    java.util.Iterator var43 = var41.iterator();
    var28.enqueue((java.lang.Object)var41);
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var46 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var47 = var46.isEmpty();
    boolean var48 = var46.isEmpty();
    boolean var49 = var46.isEmpty();
    int var50 = var46.size();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var52 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(1);
    var46.enqueue((java.lang.Object)var52);
    java.lang.Object var54 = var46.dequeue();
    var28.enqueue(var54);
    java.util.Iterator var56 = var28.iterator();
    var1.enqueue((java.lang.Object)var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var26 + "' != '" + '#'+ "'", var26.equals('#'));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);

  }

  public void test456() throws Throwable {

    if (debug) System.out.printf("%nRingBufferMutantTest1.test456");


    at.fhhagenberg.sqe.exercise13.RingBufferMutant var1 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var1.enqueue((java.lang.Object)'#');
    var1.enqueue((java.lang.Object)' ');
    var1.enqueue((java.lang.Object)10.0f);
    java.util.Iterator var8 = var1.iterator();
    boolean var9 = var1.isEmpty();
    int var10 = var1.size();
    java.lang.Object var11 = var1.dequeue();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + '#'+ "'", var11.equals('#'));

  }

  public void test457() throws Throwable {

    if (debug) System.out.printf("%nRingBufferMutantTest1.test457");


    at.fhhagenberg.sqe.exercise13.RingBufferMutant var1 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var2 = var1.isEmpty();
    boolean var3 = var1.isEmpty();
    boolean var4 = var1.isEmpty();
    int var5 = var1.size();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var7 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(1);
    var1.enqueue((java.lang.Object)var7);
    java.lang.Object var9 = var1.dequeue();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var11 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var12 = var11.isEmpty();
    boolean var13 = var11.isEmpty();
    boolean var14 = var11.isEmpty();
    int var15 = var11.size();
    java.util.Iterator var16 = var11.iterator();
    var1.enqueue((java.lang.Object)var16);
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var19 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var19.enqueue((java.lang.Object)'#');
    java.util.Iterator var22 = var19.iterator();
    java.util.Iterator var23 = var19.iterator();
    var19.enqueue((java.lang.Object)false);
    int var26 = var19.size();
    boolean var27 = var19.isEmpty();
    boolean var28 = var19.isEmpty();
    boolean var29 = var19.isEmpty();
    int var30 = var19.size();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var32 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(100);
    int var33 = var32.size();
    java.util.Iterator var34 = var32.iterator();
    var19.enqueue((java.lang.Object)var32);
    int var36 = var32.size();
    var1.enqueue((java.lang.Object)var32);
    java.util.Iterator var38 = var32.iterator();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.Object var39 = var32.dequeue();
      fail("Expected exception of type java.lang.RuntimeException");
    } catch (java.lang.RuntimeException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);

  }

  public void test458() throws Throwable {

    if (debug) System.out.printf("%nRingBufferMutantTest1.test458");


    at.fhhagenberg.sqe.exercise13.RingBufferMutant var1 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var1.enqueue((java.lang.Object)'#');
    java.util.Iterator var4 = var1.iterator();
    java.util.Iterator var5 = var1.iterator();
    var1.enqueue((java.lang.Object)false);
    int var8 = var1.size();
    boolean var9 = var1.isEmpty();
    boolean var10 = var1.isEmpty();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var12 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var12.enqueue((java.lang.Object)'#');
    int var15 = var12.size();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var17 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var18 = var17.isEmpty();
    boolean var19 = var17.isEmpty();
    java.util.Iterator var20 = var17.iterator();
    boolean var21 = var17.isEmpty();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var23 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var23.enqueue((java.lang.Object)'#');
    java.util.Iterator var26 = var23.iterator();
    java.util.Iterator var27 = var23.iterator();
    var23.enqueue((java.lang.Object)false);
    int var30 = var23.size();
    var17.enqueue((java.lang.Object)var23);
    var12.enqueue((java.lang.Object)var23);
    java.util.Iterator var33 = var23.iterator();
    var1.enqueue((java.lang.Object)var23);
    boolean var35 = var23.isEmpty();
    java.lang.Object var36 = var23.dequeue();
    java.util.Iterator var37 = var23.iterator();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var39 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var39.enqueue((java.lang.Object)'#');
    var39.enqueue((java.lang.Object)' ');
    int var44 = var39.size();
    int var45 = var39.size();
    boolean var46 = var39.isEmpty();
    boolean var47 = var39.isEmpty();
    var23.enqueue((java.lang.Object)var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var36 + "' != '" + '#'+ "'", var36.equals('#'));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);

  }

  public void test459() throws Throwable {

    if (debug) System.out.printf("%nRingBufferMutantTest1.test459");


    at.fhhagenberg.sqe.exercise13.RingBufferMutant var1 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var2 = var1.isEmpty();
    boolean var3 = var1.isEmpty();
    java.util.Iterator var4 = var1.iterator();
    boolean var5 = var1.isEmpty();
    int var6 = var1.size();
    java.util.Iterator var7 = var1.iterator();
    int var8 = var1.size();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var10 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var10.enqueue((java.lang.Object)'#');
    java.util.Iterator var13 = var10.iterator();
    java.util.Iterator var14 = var10.iterator();
    var10.enqueue((java.lang.Object)false);
    java.lang.Object var17 = var10.dequeue();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var19 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var20 = var19.isEmpty();
    boolean var21 = var19.isEmpty();
    java.util.Iterator var22 = var19.iterator();
    boolean var23 = var19.isEmpty();
    var19.enqueue((java.lang.Object)'#');
    boolean var26 = var19.isEmpty();
    int var27 = var19.size();
    java.util.Iterator var28 = var19.iterator();
    var10.enqueue((java.lang.Object)var19);
    int var30 = var19.size();
    int var31 = var19.size();
    var1.enqueue((java.lang.Object)var19);
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var34 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var35 = var34.isEmpty();
    boolean var36 = var34.isEmpty();
    java.util.Iterator var37 = var34.iterator();
    boolean var38 = var34.isEmpty();
    java.util.Iterator var39 = var34.iterator();
    var1.enqueue((java.lang.Object)var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + '#'+ "'", var17.equals('#'));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);

  }

  public void test460() throws Throwable {

    if (debug) System.out.printf("%nRingBufferMutantTest1.test460");


    at.fhhagenberg.sqe.exercise13.RingBufferMutant var1 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var2 = var1.isEmpty();
    boolean var3 = var1.isEmpty();
    java.util.Iterator var4 = var1.iterator();
    boolean var5 = var1.isEmpty();
    java.util.Iterator var6 = var1.iterator();
    int var7 = var1.size();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var9 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var10 = var9.isEmpty();
    boolean var11 = var9.isEmpty();
    java.util.Iterator var12 = var9.iterator();
    boolean var13 = var9.isEmpty();
    var9.enqueue((java.lang.Object)'#');
    boolean var16 = var9.isEmpty();
    int var17 = var9.size();
    java.util.Iterator var18 = var9.iterator();
    boolean var19 = var9.isEmpty();
    java.util.Iterator var20 = var9.iterator();
    var1.enqueue((java.lang.Object)var20);
    int var22 = var1.size();
    int var23 = var1.size();
    int var24 = var1.size();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 1);

  }

  public void test461() throws Throwable {

    if (debug) System.out.printf("%nRingBufferMutantTest1.test461");


    at.fhhagenberg.sqe.exercise13.RingBufferMutant var1 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var2 = var1.isEmpty();
    boolean var3 = var1.isEmpty();
    java.util.Iterator var4 = var1.iterator();
    boolean var5 = var1.isEmpty();
    var1.enqueue((java.lang.Object)1.0d);
    int var8 = var1.size();
    int var9 = var1.size();
    java.util.Iterator var10 = var1.iterator();
    java.util.Iterator var11 = var1.iterator();
    java.util.Iterator var12 = var1.iterator();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);

  }

  public void test462() throws Throwable {

    if (debug) System.out.printf("%nRingBufferMutantTest1.test462");


    at.fhhagenberg.sqe.exercise13.RingBufferMutant var1 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var1.enqueue((java.lang.Object)'#');
    int var4 = var1.size();
    var1.enqueue((java.lang.Object)true);
    java.util.Iterator var7 = var1.iterator();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var9 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(100);
    var1.enqueue((java.lang.Object)100);
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var12 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var13 = var12.isEmpty();
    boolean var14 = var12.isEmpty();
    java.util.Iterator var15 = var12.iterator();
    boolean var16 = var12.isEmpty();
    int var17 = var12.size();
    int var18 = var12.size();
    java.util.Iterator var19 = var12.iterator();
    var1.enqueue((java.lang.Object)var12);
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var22 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var23 = var22.isEmpty();
    boolean var24 = var22.isEmpty();
    boolean var25 = var22.isEmpty();
    int var26 = var22.size();
    int var27 = var22.size();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var29 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var30 = var29.isEmpty();
    boolean var31 = var29.isEmpty();
    java.util.Iterator var32 = var29.iterator();
    boolean var33 = var29.isEmpty();
    int var34 = var29.size();
    java.util.Iterator var35 = var29.iterator();
    int var36 = var29.size();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var38 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var38.enqueue((java.lang.Object)'#');
    java.util.Iterator var41 = var38.iterator();
    java.util.Iterator var42 = var38.iterator();
    var38.enqueue((java.lang.Object)false);
    java.lang.Object var45 = var38.dequeue();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var47 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var48 = var47.isEmpty();
    boolean var49 = var47.isEmpty();
    java.util.Iterator var50 = var47.iterator();
    boolean var51 = var47.isEmpty();
    var47.enqueue((java.lang.Object)'#');
    boolean var54 = var47.isEmpty();
    int var55 = var47.size();
    java.util.Iterator var56 = var47.iterator();
    var38.enqueue((java.lang.Object)var47);
    int var58 = var47.size();
    int var59 = var47.size();
    var29.enqueue((java.lang.Object)var47);
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var62 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var63 = var62.isEmpty();
    boolean var64 = var62.isEmpty();
    int var65 = var62.size();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var67 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var68 = var67.isEmpty();
    boolean var69 = var67.isEmpty();
    var62.enqueue((java.lang.Object)var69);
    boolean var71 = var62.isEmpty();
    var47.enqueue((java.lang.Object)var71);
    boolean var73 = var47.isEmpty();
    var22.enqueue((java.lang.Object)var47);
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var76 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(2);
    java.util.Iterator var77 = var76.iterator();
    var22.enqueue((java.lang.Object)var77);
    var1.enqueue((java.lang.Object)var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var45 + "' != '" + '#'+ "'", var45.equals('#'));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);

  }

  public void test463() throws Throwable {

    if (debug) System.out.printf("%nRingBufferMutantTest1.test463");


    at.fhhagenberg.sqe.exercise13.RingBufferMutant var1 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var1.enqueue((java.lang.Object)'#');
    var1.enqueue((java.lang.Object)' ');
    int var6 = var1.size();
    var1.enqueue((java.lang.Object)1);
    boolean var9 = var1.isEmpty();
    java.util.Iterator var10 = var1.iterator();
    int var11 = var1.size();
    java.lang.Object var12 = var1.dequeue();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + '#'+ "'", var12.equals('#'));

  }

  public void test464() throws Throwable {

    if (debug) System.out.printf("%nRingBufferMutantTest1.test464");


    at.fhhagenberg.sqe.exercise13.RingBufferMutant var1 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var2 = var1.isEmpty();
    boolean var3 = var1.isEmpty();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var5 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var5.enqueue((java.lang.Object)'#');
    java.util.Iterator var8 = var5.iterator();
    java.util.Iterator var9 = var5.iterator();
    var5.enqueue((java.lang.Object)false);
    int var12 = var5.size();
    boolean var13 = var5.isEmpty();
    java.lang.Object var14 = var5.dequeue();
    java.util.Iterator var15 = var5.iterator();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var17 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var17.enqueue((java.lang.Object)'#');
    java.util.Iterator var20 = var17.iterator();
    java.util.Iterator var21 = var17.iterator();
    java.util.Iterator var22 = var17.iterator();
    var5.enqueue((java.lang.Object)var17);
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var25 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(0);
    int var26 = var25.size();
    boolean var27 = var25.isEmpty();
    boolean var28 = var25.isEmpty();
    boolean var29 = var25.isEmpty();
    var17.enqueue((java.lang.Object)var25);
    var1.enqueue((java.lang.Object)var25);
    boolean var32 = var25.isEmpty();
    java.util.Iterator var33 = var25.iterator();
    java.util.Iterator var34 = var25.iterator();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + '#'+ "'", var14.equals('#'));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);

  }

  public void test465() throws Throwable {

    if (debug) System.out.printf("%nRingBufferMutantTest1.test465");


    at.fhhagenberg.sqe.exercise13.RingBufferMutant var1 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var1.enqueue((java.lang.Object)'#');
    java.util.Iterator var4 = var1.iterator();
    java.util.Iterator var5 = var1.iterator();
    var1.enqueue((java.lang.Object)false);
    java.lang.Object var8 = var1.dequeue();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var10 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var10.enqueue((java.lang.Object)'#');
    java.util.Iterator var13 = var10.iterator();
    java.util.Iterator var14 = var10.iterator();
    var10.enqueue((java.lang.Object)false);
    int var17 = var10.size();
    boolean var18 = var10.isEmpty();
    java.util.Iterator var19 = var10.iterator();
    var1.enqueue((java.lang.Object)var10);
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var22 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var22.enqueue((java.lang.Object)'#');
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var26 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var26.enqueue((java.lang.Object)'#');
    java.util.Iterator var29 = var26.iterator();
    java.util.Iterator var30 = var26.iterator();
    var26.enqueue((java.lang.Object)false);
    int var33 = var26.size();
    boolean var34 = var26.isEmpty();
    java.lang.Object var35 = var26.dequeue();
    java.util.Iterator var36 = var26.iterator();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var38 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var38.enqueue((java.lang.Object)'#');
    java.util.Iterator var41 = var38.iterator();
    java.util.Iterator var42 = var38.iterator();
    java.util.Iterator var43 = var38.iterator();
    var26.enqueue((java.lang.Object)var38);
    var22.enqueue((java.lang.Object)var38);
    java.util.Iterator var46 = var38.iterator();
    boolean var47 = var38.isEmpty();
    boolean var48 = var38.isEmpty();
    int var49 = var38.size();
    var10.enqueue((java.lang.Object)var38);
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var52 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var53 = var52.isEmpty();
    boolean var54 = var52.isEmpty();
    int var55 = var52.size();
    java.util.Iterator var56 = var52.iterator();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var58 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var58.enqueue((java.lang.Object)'#');
    int var61 = var58.size();
    var58.enqueue((java.lang.Object)true);
    java.util.Iterator var64 = var58.iterator();
    var52.enqueue((java.lang.Object)var64);
    java.util.Iterator var66 = var52.iterator();
    boolean var67 = var52.isEmpty();
    var38.enqueue((java.lang.Object)var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + '#'+ "'", var8.equals('#'));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var35 + "' != '" + '#'+ "'", var35.equals('#'));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == false);

  }

  public void test466() throws Throwable {

    if (debug) System.out.printf("%nRingBufferMutantTest1.test466");


    at.fhhagenberg.sqe.exercise13.RingBufferMutant var1 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var2 = var1.isEmpty();
    boolean var3 = var1.isEmpty();
    int var4 = var1.size();
    java.util.Iterator var5 = var1.iterator();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var7 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var7.enqueue((java.lang.Object)'#');
    int var10 = var7.size();
    var7.enqueue((java.lang.Object)true);
    java.util.Iterator var13 = var7.iterator();
    var1.enqueue((java.lang.Object)var13);
    java.lang.Object var15 = var1.dequeue();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var17 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var17.enqueue((java.lang.Object)'#');
    int var20 = var17.size();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var22 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var23 = var22.isEmpty();
    boolean var24 = var22.isEmpty();
    java.util.Iterator var25 = var22.iterator();
    boolean var26 = var22.isEmpty();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var28 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var28.enqueue((java.lang.Object)'#');
    java.util.Iterator var31 = var28.iterator();
    java.util.Iterator var32 = var28.iterator();
    var28.enqueue((java.lang.Object)false);
    int var35 = var28.size();
    var22.enqueue((java.lang.Object)var28);
    var17.enqueue((java.lang.Object)var28);
    java.util.Iterator var38 = var17.iterator();
    java.util.Iterator var39 = var17.iterator();
    var1.enqueue((java.lang.Object)var17);
    java.util.Iterator var41 = var17.iterator();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);

  }

  public void test467() throws Throwable {

    if (debug) System.out.printf("%nRingBufferMutantTest1.test467");


    at.fhhagenberg.sqe.exercise13.RingBufferMutant var1 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var2 = var1.isEmpty();
    boolean var3 = var1.isEmpty();
    boolean var4 = var1.isEmpty();
    int var5 = var1.size();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var7 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(1);
    var1.enqueue((java.lang.Object)var7);
    java.lang.Object var9 = var1.dequeue();
    java.util.Iterator var10 = var1.iterator();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);

  }

  public void test468() throws Throwable {

    if (debug) System.out.printf("%nRingBufferMutantTest1.test468");


    at.fhhagenberg.sqe.exercise13.RingBufferMutant var1 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var1.enqueue((java.lang.Object)'#');
    int var4 = var1.size();
    var1.enqueue((java.lang.Object)true);
    java.util.Iterator var7 = var1.iterator();
    boolean var8 = var1.isEmpty();
    boolean var9 = var1.isEmpty();
    int var10 = var1.size();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var12 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(1);
    java.util.Iterator var13 = var12.iterator();
    java.util.Iterator var14 = var12.iterator();
    java.util.Iterator var15 = var12.iterator();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var17 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var17.enqueue((java.lang.Object)'#');
    java.util.Iterator var20 = var17.iterator();
    java.util.Iterator var21 = var17.iterator();
    var17.enqueue((java.lang.Object)false);
    int var24 = var17.size();
    boolean var25 = var17.isEmpty();
    boolean var26 = var17.isEmpty();
    boolean var27 = var17.isEmpty();
    int var28 = var17.size();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var30 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(100);
    int var31 = var30.size();
    java.util.Iterator var32 = var30.iterator();
    var17.enqueue((java.lang.Object)var30);
    boolean var34 = var17.isEmpty();
    java.lang.Object var35 = var17.dequeue();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var37 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var37.enqueue((java.lang.Object)'#');
    var37.enqueue((java.lang.Object)' ');
    int var42 = var37.size();
    int var43 = var37.size();
    int var44 = var37.size();
    int var45 = var37.size();
    int var46 = var37.size();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var48 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var48.enqueue((java.lang.Object)'#');
    boolean var51 = var48.isEmpty();
    int var52 = var48.size();
    var37.enqueue((java.lang.Object)var52);
    int var54 = var37.size();
    int var55 = var37.size();
    java.util.Iterator var56 = var37.iterator();
    java.lang.Object var57 = var37.dequeue();
    var17.enqueue(var57);
    var12.enqueue((java.lang.Object)var17);
    var1.enqueue((java.lang.Object)var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var35 + "' != '" + '#'+ "'", var35.equals('#'));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var57 + "' != '" + '#'+ "'", var57.equals('#'));

  }

  public void test469() throws Throwable {

    if (debug) System.out.printf("%nRingBufferMutantTest1.test469");


    at.fhhagenberg.sqe.exercise13.RingBufferMutant var1 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var1.enqueue((java.lang.Object)'#');
    java.util.Iterator var4 = var1.iterator();
    java.util.Iterator var5 = var1.iterator();
    java.util.Iterator var6 = var1.iterator();
    boolean var7 = var1.isEmpty();
    java.util.Iterator var8 = var1.iterator();
    int var9 = var1.size();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var11 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var11.enqueue((java.lang.Object)'#');
    java.util.Iterator var14 = var11.iterator();
    java.util.Iterator var15 = var11.iterator();
    java.util.Iterator var16 = var11.iterator();
    java.lang.Object var17 = var11.dequeue();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var19 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var20 = var19.isEmpty();
    boolean var21 = var19.isEmpty();
    java.util.Iterator var22 = var19.iterator();
    boolean var23 = var19.isEmpty();
    int var24 = var19.size();
    int var25 = var19.size();
    java.util.Iterator var26 = var19.iterator();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var28 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var28.enqueue((java.lang.Object)'#');
    java.util.Iterator var31 = var28.iterator();
    java.util.Iterator var32 = var28.iterator();
    var28.enqueue((java.lang.Object)false);
    java.lang.Object var35 = var28.dequeue();
    var19.enqueue((java.lang.Object)var28);
    java.util.Iterator var37 = var19.iterator();
    boolean var38 = var19.isEmpty();
    var11.enqueue((java.lang.Object)var19);
    var1.enqueue((java.lang.Object)var19);
    int var41 = var1.size();
    boolean var42 = var1.isEmpty();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + '#'+ "'", var17.equals('#'));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var35 + "' != '" + '#'+ "'", var35.equals('#'));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);

  }

  public void test470() throws Throwable {

    if (debug) System.out.printf("%nRingBufferMutantTest1.test470");


    at.fhhagenberg.sqe.exercise13.RingBufferMutant var1 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var1.enqueue((java.lang.Object)'#');
    var1.enqueue((java.lang.Object)' ');
    int var6 = var1.size();
    int var7 = var1.size();
    int var8 = var1.size();
    int var9 = var1.size();
    int var10 = var1.size();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var12 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var12.enqueue((java.lang.Object)'#');
    boolean var15 = var12.isEmpty();
    int var16 = var12.size();
    var1.enqueue((java.lang.Object)var16);
    int var18 = var1.size();
    int var19 = var1.size();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var21 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var22 = var21.isEmpty();
    boolean var23 = var21.isEmpty();
    java.util.Iterator var24 = var21.iterator();
    boolean var25 = var21.isEmpty();
    var21.enqueue((java.lang.Object)'#');
    boolean var28 = var21.isEmpty();
    boolean var29 = var21.isEmpty();
    boolean var30 = var21.isEmpty();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var32 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var33 = var32.isEmpty();
    boolean var34 = var32.isEmpty();
    java.util.Iterator var35 = var32.iterator();
    boolean var36 = var32.isEmpty();
    int var37 = var32.size();
    int var38 = var32.size();
    java.util.Iterator var39 = var32.iterator();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var41 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var41.enqueue((java.lang.Object)'#');
    java.util.Iterator var44 = var41.iterator();
    java.util.Iterator var45 = var41.iterator();
    var41.enqueue((java.lang.Object)false);
    java.lang.Object var48 = var41.dequeue();
    var32.enqueue((java.lang.Object)var41);
    java.util.Iterator var50 = var41.iterator();
    var21.enqueue((java.lang.Object)var50);
    var1.enqueue((java.lang.Object)var21);
    int var53 = var21.size();
    java.util.Iterator var54 = var21.iterator();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var48 + "' != '" + '#'+ "'", var48.equals('#'));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);

  }

  public void test471() throws Throwable {

    if (debug) System.out.printf("%nRingBufferMutantTest1.test471");


    at.fhhagenberg.sqe.exercise13.RingBufferMutant var1 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var1.enqueue((java.lang.Object)'#');
    java.util.Iterator var4 = var1.iterator();
    java.util.Iterator var5 = var1.iterator();
    var1.enqueue((java.lang.Object)false);
    int var8 = var1.size();
    boolean var9 = var1.isEmpty();
    java.lang.Object var10 = var1.dequeue();
    java.util.Iterator var11 = var1.iterator();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var13 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var13.enqueue((java.lang.Object)'#');
    java.util.Iterator var16 = var13.iterator();
    java.util.Iterator var17 = var13.iterator();
    java.util.Iterator var18 = var13.iterator();
    var1.enqueue((java.lang.Object)var13);
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var21 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var21.enqueue((java.lang.Object)'#');
    int var24 = var21.size();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var26 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var27 = var26.isEmpty();
    boolean var28 = var26.isEmpty();
    java.util.Iterator var29 = var26.iterator();
    boolean var30 = var26.isEmpty();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var32 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var32.enqueue((java.lang.Object)'#');
    java.util.Iterator var35 = var32.iterator();
    java.util.Iterator var36 = var32.iterator();
    var32.enqueue((java.lang.Object)false);
    int var39 = var32.size();
    var26.enqueue((java.lang.Object)var32);
    var21.enqueue((java.lang.Object)var32);
    java.util.Iterator var42 = var32.iterator();
    java.util.Iterator var43 = var32.iterator();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var45 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var46 = var45.isEmpty();
    boolean var47 = var45.isEmpty();
    java.util.Iterator var48 = var45.iterator();
    boolean var49 = var45.isEmpty();
    var45.enqueue((java.lang.Object)'#');
    int var52 = var45.size();
    var32.enqueue((java.lang.Object)var52);
    boolean var54 = var32.isEmpty();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var56 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var56.enqueue((java.lang.Object)'#');
    int var59 = var56.size();
    int var60 = var56.size();
    java.util.Iterator var61 = var56.iterator();
    java.util.Iterator var62 = var56.iterator();
    var32.enqueue((java.lang.Object)var56);
    boolean var64 = var32.isEmpty();
    boolean var65 = var32.isEmpty();
    var13.enqueue((java.lang.Object)var32);
    java.util.Iterator var67 = var32.iterator();
    int var68 = var32.size();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + '#'+ "'", var10.equals('#'));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == 4);

  }

  public void test472() throws Throwable {

    if (debug) System.out.printf("%nRingBufferMutantTest1.test472");


    at.fhhagenberg.sqe.exercise13.RingBufferMutant var1 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var1.enqueue((java.lang.Object)'#');
    var1.enqueue((java.lang.Object)' ');
    int var6 = var1.size();
    java.util.Iterator var7 = var1.iterator();
    boolean var8 = var1.isEmpty();
    java.util.Iterator var9 = var1.iterator();
    int var10 = var1.size();
    boolean var11 = var1.isEmpty();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var13 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var13.enqueue((java.lang.Object)'#');
    java.util.Iterator var16 = var13.iterator();
    java.util.Iterator var17 = var13.iterator();
    var13.enqueue((java.lang.Object)false);
    int var20 = var13.size();
    boolean var21 = var13.isEmpty();
    java.lang.Object var22 = var13.dequeue();
    java.util.Iterator var23 = var13.iterator();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var25 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var25.enqueue((java.lang.Object)'#');
    java.util.Iterator var28 = var25.iterator();
    java.util.Iterator var29 = var25.iterator();
    java.util.Iterator var30 = var25.iterator();
    var13.enqueue((java.lang.Object)var25);
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var33 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(0);
    int var34 = var33.size();
    boolean var35 = var33.isEmpty();
    boolean var36 = var33.isEmpty();
    boolean var37 = var33.isEmpty();
    var25.enqueue((java.lang.Object)var33);
    java.util.Iterator var39 = var25.iterator();
    boolean var40 = var25.isEmpty();
    var1.enqueue((java.lang.Object)var25);
    java.util.Iterator var42 = var1.iterator();
    int var43 = var1.size();
    java.util.Iterator var44 = var1.iterator();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var46 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var46.enqueue((java.lang.Object)'#');
    java.util.Iterator var49 = var46.iterator();
    java.util.Iterator var50 = var46.iterator();
    java.util.Iterator var51 = var46.iterator();
    boolean var52 = var46.isEmpty();
    java.util.Iterator var53 = var46.iterator();
    int var54 = var46.size();
    int var55 = var46.size();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var57 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var57.enqueue((java.lang.Object)'#');
    int var60 = var57.size();
    var57.enqueue((java.lang.Object)true);
    java.util.Iterator var63 = var57.iterator();
    var46.enqueue((java.lang.Object)var57);
    java.util.Iterator var65 = var46.iterator();
    int var66 = var46.size();
    var1.enqueue((java.lang.Object)var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var22 + "' != '" + '#'+ "'", var22.equals('#'));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == 2);

  }

  public void test473() throws Throwable {

    if (debug) System.out.printf("%nRingBufferMutantTest1.test473");


    at.fhhagenberg.sqe.exercise13.RingBufferMutant var1 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var1.enqueue((java.lang.Object)'#');
    java.util.Iterator var4 = var1.iterator();
    java.util.Iterator var5 = var1.iterator();
    var1.enqueue((java.lang.Object)false);
    int var8 = var1.size();
    boolean var9 = var1.isEmpty();
    boolean var10 = var1.isEmpty();
    boolean var11 = var1.isEmpty();
    int var12 = var1.size();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var14 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var15 = var14.isEmpty();
    boolean var16 = var14.isEmpty();
    java.util.Iterator var17 = var14.iterator();
    boolean var18 = var14.isEmpty();
    int var19 = var14.size();
    int var20 = var14.size();
    var1.enqueue((java.lang.Object)var14);
    boolean var22 = var1.isEmpty();
    java.util.Iterator var23 = var1.iterator();
    boolean var24 = var1.isEmpty();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);

  }

  public void test474() throws Throwable {

    if (debug) System.out.printf("%nRingBufferMutantTest1.test474");


    at.fhhagenberg.sqe.exercise13.RingBufferMutant var1 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var1.enqueue((java.lang.Object)'#');
    java.util.Iterator var4 = var1.iterator();
    java.util.Iterator var5 = var1.iterator();
    boolean var6 = var1.isEmpty();
    int var7 = var1.size();
    var1.enqueue((java.lang.Object)1.0d);
    boolean var10 = var1.isEmpty();
    int var11 = var1.size();
    java.util.Iterator var12 = var1.iterator();
    java.lang.Object var13 = var1.dequeue();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var15 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var15.enqueue((java.lang.Object)1.0d);
    java.util.Iterator var18 = var15.iterator();
    boolean var19 = var15.isEmpty();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var21 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var22 = var21.isEmpty();
    boolean var23 = var21.isEmpty();
    java.util.Iterator var24 = var21.iterator();
    boolean var25 = var21.isEmpty();
    var21.enqueue((java.lang.Object)'#');
    boolean var28 = var21.isEmpty();
    int var29 = var21.size();
    java.util.Iterator var30 = var21.iterator();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var32 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var32.enqueue((java.lang.Object)'#');
    java.util.Iterator var35 = var32.iterator();
    var32.enqueue((java.lang.Object)100.0d);
    boolean var38 = var32.isEmpty();
    java.lang.Object var39 = var32.dequeue();
    var21.enqueue(var39);
    java.util.Iterator var41 = var21.iterator();
    var15.enqueue((java.lang.Object)var21);
    var1.enqueue((java.lang.Object)var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + '#'+ "'", var13.equals('#'));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var39 + "' != '" + '#'+ "'", var39.equals('#'));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);

  }

  public void test475() throws Throwable {

    if (debug) System.out.printf("%nRingBufferMutantTest1.test475");


    at.fhhagenberg.sqe.exercise13.RingBufferMutant var1 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var1.enqueue((java.lang.Object)'#');
    int var4 = var1.size();
    java.lang.Object var5 = var1.dequeue();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var7 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var7.enqueue((java.lang.Object)'#');
    java.util.Iterator var10 = var7.iterator();
    java.util.Iterator var11 = var7.iterator();
    var7.enqueue((java.lang.Object)false);
    int var14 = var7.size();
    boolean var15 = var7.isEmpty();
    boolean var16 = var7.isEmpty();
    boolean var17 = var7.isEmpty();
    int var18 = var7.size();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var20 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(100);
    int var21 = var20.size();
    java.util.Iterator var22 = var20.iterator();
    var7.enqueue((java.lang.Object)var20);
    var1.enqueue((java.lang.Object)var7);
    boolean var25 = var7.isEmpty();
    java.util.Iterator var26 = var7.iterator();
    boolean var27 = var7.isEmpty();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + '#'+ "'", var5.equals('#'));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);

  }

  public void test476() throws Throwable {

    if (debug) System.out.printf("%nRingBufferMutantTest1.test476");


    at.fhhagenberg.sqe.exercise13.RingBufferMutant var1 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var2 = var1.isEmpty();
    boolean var3 = var1.isEmpty();
    java.util.Iterator var4 = var1.iterator();
    boolean var5 = var1.isEmpty();
    var1.enqueue((java.lang.Object)'#');
    boolean var8 = var1.isEmpty();
    int var9 = var1.size();
    java.util.Iterator var10 = var1.iterator();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var12 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var12.enqueue((java.lang.Object)'#');
    java.util.Iterator var15 = var12.iterator();
    var12.enqueue((java.lang.Object)100.0d);
    boolean var18 = var12.isEmpty();
    java.lang.Object var19 = var12.dequeue();
    var1.enqueue(var19);
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var22 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var22.enqueue((java.lang.Object)'#');
    java.util.Iterator var25 = var22.iterator();
    var1.enqueue((java.lang.Object)var22);
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var28 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var28.enqueue((java.lang.Object)'#');
    java.util.Iterator var31 = var28.iterator();
    java.util.Iterator var32 = var28.iterator();
    var28.enqueue((java.lang.Object)false);
    int var35 = var28.size();
    boolean var36 = var28.isEmpty();
    java.lang.Object var37 = var28.dequeue();
    java.util.Iterator var38 = var28.iterator();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var40 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var40.enqueue((java.lang.Object)'#');
    java.util.Iterator var43 = var40.iterator();
    java.util.Iterator var44 = var40.iterator();
    java.util.Iterator var45 = var40.iterator();
    var28.enqueue((java.lang.Object)var40);
    var1.enqueue((java.lang.Object)var28);
    var1.enqueue((java.lang.Object)'a');
    int var50 = var1.size();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + '#'+ "'", var19.equals('#'));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var37 + "' != '" + '#'+ "'", var37.equals('#'));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == 5);

  }

  public void test477() throws Throwable {

    if (debug) System.out.printf("%nRingBufferMutantTest1.test477");


    at.fhhagenberg.sqe.exercise13.RingBufferMutant var1 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(4);
    java.util.Iterator var2 = var1.iterator();
    boolean var3 = var1.isEmpty();
    java.util.Iterator var4 = var1.iterator();
    int var5 = var1.size();
    boolean var6 = var1.isEmpty();
    java.util.Iterator var7 = var1.iterator();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);

  }

  public void test478() throws Throwable {

    if (debug) System.out.printf("%nRingBufferMutantTest1.test478");


    at.fhhagenberg.sqe.exercise13.RingBufferMutant var1 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var2 = var1.isEmpty();
    boolean var3 = var1.isEmpty();
    java.util.Iterator var4 = var1.iterator();
    boolean var5 = var1.isEmpty();
    var1.enqueue((java.lang.Object)'#');
    boolean var8 = var1.isEmpty();
    boolean var9 = var1.isEmpty();
    int var10 = var1.size();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var12 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var12.enqueue((java.lang.Object)'#');
    java.util.Iterator var15 = var12.iterator();
    java.util.Iterator var16 = var12.iterator();
    boolean var17 = var12.isEmpty();
    int var18 = var12.size();
    var12.enqueue((java.lang.Object)1.0d);
    var1.enqueue((java.lang.Object)var12);
    java.util.Iterator var22 = var12.iterator();
    java.lang.Object var23 = var12.dequeue();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + '#'+ "'", var23.equals('#'));

  }

  public void test479() throws Throwable {

    if (debug) System.out.printf("%nRingBufferMutantTest1.test479");


    at.fhhagenberg.sqe.exercise13.RingBufferMutant var1 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(2);
    java.util.Iterator var2 = var1.iterator();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var4 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var5 = var4.isEmpty();
    boolean var6 = var4.isEmpty();
    java.util.Iterator var7 = var4.iterator();
    boolean var8 = var4.isEmpty();
    int var9 = var4.size();
    java.util.Iterator var10 = var4.iterator();
    int var11 = var4.size();
    boolean var12 = var4.isEmpty();
    int var13 = var4.size();
    var1.enqueue((java.lang.Object)var4);
    java.util.Iterator var15 = var4.iterator();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);

  }

  public void test480() throws Throwable {

    if (debug) System.out.printf("%nRingBufferMutantTest1.test480");


    at.fhhagenberg.sqe.exercise13.RingBufferMutant var1 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var2 = var1.isEmpty();
    boolean var3 = var1.isEmpty();
    java.util.Iterator var4 = var1.iterator();
    boolean var5 = var1.isEmpty();
    var1.enqueue((java.lang.Object)'#');
    boolean var8 = var1.isEmpty();
    int var9 = var1.size();
    java.util.Iterator var10 = var1.iterator();
    boolean var11 = var1.isEmpty();
    java.util.Iterator var12 = var1.iterator();
    boolean var13 = var1.isEmpty();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var15 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var15.enqueue((java.lang.Object)'#');
    java.util.Iterator var18 = var15.iterator();
    java.util.Iterator var19 = var15.iterator();
    var15.enqueue((java.lang.Object)false);
    java.lang.Object var22 = var15.dequeue();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var24 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var25 = var24.isEmpty();
    boolean var26 = var24.isEmpty();
    java.util.Iterator var27 = var24.iterator();
    boolean var28 = var24.isEmpty();
    var24.enqueue((java.lang.Object)'#');
    boolean var31 = var24.isEmpty();
    int var32 = var24.size();
    java.util.Iterator var33 = var24.iterator();
    var15.enqueue((java.lang.Object)var24);
    java.util.Iterator var35 = var15.iterator();
    var1.enqueue((java.lang.Object)var15);
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var38 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var38.enqueue((java.lang.Object)'#');
    java.util.Iterator var41 = var38.iterator();
    java.util.Iterator var42 = var38.iterator();
    var1.enqueue((java.lang.Object)var38);
    boolean var44 = var38.isEmpty();
    int var45 = var38.size();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var22 + "' != '" + '#'+ "'", var22.equals('#'));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == 1);

  }

  public void test481() throws Throwable {

    if (debug) System.out.printf("%nRingBufferMutantTest1.test481");


    at.fhhagenberg.sqe.exercise13.RingBufferMutant var1 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var1.enqueue((java.lang.Object)'#');
    var1.enqueue((java.lang.Object)' ');
    int var6 = var1.size();
    int var7 = var1.size();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var9 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(0);
    java.util.Iterator var10 = var9.iterator();
    boolean var11 = var9.isEmpty();
    var1.enqueue((java.lang.Object)var11);
    int var13 = var1.size();
    java.util.Iterator var14 = var1.iterator();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var16 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var17 = var16.isEmpty();
    boolean var18 = var16.isEmpty();
    java.util.Iterator var19 = var16.iterator();
    boolean var20 = var16.isEmpty();
    int var21 = var16.size();
    java.util.Iterator var22 = var16.iterator();
    int var23 = var16.size();
    boolean var24 = var16.isEmpty();
    int var25 = var16.size();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var27 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var27.enqueue((java.lang.Object)'#');
    int var30 = var27.size();
    int var31 = var27.size();
    java.util.Iterator var32 = var27.iterator();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var34 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var35 = var34.isEmpty();
    boolean var36 = var34.isEmpty();
    java.util.Iterator var37 = var34.iterator();
    boolean var38 = var34.isEmpty();
    var34.enqueue((java.lang.Object)1.0d);
    java.util.Iterator var41 = var34.iterator();
    var27.enqueue((java.lang.Object)var41);
    var16.enqueue((java.lang.Object)var27);
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var45 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(4);
    var16.enqueue((java.lang.Object)var45);
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var48 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var48.enqueue((java.lang.Object)'#');
    java.util.Iterator var51 = var48.iterator();
    var48.enqueue((java.lang.Object)100.0d);
    var45.enqueue((java.lang.Object)100.0d);
    var1.enqueue((java.lang.Object)100.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);

  }

  public void test482() throws Throwable {

    if (debug) System.out.printf("%nRingBufferMutantTest1.test482");


    at.fhhagenberg.sqe.exercise13.RingBufferMutant var1 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(0);
    int var2 = var1.size();
    boolean var3 = var1.isEmpty();
    boolean var4 = var1.isEmpty();
    boolean var5 = var1.isEmpty();
    java.util.Iterator var6 = var1.iterator();
    int var7 = var1.size();
    java.util.Iterator var8 = var1.iterator();
    int var9 = var1.size();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 0);

  }

  public void test483() throws Throwable {

    if (debug) System.out.printf("%nRingBufferMutantTest1.test483");


    at.fhhagenberg.sqe.exercise13.RingBufferMutant var1 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var2 = var1.isEmpty();
    boolean var3 = var1.isEmpty();
    boolean var4 = var1.isEmpty();
    int var5 = var1.size();
    boolean var6 = var1.isEmpty();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.Object var7 = var1.dequeue();
      fail("Expected exception of type java.lang.RuntimeException");
    } catch (java.lang.RuntimeException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);

  }

  public void test484() throws Throwable {

    if (debug) System.out.printf("%nRingBufferMutantTest1.test484");


    at.fhhagenberg.sqe.exercise13.RingBufferMutant var1 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var2 = var1.isEmpty();
    boolean var3 = var1.isEmpty();
    java.util.Iterator var4 = var1.iterator();
    boolean var5 = var1.isEmpty();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var7 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var7.enqueue((java.lang.Object)'#');
    java.util.Iterator var10 = var7.iterator();
    java.util.Iterator var11 = var7.iterator();
    var7.enqueue((java.lang.Object)false);
    int var14 = var7.size();
    var1.enqueue((java.lang.Object)var7);
    boolean var16 = var1.isEmpty();
    int var17 = var1.size();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 1);

  }

  public void test485() throws Throwable {

    if (debug) System.out.printf("%nRingBufferMutantTest1.test485");


    at.fhhagenberg.sqe.exercise13.RingBufferMutant var1 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var2 = var1.isEmpty();
    boolean var3 = var1.isEmpty();
    int var4 = var1.size();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var6 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var7 = var6.isEmpty();
    boolean var8 = var6.isEmpty();
    var1.enqueue((java.lang.Object)var8);
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var11 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var11.enqueue((java.lang.Object)'#');
    int var14 = var11.size();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var16 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var17 = var16.isEmpty();
    boolean var18 = var16.isEmpty();
    java.util.Iterator var19 = var16.iterator();
    boolean var20 = var16.isEmpty();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var22 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var22.enqueue((java.lang.Object)'#');
    java.util.Iterator var25 = var22.iterator();
    java.util.Iterator var26 = var22.iterator();
    var22.enqueue((java.lang.Object)false);
    int var29 = var22.size();
    var16.enqueue((java.lang.Object)var22);
    var11.enqueue((java.lang.Object)var22);
    java.util.Iterator var32 = var22.iterator();
    java.util.Iterator var33 = var22.iterator();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var35 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var36 = var35.isEmpty();
    boolean var37 = var35.isEmpty();
    java.util.Iterator var38 = var35.iterator();
    boolean var39 = var35.isEmpty();
    var35.enqueue((java.lang.Object)'#');
    int var42 = var35.size();
    var22.enqueue((java.lang.Object)var42);
    boolean var44 = var22.isEmpty();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var46 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var46.enqueue((java.lang.Object)'#');
    int var49 = var46.size();
    int var50 = var46.size();
    java.util.Iterator var51 = var46.iterator();
    java.util.Iterator var52 = var46.iterator();
    var22.enqueue((java.lang.Object)var46);
    java.util.Iterator var54 = var22.iterator();
    var1.enqueue((java.lang.Object)var22);
    java.util.Iterator var56 = var22.iterator();
    int var57 = var22.size();
    java.util.Iterator var58 = var22.iterator();
    boolean var59 = var22.isEmpty();
    boolean var60 = var22.isEmpty();
    java.util.Iterator var61 = var22.iterator();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);

  }

  public void test486() throws Throwable {

    if (debug) System.out.printf("%nRingBufferMutantTest1.test486");


    at.fhhagenberg.sqe.exercise13.RingBufferMutant var1 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var1.enqueue((java.lang.Object)'#');
    int var4 = var1.size();
    var1.enqueue((java.lang.Object)true);
    java.util.Iterator var7 = var1.iterator();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var9 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(100);
    var1.enqueue((java.lang.Object)100);
    int var11 = var1.size();
    int var12 = var1.size();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 3);

  }

  public void test487() throws Throwable {

    if (debug) System.out.printf("%nRingBufferMutantTest1.test487");


    at.fhhagenberg.sqe.exercise13.RingBufferMutant var1 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var2 = var1.isEmpty();
    boolean var3 = var1.isEmpty();
    java.util.Iterator var4 = var1.iterator();
    boolean var5 = var1.isEmpty();
    var1.enqueue((java.lang.Object)'#');
    boolean var8 = var1.isEmpty();
    int var9 = var1.size();
    java.util.Iterator var10 = var1.iterator();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var12 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var12.enqueue((java.lang.Object)'#');
    java.util.Iterator var15 = var12.iterator();
    var12.enqueue((java.lang.Object)100.0d);
    boolean var18 = var12.isEmpty();
    java.lang.Object var19 = var12.dequeue();
    var1.enqueue(var19);
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var22 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var22.enqueue((java.lang.Object)'#');
    java.util.Iterator var25 = var22.iterator();
    var1.enqueue((java.lang.Object)var22);
    boolean var27 = var22.isEmpty();
    int var28 = var22.size();
    java.util.Iterator var29 = var22.iterator();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var31 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var31.enqueue((java.lang.Object)'#');
    int var34 = var31.size();
    var31.enqueue((java.lang.Object)true);
    java.util.Iterator var37 = var31.iterator();
    boolean var38 = var31.isEmpty();
    java.util.Iterator var39 = var31.iterator();
    var22.enqueue((java.lang.Object)var39);
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var42 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var42.enqueue((java.lang.Object)'#');
    var42.enqueue((java.lang.Object)' ');
    int var47 = var42.size();
    int var48 = var42.size();
    int var49 = var42.size();
    int var50 = var42.size();
    java.util.Iterator var51 = var42.iterator();
    var22.enqueue((java.lang.Object)var42);
    java.util.Iterator var53 = var22.iterator();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + '#'+ "'", var19.equals('#'));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);

  }

  public void test488() throws Throwable {

    if (debug) System.out.printf("%nRingBufferMutantTest1.test488");


    at.fhhagenberg.sqe.exercise13.RingBufferMutant var1 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var1.enqueue((java.lang.Object)'#');
    java.util.Iterator var4 = var1.iterator();
    java.util.Iterator var5 = var1.iterator();
    var1.enqueue((java.lang.Object)false);
    int var8 = var1.size();
    boolean var9 = var1.isEmpty();
    boolean var10 = var1.isEmpty();
    boolean var11 = var1.isEmpty();
    int var12 = var1.size();
    java.util.Iterator var13 = var1.iterator();
    java.lang.Object var14 = var1.dequeue();
    java.util.Iterator var15 = var1.iterator();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + '#'+ "'", var14.equals('#'));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);

  }

  public void test489() throws Throwable {

    if (debug) System.out.printf("%nRingBufferMutantTest1.test489");


    at.fhhagenberg.sqe.exercise13.RingBufferMutant var1 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(100);
    int var2 = var1.size();
    int var3 = var1.size();
    boolean var4 = var1.isEmpty();
    boolean var5 = var1.isEmpty();
    int var6 = var1.size();
    boolean var7 = var1.isEmpty();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.Object var8 = var1.dequeue();
      fail("Expected exception of type java.lang.RuntimeException");
    } catch (java.lang.RuntimeException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);

  }

  public void test490() throws Throwable {

    if (debug) System.out.printf("%nRingBufferMutantTest1.test490");


    at.fhhagenberg.sqe.exercise13.RingBufferMutant var1 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var2 = var1.isEmpty();
    boolean var3 = var1.isEmpty();
    int var4 = var1.size();
    java.util.Iterator var5 = var1.iterator();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var7 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var7.enqueue((java.lang.Object)'#');
    java.util.Iterator var10 = var7.iterator();
    java.util.Iterator var11 = var7.iterator();
    java.util.Iterator var12 = var7.iterator();
    boolean var13 = var7.isEmpty();
    java.util.Iterator var14 = var7.iterator();
    int var15 = var7.size();
    int var16 = var7.size();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var18 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var18.enqueue((java.lang.Object)'#');
    int var21 = var18.size();
    var18.enqueue((java.lang.Object)true);
    java.util.Iterator var24 = var18.iterator();
    var7.enqueue((java.lang.Object)var18);
    java.util.Iterator var26 = var7.iterator();
    boolean var27 = var7.isEmpty();
    var1.enqueue((java.lang.Object)var7);
    java.lang.Object var29 = var1.dequeue();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);

  }

  public void test491() throws Throwable {

    if (debug) System.out.printf("%nRingBufferMutantTest1.test491");


    at.fhhagenberg.sqe.exercise13.RingBufferMutant var1 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var1.enqueue((java.lang.Object)'#');
    int var4 = var1.size();
    var1.enqueue((java.lang.Object)true);
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var8 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var8.enqueue((java.lang.Object)'#');
    java.util.Iterator var11 = var8.iterator();
    java.util.Iterator var12 = var8.iterator();
    var8.enqueue((java.lang.Object)false);
    int var15 = var8.size();
    boolean var16 = var8.isEmpty();
    boolean var17 = var8.isEmpty();
    var8.enqueue((java.lang.Object)(short)0);
    var1.enqueue((java.lang.Object)(short)0);
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var22 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var22.enqueue((java.lang.Object)'#');
    java.util.Iterator var25 = var22.iterator();
    var22.enqueue((java.lang.Object)100.0d);
    java.util.Iterator var28 = var22.iterator();
    var1.enqueue((java.lang.Object)var22);
    java.lang.Object var30 = var1.dequeue();
    java.util.Iterator var31 = var1.iterator();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var30 + "' != '" + '#'+ "'", var30.equals('#'));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);

  }

  public void test492() throws Throwable {

    if (debug) System.out.printf("%nRingBufferMutantTest1.test492");


    at.fhhagenberg.sqe.exercise13.RingBufferMutant var1 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var1.enqueue((java.lang.Object)'#');
    java.util.Iterator var4 = var1.iterator();
    java.util.Iterator var5 = var1.iterator();
    var1.enqueue((java.lang.Object)false);
    int var8 = var1.size();
    boolean var9 = var1.isEmpty();
    boolean var10 = var1.isEmpty();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var12 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var12.enqueue((java.lang.Object)'#');
    int var15 = var12.size();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var17 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var18 = var17.isEmpty();
    boolean var19 = var17.isEmpty();
    java.util.Iterator var20 = var17.iterator();
    boolean var21 = var17.isEmpty();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var23 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var23.enqueue((java.lang.Object)'#');
    java.util.Iterator var26 = var23.iterator();
    java.util.Iterator var27 = var23.iterator();
    var23.enqueue((java.lang.Object)false);
    int var30 = var23.size();
    var17.enqueue((java.lang.Object)var23);
    var12.enqueue((java.lang.Object)var23);
    java.util.Iterator var33 = var23.iterator();
    var1.enqueue((java.lang.Object)var23);
    java.lang.Object var35 = var23.dequeue();
    java.util.Iterator var36 = var23.iterator();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var38 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(2);
    java.util.Iterator var39 = var38.iterator();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var41 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var41.enqueue((java.lang.Object)'#');
    java.util.Iterator var44 = var41.iterator();
    java.util.Iterator var45 = var41.iterator();
    var41.enqueue((java.lang.Object)false);
    int var48 = var41.size();
    boolean var49 = var41.isEmpty();
    boolean var50 = var41.isEmpty();
    var38.enqueue((java.lang.Object)var41);
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var53 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var53.enqueue((java.lang.Object)'#');
    int var56 = var53.size();
    var53.enqueue((java.lang.Object)true);
    java.util.Iterator var59 = var53.iterator();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var61 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(100);
    var53.enqueue((java.lang.Object)100);
    var41.enqueue((java.lang.Object)100);
    var23.enqueue((java.lang.Object)100);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var35 + "' != '" + '#'+ "'", var35.equals('#'));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);

  }

  public void test493() throws Throwable {

    if (debug) System.out.printf("%nRingBufferMutantTest1.test493");


    at.fhhagenberg.sqe.exercise13.RingBufferMutant var1 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var2 = var1.isEmpty();
    boolean var3 = var1.isEmpty();
    java.util.Iterator var4 = var1.iterator();
    boolean var5 = var1.isEmpty();
    int var6 = var1.size();
    java.util.Iterator var7 = var1.iterator();
    int var8 = var1.size();
    int var9 = var1.size();
    java.util.Iterator var10 = var1.iterator();
    int var11 = var1.size();
    int var12 = var1.size();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 0);

  }

  public void test494() throws Throwable {

    if (debug) System.out.printf("%nRingBufferMutantTest1.test494");


    at.fhhagenberg.sqe.exercise13.RingBufferMutant var1 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var2 = var1.isEmpty();
    boolean var3 = var1.isEmpty();
    java.util.Iterator var4 = var1.iterator();
    boolean var5 = var1.isEmpty();
    int var6 = var1.size();
    int var7 = var1.size();
    java.util.Iterator var8 = var1.iterator();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var10 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var10.enqueue((java.lang.Object)'#');
    java.util.Iterator var13 = var10.iterator();
    java.util.Iterator var14 = var10.iterator();
    java.util.Iterator var15 = var10.iterator();
    var1.enqueue((java.lang.Object)var10);
    int var17 = var10.size();
    boolean var18 = var10.isEmpty();
    java.util.Iterator var19 = var10.iterator();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var21 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var21.enqueue((java.lang.Object)'#');
    java.util.Iterator var24 = var21.iterator();
    java.util.Iterator var25 = var21.iterator();
    java.util.Iterator var26 = var21.iterator();
    boolean var27 = var21.isEmpty();
    java.util.Iterator var28 = var21.iterator();
    boolean var29 = var21.isEmpty();
    var10.enqueue((java.lang.Object)var21);
    int var31 = var21.size();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 1);

  }

  public void test495() throws Throwable {

    if (debug) System.out.printf("%nRingBufferMutantTest1.test495");


    at.fhhagenberg.sqe.exercise13.RingBufferMutant var1 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(100);
    int var2 = var1.size();
    int var3 = var1.size();
    boolean var4 = var1.isEmpty();
    boolean var5 = var1.isEmpty();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var7 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var7.enqueue((java.lang.Object)'#');
    int var10 = var7.size();
    java.lang.Object var11 = var7.dequeue();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var13 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(0);
    int var14 = var13.size();
    var7.enqueue((java.lang.Object)var14);
    var1.enqueue((java.lang.Object)var14);
    boolean var17 = var1.isEmpty();
    boolean var18 = var1.isEmpty();
    java.lang.Object var19 = var1.dequeue();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var21 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var22 = var21.isEmpty();
    boolean var23 = var21.isEmpty();
    java.util.Iterator var24 = var21.iterator();
    boolean var25 = var21.isEmpty();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var27 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var27.enqueue((java.lang.Object)'#');
    java.util.Iterator var30 = var27.iterator();
    java.util.Iterator var31 = var27.iterator();
    var27.enqueue((java.lang.Object)false);
    int var34 = var27.size();
    var21.enqueue((java.lang.Object)var27);
    int var36 = var21.size();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var38 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var39 = var38.isEmpty();
    boolean var40 = var38.isEmpty();
    java.util.Iterator var41 = var38.iterator();
    boolean var42 = var38.isEmpty();
    java.util.Iterator var43 = var38.iterator();
    int var44 = var38.size();
    var21.enqueue((java.lang.Object)var44);
    java.util.Iterator var46 = var21.iterator();
    boolean var47 = var21.isEmpty();
    var1.enqueue((java.lang.Object)var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + '#'+ "'", var11.equals('#'));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + 0+ "'", var19.equals(0));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);

  }

  public void test496() throws Throwable {

    if (debug) System.out.printf("%nRingBufferMutantTest1.test496");


    at.fhhagenberg.sqe.exercise13.RingBufferMutant var1 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var1.enqueue((java.lang.Object)'#');
    var1.enqueue((java.lang.Object)' ');
    int var6 = var1.size();
    var1.enqueue((java.lang.Object)1);
    boolean var9 = var1.isEmpty();
    java.util.Iterator var10 = var1.iterator();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var12 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var13 = var12.isEmpty();
    boolean var14 = var12.isEmpty();
    boolean var15 = var12.isEmpty();
    int var16 = var12.size();
    int var17 = var12.size();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var19 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var20 = var19.isEmpty();
    boolean var21 = var19.isEmpty();
    java.util.Iterator var22 = var19.iterator();
    boolean var23 = var19.isEmpty();
    int var24 = var19.size();
    java.util.Iterator var25 = var19.iterator();
    int var26 = var19.size();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var28 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var28.enqueue((java.lang.Object)'#');
    java.util.Iterator var31 = var28.iterator();
    java.util.Iterator var32 = var28.iterator();
    var28.enqueue((java.lang.Object)false);
    java.lang.Object var35 = var28.dequeue();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var37 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var38 = var37.isEmpty();
    boolean var39 = var37.isEmpty();
    java.util.Iterator var40 = var37.iterator();
    boolean var41 = var37.isEmpty();
    var37.enqueue((java.lang.Object)'#');
    boolean var44 = var37.isEmpty();
    int var45 = var37.size();
    java.util.Iterator var46 = var37.iterator();
    var28.enqueue((java.lang.Object)var37);
    int var48 = var37.size();
    int var49 = var37.size();
    var19.enqueue((java.lang.Object)var37);
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var52 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var53 = var52.isEmpty();
    boolean var54 = var52.isEmpty();
    int var55 = var52.size();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var57 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var58 = var57.isEmpty();
    boolean var59 = var57.isEmpty();
    var52.enqueue((java.lang.Object)var59);
    boolean var61 = var52.isEmpty();
    var37.enqueue((java.lang.Object)var61);
    boolean var63 = var37.isEmpty();
    var12.enqueue((java.lang.Object)var37);
    var1.enqueue((java.lang.Object)var12);
    java.util.Iterator var66 = var12.iterator();
    java.lang.Object var67 = var12.dequeue();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var35 + "' != '" + '#'+ "'", var35.equals('#'));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);

  }

  public void test497() throws Throwable {

    if (debug) System.out.printf("%nRingBufferMutantTest1.test497");


    at.fhhagenberg.sqe.exercise13.RingBufferMutant var1 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var1.enqueue((java.lang.Object)'#');
    var1.enqueue((java.lang.Object)' ');
    int var6 = var1.size();
    java.util.Iterator var7 = var1.iterator();
    boolean var8 = var1.isEmpty();
    java.util.Iterator var9 = var1.iterator();
    int var10 = var1.size();
    boolean var11 = var1.isEmpty();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var13 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var13.enqueue((java.lang.Object)'#');
    java.util.Iterator var16 = var13.iterator();
    java.util.Iterator var17 = var13.iterator();
    var13.enqueue((java.lang.Object)false);
    int var20 = var13.size();
    boolean var21 = var13.isEmpty();
    java.lang.Object var22 = var13.dequeue();
    java.util.Iterator var23 = var13.iterator();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var25 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var25.enqueue((java.lang.Object)'#');
    java.util.Iterator var28 = var25.iterator();
    java.util.Iterator var29 = var25.iterator();
    java.util.Iterator var30 = var25.iterator();
    var13.enqueue((java.lang.Object)var25);
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var33 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(0);
    int var34 = var33.size();
    boolean var35 = var33.isEmpty();
    boolean var36 = var33.isEmpty();
    boolean var37 = var33.isEmpty();
    var25.enqueue((java.lang.Object)var33);
    java.util.Iterator var39 = var25.iterator();
    boolean var40 = var25.isEmpty();
    var1.enqueue((java.lang.Object)var25);
    java.util.Iterator var42 = var25.iterator();
    boolean var43 = var25.isEmpty();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var22 + "' != '" + '#'+ "'", var22.equals('#'));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);

  }

  public void test498() throws Throwable {

    if (debug) System.out.printf("%nRingBufferMutantTest1.test498");


    at.fhhagenberg.sqe.exercise13.RingBufferMutant var1 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var1.enqueue((java.lang.Object)'#');
    java.util.Iterator var4 = var1.iterator();
    java.util.Iterator var5 = var1.iterator();
    var1.enqueue((java.lang.Object)false);
    java.lang.Object var8 = var1.dequeue();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var10 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var11 = var10.isEmpty();
    boolean var12 = var10.isEmpty();
    java.util.Iterator var13 = var10.iterator();
    boolean var14 = var10.isEmpty();
    var10.enqueue((java.lang.Object)'#');
    boolean var17 = var10.isEmpty();
    int var18 = var10.size();
    java.util.Iterator var19 = var10.iterator();
    var1.enqueue((java.lang.Object)var10);
    var10.enqueue((java.lang.Object)100);
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var24 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var24.enqueue((java.lang.Object)'#');
    java.util.Iterator var27 = var24.iterator();
    var24.enqueue((java.lang.Object)100.0d);
    java.util.Iterator var30 = var24.iterator();
    var10.enqueue((java.lang.Object)var24);
    int var32 = var24.size();
    int var33 = var24.size();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + '#'+ "'", var8.equals('#'));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == 2);

  }

  public void test499() throws Throwable {

    if (debug) System.out.printf("%nRingBufferMutantTest1.test499");


    at.fhhagenberg.sqe.exercise13.RingBufferMutant var1 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var2 = var1.isEmpty();
    boolean var3 = var1.isEmpty();
    java.util.Iterator var4 = var1.iterator();
    boolean var5 = var1.isEmpty();
    int var6 = var1.size();
    int var7 = var1.size();
    java.util.Iterator var8 = var1.iterator();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var10 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var10.enqueue((java.lang.Object)'#');
    java.util.Iterator var13 = var10.iterator();
    java.util.Iterator var14 = var10.iterator();
    java.util.Iterator var15 = var10.iterator();
    var1.enqueue((java.lang.Object)var10);
    java.lang.Object var17 = var1.dequeue();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);

  }

  public void test500() throws Throwable {

    if (debug) System.out.printf("%nRingBufferMutantTest1.test500");


    at.fhhagenberg.sqe.exercise13.RingBufferMutant var1 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var1.enqueue((java.lang.Object)'#');
    boolean var4 = var1.isEmpty();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var6 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var7 = var6.isEmpty();
    boolean var8 = var6.isEmpty();
    int var9 = var6.size();
    java.util.Iterator var10 = var6.iterator();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var12 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var12.enqueue((java.lang.Object)'#');
    int var15 = var12.size();
    var12.enqueue((java.lang.Object)true);
    java.util.Iterator var18 = var12.iterator();
    var6.enqueue((java.lang.Object)var18);
    java.lang.Object var20 = var6.dequeue();
    var6.enqueue((java.lang.Object)10.0f);
    var1.enqueue((java.lang.Object)10.0f);
    java.lang.Object var24 = var1.dequeue();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var26 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var26.enqueue((java.lang.Object)'#');
    int var29 = var26.size();
    int var30 = var26.size();
    java.util.Iterator var31 = var26.iterator();
    java.util.Iterator var32 = var26.iterator();
    java.lang.Object var33 = var26.dequeue();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var35 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var36 = var35.isEmpty();
    boolean var37 = var35.isEmpty();
    java.util.Iterator var38 = var35.iterator();
    boolean var39 = var35.isEmpty();
    var35.enqueue((java.lang.Object)'#');
    boolean var42 = var35.isEmpty();
    int var43 = var35.size();
    java.util.Iterator var44 = var35.iterator();
    boolean var45 = var35.isEmpty();
    java.util.Iterator var46 = var35.iterator();
    boolean var47 = var35.isEmpty();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var49 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    var49.enqueue((java.lang.Object)'#');
    java.util.Iterator var52 = var49.iterator();
    java.util.Iterator var53 = var49.iterator();
    var49.enqueue((java.lang.Object)false);
    java.lang.Object var56 = var49.dequeue();
    at.fhhagenberg.sqe.exercise13.RingBufferMutant var58 = new at.fhhagenberg.sqe.exercise13.RingBufferMutant(10);
    boolean var59 = var58.isEmpty();
    boolean var60 = var58.isEmpty();
    java.util.Iterator var61 = var58.iterator();
    boolean var62 = var58.isEmpty();
    var58.enqueue((java.lang.Object)'#');
    boolean var65 = var58.isEmpty();
    int var66 = var58.size();
    java.util.Iterator var67 = var58.iterator();
    var49.enqueue((java.lang.Object)var58);
    java.util.Iterator var69 = var49.iterator();
    var35.enqueue((java.lang.Object)var49);
    var26.enqueue((java.lang.Object)var35);
    boolean var72 = var35.isEmpty();
    java.util.Iterator var73 = var35.iterator();
    var1.enqueue((java.lang.Object)var35);
    java.util.Iterator var75 = var1.iterator();
    java.util.Iterator var76 = var1.iterator();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var24 + "' != '" + '#'+ "'", var24.equals('#'));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var33 + "' != '" + '#'+ "'", var33.equals('#'));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var56 + "' != '" + '#'+ "'", var56.equals('#'));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);

  }

}
